{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-06-08T00:45:36.140481+00:00",
  "repo": "peppelinux/draft-demarco-acme-openid-federation",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "breaking change",
      "description": "",
      "color": "9F2F27"
    },
    {
      "name": "has-pr",
      "description": "",
      "color": "DDF976"
    },
    {
      "name": "pending-close",
      "description": null,
      "color": "aaaaaa"
    },
    {
      "name": "next-milestone",
      "description": "",
      "color": "EDE23B"
    },
    {
      "name": "security",
      "description": "",
      "color": "AF5908"
    },
    {
      "name": "discussion-required",
      "description": "",
      "color": "C1F678"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOJ6_NW859ms0D",
      "title": "specialized keys by scopes",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/1",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "we need a way (optional) to define the scope of the key where the issued certificate is related to",
      "createdAt": "2024-01-30T09:07:23Z",
      "updatedAt": "2024-12-17T15:37:39Z",
      "closedAt": "2024-12-17T15:36:27Z",
      "comments": [
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "Out of scope, this is handled at CSR finalizing time. We don't want to have to extend the challenge to handle this.",
          "createdAt": "2024-12-17T15:36:27Z",
          "updatedAt": "2024-12-17T15:36:27Z"
        },
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "https://www.ietf.org/archive/id/draft-aaron-acme-profiles-00.html may be relevant here. It defines the notion of a \"certificate profile\", allowing the requestor to select from a predefined set of certificate parameters.",
          "createdAt": "2024-12-17T15:37:38Z",
          "updatedAt": "2024-12-17T15:37:38Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOJ6_NW86UD4xZ",
      "title": "Questions regarding the specification",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/2",
      "state": "CLOSED",
      "author": "branlwyd",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I gave the specification (as well as the ACME & OpenID Federation specs) a readthrough. I have a few initial questions:\r\n\r\n1) What kind of X.509 certificates are intended to be generated? For example, the original ACME specification generates domain-validated Web PKI certificates (RFC 8555). It has been extended to create S/MIME certificates (RFC 8823), VoIP certificates (RFC 9448), and probably others. The text in Section 6.8 suggests this may be a Web PKI certificate, but this is not totally clear.\r\n\r\n2) It looks like the ACME authorizations/challenges functionality is not used in this proposal (Section 6.7 says it `MUST` be omitted from the `newOrder` response). Instead, my understanding is that issuance is authorized by having the `newOrder` request signed by a private key controlled by the Requestor & published in its Entity Configuration (Section 5), which may be discovered by the Issuer or included in a new `trust_chain` request field. Is this accurate?\r\n\r\n[nit: Section 5 says the `newOrder` request is signed by the Requestor's private key, while Section 6.2 suggests that the `newNonce` request requires validation. Perhaps both should be?]\r\n\r\n3) Given that requests are expected to be signed with the Requestor's private key, how does this play with standard ACME account management? Standard ACME account management maintains that each client will maintain its own keypair, and each request is authorized by a signature over the request with the account's private key.\r\n\r\n\r\nAnd a final meta-question, wrapping up the previous three questions: why can't this method of authorizing issuance be phrased as a new challenge type, using ACME's existing authorization/challenge/response APIs? For example, the challenge would include a nonce, and the response would involve providing a signature over the nonce with the Entity Key. This would fit more closely to ACME as defined in RFC 8555 as well as existing extensions.",
      "createdAt": "2024-08-23T23:43:26Z",
      "updatedAt": "2024-11-05T15:12:28Z",
      "closedAt": "2024-11-05T15:12:28Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Hi @branlwyd, thank you for your analysis and apologies for the late in reply\r\n\r\n1. in RFC7517, then in the JWK sets, we don't have any particular extension like the ones that might be possibile using X.509. OpenID Federation and its Entity Configurations carrying JWKs doesn't give this kind of detail. I assume for now that any X.509 extension would be exclusively in the scope of the ACME request therefore configured in the CSR. We can evaluate any further feature or requirement, therefore if of interest we can do any proposals for this point.\r\n\r\n2. yes it is accurate. Another issue is that in the current text we only mention/use Federation JWK and not metadata JWK. I believe that we need to include also metadata JWK, therefore the ACME request, including the jwk id (`kid`), must contain the pointer to the jwk inteded to be used for the evaluation. the trust chain is build, the federation jwks and any metadata specific jwks resolved, and then the public key material contained in the CSR must be matched with the specific jwk included in the acme request. If we need to clarify this point we can accurately define an issue with the instruction where and how to include this detail and therefore having another draft.\r\n\r\n2.1  good catch. I see that the check described in the following sentence cannot be evaluated by the issuer `The Requestor checks if its superior Federation Entity supports the ACME protocol for OpenID Connect Federation 1.0. If not, the Requestor starts the discovery process to find which are the Issuers within the federation.` . We can say that at that stage, i nthe nonce endpoint, the issuer doesn't have any way to know if the requestor is a federation participant, since from the http perspective the issuer has only the requestor's IP and not the requestor federation entity id. **This is an issue to be resolved in the current draft**.\r\n\r\n3. in multilateral federation the account is something that might be preestablished. an accout might rely on some bilateral contracts or relationship stipulated before the ACME request. It is in the scope of this draft enable the trust evaluation in the context of the multilateral federation allowing a more flexible x.509 certificate issuance according to the evidences evaluated though openid federation. In this draft the requestor's keys are not configured in a preconfigured account but in its trust chain dynamically evaluated during the ACME request. This must not alienate us, we might enable the account creation as well using openid federation; the current proposal aims to simplify by removing steps not necessarly of interest in the multilateral federations (or, at least for now, in my modest perception)\r\n\r\nfinal question/answer: the more we can reuse preexisting ACME approaches the more we can reduce implementation efforts. I support any change to the draft that aims to go in this direction of preserving legacy ACME implementation and using the less effort to include openid federation like a sort of wrapper, that might work around the ACME challenges and any other legacy artifact involved in the traditional flow.\r\n\r\ntherefore, if you want to propose a breaking change with your proposal please open a draft PR and consider all my support during the revision for releasing together the next draft\r\n\r\n\r\n ",
          "createdAt": "2024-08-27T21:40:54Z",
          "updatedAt": "2024-08-27T21:43:40Z"
        },
        {
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "body": "1. Sounds good; I think we eventually need to think through what kind of CSRs are acceptable, but this doesn't need to be spelled out in the spec (RFC 8555 & RFC 8823 spell out CSR requirements in general terms; RFC 9448 provides more detail but still looks non-comprehensive).\r\n\r\nFinal: Sounds good, I will open a PR in the next few days -- it will likely phrase the authorization logic as a new challenge type.",
          "createdAt": "2024-08-28T20:44:34Z",
          "updatedAt": "2024-08-28T20:44:34Z"
        },
        {
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "body": "I sent https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/3 as a WIP example of my suggestion to phrase the validation as a new ACME challenge type. Feedback very welcome; I will clean it up and turn it into a proper PR if the approach is acceptable.",
          "createdAt": "2024-08-30T23:36:15Z",
          "updatedAt": "2024-08-30T23:36:15Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Ok, I have added my first review with some suggestions",
          "createdAt": "2024-09-03T19:23:09Z",
          "updatedAt": "2024-09-03T19:23:09Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "During the meet of 5 nov 2024 we agreed to close this PR since there was consensus on the answers shared during the previosu week and prs",
          "createdAt": "2024-11-05T15:12:28Z",
          "updatedAt": "2024-11-05T15:12:28Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOJ6_NW86bTiYm",
      "title": "Actually an ACME provider can be a leaf and not necessarly a Trust Anchor or an Intermediate entity.",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/7",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "              Actually an ACME provider can be a leaf and not necessarly a Trust Anchor or an Intermediate entity.\r\n\r\n_Originally posted by @peppelinux in https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/4#discussion_r1810813324_\r\n            ",
      "createdAt": "2024-10-22T14:13:48Z",
      "updatedAt": "2024-10-22T14:25:27Z",
      "closedAt": "2024-10-22T14:25:27Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "my fault, we clearly defined that trust anchors and intermediates can publish subordinate statements and therefore these are acme server according to the scopes of this specificaiton",
          "createdAt": "2024-10-22T14:25:27Z",
          "updatedAt": "2024-10-22T14:25:27Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOJ6_NW86c0jzo",
      "title": "ACME terms",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/8",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [
        "peppelinux"
      ],
      "labels": [],
      "body": "              we must say in the terminolog ysection that \"ACME Challenge is defined in RFC....\" and therefore use it the defined term ACME Challenge as well as the other terms\r\n\r\n_Originally posted by @peppelinux in https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/4#discussion_r1810825532_\r\n            ",
      "createdAt": "2024-11-03T07:11:23Z",
      "updatedAt": "2024-11-22T08:25:40Z",
      "closedAt": "2024-11-22T08:25:40Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "No other relevant/pending actions after got https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/12/files merged",
          "createdAt": "2024-11-22T08:25:40Z",
          "updatedAt": "2024-11-22T08:25:40Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOJ6_NW86dGhqc",
      "title": "Sequence Diagram",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/10",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [
        "inahga"
      ],
      "labels": [],
      "body": "We need a sequence diagram describing the entire flow\r\n\r\nwe can start in this issue using mermaid or plantuml\r\n\r\nhere an example as template \r\n\r\nwe need three entities\r\n\r\n1. RP (requesting X.509 Certificates)\r\n2. Superior Entity also ACME Provider\r\n3. Trust Anchor supporting trust evaluation \r\n\r\n```mermaid\r\nsequenceDiagram\r\n    participant WalletInstance as Wallet Instance\r\n    participant CV as Credential Verifier\r\n    participant IE as Intermediate\r\n    participant TA as Trust Anchor\r\n\r\n    WalletInstance->>CV: Fetch CV's Entity Configuration\r\n    CV->>WalletInstance: Return Entity Configuration\r\n\r\n    WalletInstance->>CV: Extract Authority Hints from CV's Configuration\r\n    CV->>WalletInstance: Provide Authority Hints\r\n\r\n    loop for each Authority Hint\r\n        WalletInstance->>IE: Fetch Entity Configuration -> get federation_fetch_api URL\r\n        IE->>WalletInstance: Fetch Subordinate Statement\r\n        WalletInstance->>WalletInstance: Validate the previous statement<br/>using the Federation Entity Keys<br/>provided in the Subordinate Statement\r\n    end\r\n\r\n    WalletInstance->>WalletInstance: Validate Trust Chain\r\n\r\n    alt If Trust Chain is valid and unexpired\r\n        WalletInstance->>WalletInstance: Proceed with Federation Process\r\n    else\r\n        WalletInstance->>WalletInstance: Abort Process with Error\r\n    end\r\n\r\n    WalletInstance->>WalletInstance: Applies Policies\r\n    WalletInstance->>WalletInstance: Derive CV's final metadata\r\n\r\n````",
      "createdAt": "2024-11-05T15:09:47Z",
      "updatedAt": "2025-01-07T10:34:24Z",
      "closedAt": "2025-01-07T10:34:24Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "see: https://github.com/peppelinux/draft-demarco-acme-openid-federation/blob/main/draft-demarco-acme-openid-federation.md?plain=1#L230",
          "createdAt": "2024-11-19T15:21:00Z",
          "updatedAt": "2024-11-19T15:21:00Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOJ6_NW86fS8YW",
      "title": "Definition of Errors",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/13",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/blob/e75f931bfd51f13af8e0201e18a6a37b960ed141/draft-demarco-acme-openid-federation.md?plain=1#L240\r\n\r\nwe should use the same errors already defined in the ACME standard(s) and define in this draft that additional errors about the failure trust evaluation that might happen, must reuse the errors already defined in the openid federation draft\r\n\r\nexamples are welcome to give implementation guides",
      "createdAt": "2024-11-19T15:20:05Z",
      "updatedAt": "2025-01-21T15:21:31Z",
      "closedAt": "2025-01-21T15:21:30Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "A new section about the error handling should be used",
          "createdAt": "2024-11-19T15:21:27Z",
          "updatedAt": "2024-11-19T15:21:27Z"
        },
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "We don't want to define new any new errors. Errors related to ACME and OIDF flows are defined in their respective documents, so we should make references to those documents when the relevant errors come up.",
          "createdAt": "2024-12-17T15:40:23Z",
          "updatedAt": "2024-12-17T15:40:23Z"
        },
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "We may define an ACME error URI that is a catch-all \"some OIDF error occurred, here's the detail\". If using our own URIs (e.g. `urn:ietf:params:acme-oidf:error:OIDFError`) we would need to register this namespace.",
          "createdAt": "2024-12-17T15:44:21Z",
          "updatedAt": "2024-12-17T15:44:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Resolved by https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/34",
          "createdAt": "2025-01-21T15:21:30Z",
          "updatedAt": "2025-01-21T15:21:30Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOJ6_NW86fS_4e",
      "title": "Subject Alternative Name value corresponding to an `otherName` with an ID of **TBD**",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/14",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [
        "branlwyd"
      ],
      "labels": [],
      "body": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/blob/e75f931bfd51f13af8e0201e18a6a37b960ed141/draft-demarco-acme-openid-federation.md?plain=1#L469\r\n\r\nWe need to create a new ID",
      "createdAt": "2024-11-19T15:25:48Z",
      "updatedAt": "2024-11-22T07:53:37Z",
      "closedAt": "2024-11-22T07:53:37Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Resolved by https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/16",
          "createdAt": "2024-11-22T07:53:31Z",
          "updatedAt": "2024-11-22T07:53:31Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOJ6_NW86fTGRi",
      "title": "entity_id must be required, trust chain optional in the request",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/15",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [
        "inahga"
      ],
      "labels": [
        "breaking change"
      ],
      "body": "In the current draft we mandate the use of static trust chains\r\n\r\nwe want to configure as mandatory the entity_id instead, and having the trust chain as optional or recommended",
      "createdAt": "2024-11-19T15:35:32Z",
      "updatedAt": "2025-01-07T10:28:30Z",
      "closedAt": "2025-01-07T10:28:29Z",
      "comments": [
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "n.b. In current draft we say that we can take either the entity_id or the trust chain.",
          "createdAt": "2024-12-17T15:33:53Z",
          "updatedAt": "2024-12-17T15:33:53Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOJ6_NW86fy2fp",
      "title": "Why does the expiration time of issued certificates need to equal the expiration of the trust chain?",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/18",
      "state": "CLOSED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "Section 8 states:\r\n\r\n```\r\nThe issued X.509 Certificates are related to the Federation Key attested within a\r\nTrust Chain, their expiration time MUST be equal to the expiration of the Trust\r\nChain.\r\n```\r\n\r\nWhy is the case? If the requestor wants a short-lived certificate, this might be needlessly restrictive.\r\n\r\nA less-than-or-equal relation ship might make more sense here.\r\n\r\nThanks to @jcjones for pointing this out. We should also note _why_ we have chosen this expiration time, and also make the same note in the CSR and newOrder sections.",
      "createdAt": "2024-11-21T20:47:49Z",
      "updatedAt": "2024-11-29T09:47:33Z",
      "closedAt": "2024-11-29T09:47:33Z",
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOJ6_NW86fzm2U",
      "title": "Why do we enforce federation membership checking on each newNonce request?",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/19",
      "state": "CLOSED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-6.2\r\n\r\nOne problem with this is HEAD is not a good verb for this request, since it's quite involved. Semantically, HEAD should be quick and easy for the server to respond to. POST-as-GET may fit better, and is allowable for us to service newNonce in that way.\r\n\r\nBut, it seems unusual to authenticate newNonce in this way.\r\n\r\nIs the intent to prevent non-federation entities from accessing the ACME server? If so, we may be better off with some kind of federation -> ACME account binding. Perhaps with externalAccountBinding.\r\n\r\nThanks to @jcjones for pointing this out.",
      "createdAt": "2024-11-21T22:01:44Z",
      "updatedAt": "2024-11-29T09:46:39Z",
      "closedAt": "2024-11-29T09:46:39Z",
      "comments": [
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that externalAccountBinding only comes into play at the time of the newAccount request. The ACME client must have acquired a nonce prior to sending this request. I think that the document should not attempt to add authentication to newNonce requests, in order to better fit into the existing ACME protocol. Checking federation membership can be deferred to challenge response time.\r\n\r\neAB might not be a good fit here, because that would require distributing MAC keys to ACME clients up front. That could be made to work by defining another API, but I don't think it would improve the protocol. Either we check federation membership only when handing out eAB MAC keys, and we effectively lose federation trust revocation, or we check federation membership both when handing out eAB MAC keys and during challenge verification, which duplicates effort, or we check federation membership only during challenge verification.",
          "createdAt": "2024-11-21T22:16:33Z",
          "updatedAt": "2024-11-21T22:16:33Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "It's enough at Let's Encrypt's scale to have load-balancer rate limits on newNonce of like, 2 rps per IP address, and that keeps abuse down.",
          "createdAt": "2024-11-21T22:46:48Z",
          "updatedAt": "2024-11-21T22:46:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "I have used the HTTP HEAD because of this:\r\nhttps://datatracker.ietf.org/doc/html/rfc8555#page-16",
          "createdAt": "2024-11-22T08:32:06Z",
          "updatedAt": "2024-11-22T08:32:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "This PR aims to resolve this issue:\r\n\r\nhttps://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/22\r\n\r\n",
          "createdAt": "2024-11-22T08:39:54Z",
          "updatedAt": "2024-11-22T08:39:54Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOJ6_NW86f4MG-",
      "title": "Create a section describing how to inspect all the jwks within the Entity Configuration",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/21",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The Certificate Issuer needs to inspect the Requestor's Entity Configuration once the Trust Chain is verified, as it requires finding the matching JSON Web Key (JWK).\r\n\r\nThe JWK can be one of the federation entity keys or one of the JWKs contained within each metadata.\r\n\r\nThe JWKs can be provided by reference (using signed_jwks_uri) or by value (using jwks).\r\n\r\nIt would be beneficial to use a meta-language or a detailed description of the steps and mechanisms the Certificate Issuer might use to inspect the Entity Configuration for the matching JWK.",
      "createdAt": "2024-11-22T08:21:38Z",
      "updatedAt": "2024-12-20T00:02:22Z",
      "closedAt": "2024-12-20T00:02:22Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Also related to https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/10",
          "createdAt": "2024-11-22T08:22:15Z",
          "updatedAt": "2024-11-22T08:22:15Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOJ6_NW86h4gXv",
      "title": "We should disallow issuing certificates for arbitrary keys",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/24",
      "state": "CLOSED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "At minimum, we should avoid looking at the top level `jwks` field of the entity configuration for the requestor's key. OIDF states:\r\n\r\n> These Federation Entity Keys SHOULD NOT be used in other protocols. (Keys to be used in other protocols, such as OpenID Connect, are conveyed in the metadata elements for the protocol's Entity Type Identifiers, such as the metadata under the openid_provider and openid_relying_party Entity Type Identifiers.)\r\n\r\nI'm inclined to agree, since reusing cryptographic keys for different purposes is generally a bad idea. The issuer not reading the `jwks` field avoids the requestor misusing the entity key for another purpose.\r\n\r\nSimilarly, we should also probably not allow issuance for arbitrary keys in the entity metadata either. It would be better if we either defined a new Entity Type Identifier and metadata structure for the purpose of X.509 issuance, and/or allow the CA to define its metadata structures.",
      "createdAt": "2024-12-03T20:45:43Z",
      "updatedAt": "2024-12-20T00:02:22Z",
      "closedAt": "2024-12-20T00:02:22Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "I fully agree to restrict x5c issuance to metadata jwks only and not federation entity keys.\r\n\r\nFor the second point we need further conversation during the editor's call",
          "createdAt": "2024-12-03T22:22:17Z",
          "updatedAt": "2024-12-03T22:22:17Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOJ6_NW86iBu_k",
      "title": "Should we allow OIDF Leafs to be Issuers?",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/25",
      "state": "CLOSED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "We would prefer that Trust Anchors and Intermediates be the only ones to implement the ACME server.\r\n\r\nBut are there are valid use cases for a Leaf to implement the server as well?",
      "createdAt": "2024-12-04T17:19:07Z",
      "updatedAt": "2025-01-21T15:28:32Z",
      "closedAt": "2025-01-21T15:28:31Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "the way we see a leaf is relative to the context where we place the entity\r\n\r\nusing openid federation and entity can be, at the same time, a leaf in federation A, a trust anchor in its own federation, an intermediate in federation B\r\n\r\ntechnically nothing prevents a federation leaf to offer x.509 certificates through acme",
          "createdAt": "2025-01-07T14:33:37Z",
          "updatedAt": "2025-01-07T14:33:37Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Actually, we have already enabled leaves playing the acme server role, here: https://github.com/peppelinux/draft-demarco-acme-openid-federation/blob/main/draft-demarco-acme-openid-federation.md?plain=1#L237",
          "createdAt": "2025-01-07T15:06:44Z",
          "updatedAt": "2025-01-07T15:06:44Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "See #48 as well.",
          "createdAt": "2025-01-21T15:23:09Z",
          "updatedAt": "2025-01-21T15:23:09Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "See also: https://github.com/peppelinux/draft-demarco-acme-openid-federation/blob/main/draft-demarco-acme-openid-federation.md?plain=1#L244C4-L244C40",
          "createdAt": "2025-01-21T15:23:51Z",
          "updatedAt": "2025-01-21T15:23:51Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "We have enough clarifications in the current draft specifying that the acme provider can be the TA, the INTs if any or any leafs, in aprticular if enabled by their trust framework with specialized trust marks to facilitate their discovery",
          "createdAt": "2025-01-21T15:28:15Z",
          "updatedAt": "2025-01-21T15:28:15Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "this thread will continue here: https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/48",
          "createdAt": "2025-01-21T15:28:31Z",
          "updatedAt": "2025-01-21T15:28:31Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOJ6_NW86lTEB4",
      "title": "Allow separate keypairs for challenge and X.509 certificates",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/32",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "enhancement",
        "security"
      ],
      "body": "Currently, we require that the same public key be used in the `acme_requestor` field of the Entity Configuration, the CSR, and the final X.509 certificate. This requirement seems unnecessarily restrictive to me, and it cuts against some cryptographic best practices. I suggest we remove the requirement that the public key in the CSR match the `acme_requestor` metadata. This will both allow users to use different private keys for different purposes, eliminating any concerns of cross-protocol attacks, and make it trivial to rotate keys when requesting a new X.509 certificate. The main thing we'd lose is that any Superior Entity above the Requestor would no longer get any say on the algorithm of public keys in X.509 certificates, or the public keys themselves, but I don't see why that would be useful in practice.\r\n\r\nGenerally, defending against cross-protocol attacks requires that it be infeasibly difficult to get a message that is signed in one protocol to be reinterpreted as a valid message in another protocol. This can be solved with domain separation, but simply using different private keys for different protocols is a foolproof defense. I think the domain separation argument that JWT-X.509 private key reuse would probably lean on the JWT claims set message starting with either `{` or whitespace, and the X.509 message starting with 0x30 0x82 (or 0x30 0x81, or 0x30 0x83) to denote a SEQUENCE, assuming it's a tbsCertificate/tbsCertList/tbsResponseData/etc. We'd also have to consider key reuse between JWT and TLS.\r\n\r\nIt is currently the norm for many ACME clients to generate a new keypair whenever they renew certificates. This is good for security because it limits the impact of point-in-time private key compromises to just the one certificate's remaining validity period. If we require that the X.509 certificate's public key match the OpenID Federation metadata, then ACME clients that support this challenge type would need a separate mode where they only use a provided private key to sign CSRs, rather than generating fresh keys as needed. Furthermore, users deploying this system would need to develop their own way to rotate keys, starting with changing their Entity Configuration.\r\n\r\nRemoving this requirement that JWT and X.509 public keys match would also make implementation easier, because we wouldn't have to develop mappings between JWT signature algorithms and X.509 signature algorithms, etc.\r\n\r\nEdit: note to self: we'll have to revise the last paragraph of the abstract, and remove mention of the key in the Entity Configuration.",
      "createdAt": "2025-01-07T16:18:19Z",
      "updatedAt": "2025-03-11T14:08:24Z",
      "closedAt": "2025-03-11T14:08:24Z",
      "comments": [
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "Great catch. In fact, we should probably make a note to include comments in the Security Considerations section that it's worth encouraging using different keys for different purposes, and that rotating the keys periodically is also good practice.",
          "createdAt": "2025-01-09T18:15:54Z",
          "updatedAt": "2025-01-09T18:15:54Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "As a point of comparison, the onion-csr-01 challenge from draft-ietf-acme-onion has a lot in common with our openid-federation-01 challenge. There, the client signs a CSR containing a nonce from the challenge using a keypair that has its public key distributed via the Tor rendezvous v3 protocol. They have a requirement that the key used in the challenge's CSR \"MUST NOT be the same public key presented in the CSR to finalize the order\".",
          "createdAt": "2025-01-14T17:10:46Z",
          "updatedAt": "2025-01-14T17:10:46Z"
        },
        {
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Another virtue of doing this is that it makes it possible to use a single authorization for multiple orders, which is something ACME is designed to do (see the last few paragraphs of [RFC 8555 7.1.3](https://datatracker.ietf.org/doc/html/rfc8555#section-7.1.3)). Doing this is particularly useful in the case of acme-openid because the requestor's `acme_metadata` might contain multiple keys, and the requestor might want certs for each of them. As of right now, the requestor has to bind the ACME order to the key that is being certified by signing the issuer's challenge with it.",
          "createdAt": "2025-02-04T01:10:01Z",
          "updatedAt": "2025-02-04T01:10:01Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOJ6_NW86mMNuy",
      "title": "Use UTF8String in OpenIdFederationEntityId",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/37",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the definition of `OpenIdFederationEntityId` is that it's an OctetString, and the narrative text accompanying it says that the octet string value must be the UTF-8 encoding of the entity ID. I think it would be more natural to use the UTF8String type defined RFC 5280. This type is also an octet string, though with a universal tag preceding it, and it also requires its contents to be UTF-8 encoded.",
      "createdAt": "2025-01-14T20:27:34Z",
      "updatedAt": "2025-01-28T15:08:19Z",
      "closedAt": "2025-01-28T15:08:19Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "The OpenIdFederationEntityId shoud use the value defined in openid federation, as its name refers to it.\n\nas it seems to me those two things are not in conflict, therefore ok to provide a more natural indication using UTF8String",
          "createdAt": "2025-01-28T13:11:12Z",
          "updatedAt": "2025-01-28T13:11:12Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm working on a brief PR for this. It looks like `UTF8String` is used in RFC 5280, but originally defined in the ASN.1 specification, starting in 1993. (see https://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf for the 2002 edition) This makes sense, since it uses a universal-class tag.",
          "createdAt": "2025-01-28T14:37:08Z",
          "updatedAt": "2025-01-28T14:37:08Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "I_kwDOJ6_NW86mfQVc",
      "title": "Remove restrictions on number of identifiers",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/38",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the document requires that orders contain one identifier. We could remove remove this requirement, in order to avoid making unnecessary changes to the ACME protocol beyond its well-defined extension points. While it is unlikely that applications will want to issue an X.509 certificate with two entity identifiers, I don't think this document needs to go out of the way to bar this possibility.\n\nNote that the federation entity to be used when responding to a challenge is still well defined, even if an order includes more than one OpenID Federation identifier. Challenges are looked up from authorization objects and authorization objects include the identifier that all their challenges are related to. Furthermore, because of this, it isn't necessary for challenge responses to include an `entity_identifier`.\n\nAllowing the identifiers array to have a length greater than 1 also opens up the door to more sophisticated certificate profiles that combine different kinds of identifiers. For example, an order could combine an OpenID Federation entity and a DNS name, or an OpenID Federation entity and an email address.",
      "createdAt": "2025-01-16T16:22:00Z",
      "updatedAt": "2025-03-07T16:18:22Z",
      "closedAt": "2025-03-07T16:18:21Z",
      "comments": [
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "If/when doing this, we would also want to eliminate the prohibition on additional Subject Alternative Names in the `CSR and Certificate Requirements` section: https://github.com/peppelinux/draft-demarco-acme-openid-federation/blob/d8d1268e2b46e048326413777f914b34434d8973/draft-demarco-acme-openid-federation.md?plain=1#L674-L677",
          "createdAt": "2025-02-24T22:21:25Z",
          "updatedAt": "2025-02-24T22:21:25Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #71.",
          "createdAt": "2025-03-07T16:18:21Z",
          "updatedAt": "2025-03-07T16:18:21Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "I_kwDOJ6_NW86mfQeP",
      "title": "Remove restrictions on number of identifiers",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/39",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-16T16:22:17Z",
      "updatedAt": "2025-01-16T16:22:33Z",
      "closedAt": "2025-01-16T16:22:33Z",
      "comments": []
    },
    {
      "number": 41,
      "id": "I_kwDOJ6_NW86mo4A2",
      "title": "Sequence diagram is too wide for text version",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/41",
      "state": "OPEN",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "next-milestone"
      ],
      "body": "The ASCII art version of the sequence diagram is about twice as wide as is allowed. Thus, the text rendering process emits many warnings, and our document goes way past the column limit. We'll need to get creative and reformat this somehow.",
      "createdAt": "2025-01-17T15:25:00Z",
      "updatedAt": "2025-01-28T15:30:50Z",
      "closedAt": null,
      "comments": [
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "I tried to do some shenanigans in #49 to get a generated UML sequence diagram to fit into 72 columns but I don't think ti's doable with the tools we have at hand, short of building a new thing.\n\nProbably we should take a page from ACME and make simplified diagrams instead.",
          "createdAt": "2025-01-17T23:25:06Z",
          "updatedAt": "2025-01-17T23:25:06Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOJ6_NW86mo-oQ",
      "title": "Consider binding challenge response to ACME account key",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/42",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "security"
      ],
      "body": "Currently, the signature in challenge responses binds the token and the keypair used to sign the token. As a defense in depth measure, we could sign the \"key authorization\", as defined in RFC 8555, instead of just the token. This would bind the ACME account key as well. The main attack this would protect against is a malicious ACME server standing between a client and a target ACME server, replaying a token from the target ACME server's challenges to the client, and getting a valid challenge response it can use to issue certificates under its own control. This may not be a big deal, since we expect the ACME server to be configured manually or discovered from the federation, and thus at least somewhat trusted, but it would be an easy protocol change. Unlike in http-01, dns-01, or tls-alpn-01, the signature we care about is only sent via HTTPS to the ACME server, and is not exposed to third parties.",
      "createdAt": "2025-01-17T15:38:12Z",
      "updatedAt": "2025-02-04T17:38:58Z",
      "closedAt": "2025-02-04T17:38:57Z",
      "comments": [
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on discussion during today's sync meeting, I think we're in agreement on making this change, in order to protect clients that auto-discover ACME providers.",
          "createdAt": "2025-01-28T22:29:17Z",
          "updatedAt": "2025-01-28T22:29:17Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOJ6_NW86mo_B7",
      "title": "Security considerations",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/43",
      "state": "OPEN",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to write a security considerations section.",
      "createdAt": "2025-01-17T15:39:05Z",
      "updatedAt": "2025-01-28T15:30:25Z",
      "closedAt": null,
      "comments": [
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "The Security Considerations section from the tls-alpn-01 RFC would be a good source of inspiration: https://www.rfc-editor.org/rfc/rfc8737.html#name-security-considerations\n\nAs discussed during the meeting today, we'll likely need to refer to ACME's security considerations, refer to OpenID Federation's security considerations section, and write more regarding novel components or compositions introduced by this document.\n\nWe'll need to make explicit what implementations and deployments need to do in order to maintain the security of this challenge and the overall issuance process. For example, the ACME server needs to be configured to only trust a particular OpenID Federation trust anchor, one that is administered with a policy that is appropriate for X.509 certificate issuance with whatever certificate profile the ACME server uses. Similarly, the ACME client will need to be configured with a particular trust anchor for its discovery process. We'll need to at least mention how private keys must be protected and used.",
          "createdAt": "2025-01-21T19:10:33Z",
          "updatedAt": "2025-01-21T19:10:33Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Please consider also the attack scenario (hijack) illustrated by @divergentdave here: https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/42",
          "createdAt": "2025-01-28T15:24:42Z",
          "updatedAt": "2025-01-28T15:24:42Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "Also this note about separation of concerns for keys: https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/32#issuecomment-2580968443",
          "createdAt": "2025-01-28T15:28:47Z",
          "updatedAt": "2025-01-28T15:30:25Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOJ6_NW86mp77_",
      "title": "Contradictory license information",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/45",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix",
        "pending-close"
      ],
      "body": "The file at `.github/workflows/LICENSE.md` says this is in the public domain, while `LICENSE.md` refers to `CONTRIBUTING.md`, which in turn refers to IETF policies. ",
      "createdAt": "2025-01-17T17:55:15Z",
      "updatedAt": "2025-01-28T15:07:28Z",
      "closedAt": "2025-01-28T15:07:28Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "That LICENSE is about the CI as inherited by the IETF github project template (https://github.com/martinthomson/internet-draft-template) and not about the draft\n\nI agree that it seems mislewading, but it comes from internet-draft-template, the entire repository is created using that as template",
          "createdAt": "2025-01-28T13:07:24Z",
          "updatedAt": "2025-01-28T13:07:24Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, that makes sense.",
          "createdAt": "2025-01-28T14:30:23Z",
          "updatedAt": "2025-01-28T14:30:23Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOJ6_NW86mq-Gs",
      "title": "ACME Challenges are asynchronous",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/46",
      "state": "CLOSED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "6.2's flow includes a return \"Respond to POST with validation success\", which implies the result to the challenge POST is success/fail and synchronous, while [RFC 8555 sec 7.5.1](https://datatracker.ietf.org/doc/html/rfc8555#section-7.5.1) expressly says that the response to the POST is a 200 OK, and then clients poll.",
      "createdAt": "2025-01-17T20:56:52Z",
      "updatedAt": "2025-01-21T15:10:36Z",
      "closedAt": "2025-01-21T15:10:36Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "I_kwDOJ6_NW86mq_Rf",
      "title": "Clarify all mentions of \"leaf\", \"intermediate\", \"trust root\"",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/47",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "jcjones"
      ],
      "labels": [],
      "body": "We should clarify all uses of terms like \"leaf\" and \"intermediate\" that have meanings both in the context of X.509 PKIs and OpenID Federation.",
      "createdAt": "2025-01-17T20:59:02Z",
      "updatedAt": "2025-03-06T16:57:38Z",
      "closedAt": "2025-03-06T16:57:37Z",
      "comments": [
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "I hit one in b8bf2886f5a99097600fca857486c81136b3b5cf but haven't prepared a PR yet. Agreed we should hit them all though.",
          "createdAt": "2025-01-17T23:16:00Z",
          "updatedAt": "2025-01-17T23:16:00Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOJ6_NW86mrKO2",
      "title": "Discovery: separate discussion of leaf entities and trust marks",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/48",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "divergentdave"
      ],
      "labels": [],
      "body": "The sixth bullet point in the discovery section imposes some additional requirements on entities with `acme_provider` entity type if they are a leaf entity. It discusses both trust marks and out-of-band configuration. I think we should decouple these concepts, because the fact that a federation entity is or isn't a leaf doesn't mean much, and the other concepts may be useful more broadly, even if the entity isn't a leaf.\n\nA federation entity is a leaf if and only if it doesn't have any subordinates. So, a leaf entity could turn itself into an intermediate entity just by adding `federation_fetch_endpoint` and `federation_list_endpoint` fields under its `federation_entity` entity type, and signing at least one subordinate statement. (assuming a superior entity hasn't blocked this with constraints) I don't think we want clients to try to determine whether an entity is an intermediate or leaf, as that doesn't buy us much security-wise, and it seems to go against the intent of how OpenID Federation typically works. In fact, the spec says that \"Leaf Entities typically play a protocol role\", which suggests that it might be more conventional to put the `acme_provider` entity type in leaf entities than otherwise.\n\nThe rest of this bullet point may still be useful to deployments. I suggest we hoist these further up in the discovery section and lay out the three options: a) the ACME client is pre-configured with the ACME provider entity to use b) the ACME client discovers ACME providers by listing federation entities c) the ACME client discovers ACME providers by listing federation entities, and it additionally filters for entities that have a trust mark with a particular trust mark identifier. Depending on the deployment, and the policies governing both federation membership and trust mark issuance, this should give users the tools they need.",
      "createdAt": "2025-01-17T21:26:02Z",
      "updatedAt": "2025-02-04T18:36:26Z",
      "closedAt": "2025-02-04T18:36:25Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "TODO: refrase the text aboput the discovery according to the eleemnts shared by @divergentdave in this issue",
          "createdAt": "2025-01-28T15:15:50Z",
          "updatedAt": "2025-01-28T15:15:50Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOJ6_NW86oTm58",
      "title": "Avoid constraining certificate profiles",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/54",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "divergentdave"
      ],
      "labels": [],
      "body": "We should change the requirements on CSRs and certificates regarding the subject's common name and subject alternative name to optional suggestions. This draft should limit itself to defining the new ACME identifier and challenge types, and leave certificate profiles up to individual CAs, depending on the requirements of the PKI they are a part of. For example, a CA in some federation may have a good distinguished name for every federation entity. Then, it could put those names in the subject of certificates it issues, and wouldn't need to use subject alternative names at all. It would still be valuable to define `id-on-OpenIdFederationEntityId` and `OpenIdFederationEntityId` in this document, to provide an easy default for profiles.\n\nThanks to @aarongable for the suggestion.",
      "createdAt": "2025-01-31T14:51:37Z",
      "updatedAt": "2025-03-06T17:09:34Z",
      "closedAt": "2025-03-06T17:09:33Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "During the call of 18 feb 2025, we have decide to go in this direction enabling this binding between the issued X.509 certificates and the identity of the subject deployed using openid federation, as **optional**.\n\nwe want to use a normative verb like \"MAY\" providing implementations considerations, not necessarly in a separate section, about the value of this.",
          "createdAt": "2025-02-18T15:26:02Z",
          "updatedAt": "2025-02-18T15:26:02Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOJ6_NW86onRKI",
      "title": "Explicitly restrict permitted challenge types for OpenID Federation ACME identifiers",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/59",
      "state": "CLOSED",
      "author": "tgeoghegan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "jcjones"
      ],
      "labels": [],
      "body": "The draft defines a new ACME identifier type `openid-federation`, and a new ACME challenge type `openid-federation-01`, but we don't make it clear that they can only be used together. We should follow the precedent of [RFC 8738 section 4](https://datatracker.ietf.org/doc/html/rfc8738#section-4) and make this explicit. Additionally, the IANA considerations section should add entries similarly to [RFC 8738 section 8.2](https://datatracker.ietf.org/doc/html/rfc8738#section-8.2)",
      "createdAt": "2025-02-04T00:47:27Z",
      "updatedAt": "2025-03-06T16:57:01Z",
      "closedAt": "2025-03-06T16:57:00Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "openid-federation represents the newOrder type identifier, while openid-federation-01 represents the first step after the newOrder, related to the challenge\n\nas discussed during the call of 18 feb 2025, we have decided that we must include noamtive language restricting the use of openid-federation0* challenge type identifier when the newOrder type identifier is openid-federation.\n\n ",
          "createdAt": "2025-02-18T15:16:23Z",
          "updatedAt": "2025-02-18T15:16:35Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOJ6_NW86pDFKO",
      "title": "Issuer metadata should contain URI for ACME directory instead of reproducing it",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/60",
      "state": "CLOSED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "jcjones"
      ],
      "labels": [],
      "body": "Currently, we require the ACME issuer to reproduce the entire ACME directory in its entity configuration:\n\n```\n{\n  \"iss\": \"https://issuer.example.com\",\n  \"sub\": \"https://issuer.example.com\",\n  \"iat\": 1516239022,\n  \"exp\": 1516298022,\n  \"jwks\": {\n    \"keys\": [\n      {\n        \"kty\": \"RSA\",\n        \"alg\": \"RS256\",\n        \"use\": \"sig\",\n        \"kid\": \"NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs\",\n        \"n\": \"pnXBOusEANuug6ewezb9J_...\",\n        \"e\": \"AQAB\"\n      }\n    ]\n  },\n  \"metadata\": {\n    \"acme_provider\": {\n      \"newNonce\": \"https://issuer.example.com/acme/new-nonce\",\n      \"newOrder\": \"https://issuer.example.com/acme/new-order\",\n      \"revokeCert\": \"https://issuer.example.com/acme/revoke-cert\",\n      \"meta\": {\n        \"termsOfService\": \"https://issuer.example.com/acme/terms/2017-5-30\",\n        \"website\": \"https://www.issuer.example.com/\",\n        \"externalAccountRequired\": false\n      }\n    }\n  }\n}\n```\n\nThis seems natural since ACME already defines the directory as a JSON dictionary, but it introduces the risk of disagreement between the directory advertised in the EC and the directory the issuer may advertise over HTTPS. Additionally, it means that every change to the ACME directory requires updating the EC. Some ACME implementations like Boulder [add random entries to their directory](https://community.letsencrypt.org/t/adding-random-entries-to-the-directory/33417) as a form of [protocol GREASE](https://chromestatus.com/feature/6475903378915328), so dynamically generating the directory on each request is not unreasonable.\n\nInstead, we could have `acme_provider` simply contain the URI for the issuer's directory, and then the client would discover the other API endpoints as ACME clients already do.\n\n@divergentdave points out that removing information from OpenID Federation ECs limits the ability of superior entities to [constrain a subordinate's metadata](https://openid.net/specs/openid-federation-1_0-41.html#chain_constraints), but it's not clear how that would work even if the entire directory is present.",
      "createdAt": "2025-02-06T17:24:39Z",
      "updatedAt": "2025-06-03T14:17:19Z",
      "closedAt": "2025-06-03T14:17:19Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "In IETF (and also in openid4vci according to IETF) we got this implementative experience about signing the same playload already provided in plaintext and therefore duplicated.\n\nhttps://www.rfc-editor.org/rfc/rfc8414#section-2.1\n\nI agree with @divergentdave and therefore with @tgeoghegan about the apparent non sense of duplicating parameters that would end to not be considered by standards acme implementations.\n\nI want to add that the value of ahving it in the trust chain also represents a feature of non repudiabnility for historical transactions having historical trust chains.",
          "createdAt": "2025-02-18T15:37:45Z",
          "updatedAt": "2025-02-18T15:37:45Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "I'll observe that if we want trust chains to secure the metadata, the metadata has to be in the Entity Configuration.  This also enables non-repudiation of the signatures using the historical keys feature.",
          "createdAt": "2025-02-19T15:37:25Z",
          "updatedAt": "2025-02-19T15:37:25Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "But why would we need to have trusted signatures over the ACME metadata itself, rather than a pointer to the metadata? I understand the default is to keep everything in the federation, but this feels like a good situation to choose other than the defaults:\nAs @tgeoghegan observed, this would make for a significant divergence from the way existing ACME clients behave, requiring more than an OpenID Federation-aware challenge solver to complete their work, which is going to limit adoption of this specification. \n\nWe should have a solid reason as to why the ACME metadata needs to be signed by (keys trusted by) the federation, rather than delivered over TLS as all other ACME services' metadata do.",
          "createdAt": "2025-02-19T19:04:36Z",
          "updatedAt": "2025-02-19T19:04:36Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "@selfissued - We\u2019ve been looking at threat cases that would be affected by the decision: Should the ACME Directory metadata be wholly located inside the Entity Configuration, or should only a URL to the authoritative metadata at the ACME server itself be in the Entity Configuration.\n\nSince it looks like keeping the history of the ACME Metadata is the biggest advantage to having it included in the Entity Configuration, we made sure to think through the advantages of the non-repudiation in particular:\n\n- Malicious ACME server repudiates past value of newNonce/newAccount/newOrder/newAuthz/revokeCert/keyChange URL.\n    - No impact, because these URLs are implementation details of the ACME server. The behavior of the web server at these URLs could also change at any time, so non-repudiation of these URLs has no security benefit.\n- Malicious ACME server repudiates past value of termsOfService/website/caaIdentities metadata fields.\n    - No impact, because these fields are not used during the typical certificate issuance flow. They are primarily informative, and directed to the operators of ACME clients. Furthermore, these are URLs and domain names, and the contents of the linked web pages are more important to operators than the URLs themselves.\n- Malicious ACME server repudiates past value of externalAccountRequired metadata field.\n    - No impact. This is a boolean field that expresses one facet of the ACME server\u2019s policy. We currently don\u2019t expect ACME servers using the OIDF identity and challenge to require an external account binding. ACME clients may use this field to check if they have the external account configuration they need before attempting to create an account. Historical values are irrelevant, so non-repudiation of this field does not provide any security value.\n- Attacker modifies the ACME Metadata to direct the ACME client to a malicious ACME server.\n    - This is mitigated for the URL plan by reliance on TLS, and in the embedding case by digitally signing the Entity Configuration.\n    - This is unaffected by the decision of including the ACME directory or ACME directory URL in the entity configuration.\n- Malicious ACME server gives different results to different clients.\n    - Equally unmitigated, because the server could still do the same thing by doing HTTP redirects from the published configuration to malicious endpoints, or even more simply, vary its behavior at the published endpoints.\n    - The mitigation here is policy: the ACME Server is supposed to be trustworthy, and run in a trustworthy manner.\n",
          "createdAt": "2025-02-27T17:54:30Z",
          "updatedAt": "2025-02-27T17:54:30Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOJ6_NW86pDH2I",
      "title": "Allow `acme_requestor` to restrict which CAs may issue for the OIDF entity (CAA equivalent)",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/61",
      "state": "OPEN",
      "author": "tgeoghegan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In #55, we removed mention of CAA, arguing that it's meaningless for non-DNS identifiers. That's true, but we will still want to enable requestors to restrict which CA(s) are permitted to issue for their entity identifier, as otherwise any issuer that ever joins the federation is allowed to issue. If we express such restrictions in `acme_requestor`, then it also becomes possible for federation superiors to construct [restrictions on subordinates](https://openid.net/specs/openid-federation-1_0-41.html#chain_constraints), which is also an attractive feature.\n\nThis could be expressed as a list of entity identifiers, but we could also imagine richer policies, such as only allowing issuers that have a [trust mark](https://openid.net/specs/openid-federation-1_0-41.html#section-7) satisfying some predicate.",
      "createdAt": "2025-02-06T17:30:14Z",
      "updatedAt": "2025-02-06T17:30:14Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 62,
      "id": "I_kwDOJ6_NW86pDMdo",
      "title": "Should trust marks be reflected in issued certificates?",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/62",
      "state": "OPEN",
      "author": "tgeoghegan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "At its simplest, an X.509 certificate issued by an ACME-OIDF CA attests that its holder has some OIDF identifier. But it might be interesting for the cert to contain more information that reflects the OIDF entity. For example, one or more of the trust marks advertised by the requestor's entity configuration could be translated into a novel [X.509 extension](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2), or perhaps certain trust marks would cause the CA to add certain EKUs to the certificate.",
      "createdAt": "2025-02-06T17:40:17Z",
      "updatedAt": "2025-02-07T18:56:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the certificate profiles for EUDIW use cases will likely be spelled out in detail by ETSI standards, so CAs would have to include specific OIDs in various fields. In that case, I think it would make more sense to gate issuance for a predefined certificate profile behind validating a particular trust mark. Directly representing a trust mark in a certificate would require the relying parties on the X.509 side to be at least somewhat aware of OpenID Federation, enough to expect this extension, so adoption would be a problem.",
          "createdAt": "2025-02-06T17:45:11Z",
          "updatedAt": "2025-02-06T17:45:11Z"
        },
        {
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that there's a lot of nuance in how trust marks are represented in the X.509 side, which is why I'm trying not to be prescriptive yet. I like the idea of the issuer gating the use of a profile on the requestor having certain trust marks, but then does that mean we punt the question of what shows up in the X.509 cert to the CA? I suppose that makes sense, since then they can choose something that meets the needs of whatever existing system they're integrating with.",
          "createdAt": "2025-02-07T18:56:39Z",
          "updatedAt": "2025-02-07T18:56:39Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOJ6_NW86pfYsR",
      "title": "Clarify Publication of the Certificates within the Federation",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/65",
      "state": "CLOSED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In working on https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/47, considering the TBD text regarding certificate publication:\n\nhttps://github.com/peppelinux/draft-demarco-acme-openid-federation/blob/d8d1268e2b46e048326413777f914b34434d8973/draft-demarco-acme-openid-federation.md?plain=1#L685-L690\n\nWe'd considered ways to rephrase this, first because it's the only remaining usage of `Certificate Issuer` within the body of the document, but it leads to an interesting set of questions:\n\n1. Since it's not required for a Certificate Requestor to be in a subordinate position to a Certificate Issuer, is it acceptable to only publish the certificate in the case where they are Superior/Subordinate?\n2. Given that an entity could have many JWKs in their Subordinate Statement, and could obtain certificates for each, is it a good idea to publish the `x5c` for each? Do we worry about the data size, and the duplicate trust chain entries?\n3. What is the motivation for the certificates being published (if possible) in the federation at all?\n  - When the X.509 certificates are used for TLS, they're transmitted on the wire regardless. \n  - OIDF [makes a point about trusting self-signed X.509 certificates if they're in the Subordinate Statement](https://openid.net/specs/openid-federation-1_0-41.html#section-12.1.1.2-4.2.1), but that's not applicable here.\n  - Is this intended to provide transparency, that the certificates are discoverable without connecting to the holder? If so, perhaps we could encode one or more RFC 6962 Signed Certificate Timestamps instead?\n",
      "createdAt": "2025-02-10T20:42:58Z",
      "updatedAt": "2025-03-27T19:02:28Z",
      "closedAt": "2025-03-27T19:02:28Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "1. they should publish the certificates when the trust framework in use mandate this. we can say this in the specs.\n2. `x5c` when included in the jwks, for the purpose f this specification, must only contain the certificate about the single jwk where it is referred to. It should be published, according to the trust frameworks rules about x509 transparency using federation entity statements.\n3. we have two motivation: one mandatory and another optional. The mandatory one is about using acme_requestor metadata for the issuance process. The second one, is optional, because it would be up to the trust framework mandate or require the publication of the already requested (in the subordinate entity configuration) or already issued (in the superior statement) ones.",
          "createdAt": "2025-02-11T15:28:22Z",
          "updatedAt": "2025-02-11T15:28:22Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "1. In our discussion on 2025-02-11, we also touched on whether this was about the Subordinate Statement, Entity Configuration, or both, and left that still ambiguous. The current text only refers to placing the issued certificate in the Subordinate Statement, so we need to amend that one way or another.\n2. We also discussed whether the `x5c` should repeat intermediate issuer certificates / be a whole trust chain, with the issue that [RFC7517 defines it as a chain](https://www.rfc-editor.org/rfc/rfc7517.html#section-4.7), so doing anything different with `x5c` could be an issue.\n3. OIDFed is definitely using `x5c` to handle self-signed certificates, so it's not going away completely. Those might just be a special case.\n4. Since publication of the resulting issued certificate is partly motivated by transparency, we should consider using existing Certificate Transparency standards, to avoid inventing a new transparency log type. That would let us put smaller SCTs into the federation metadata statement(s), but still allow auditors to look up every issued certificate. (Note: [ETSI is doing some work w.r.t. CT](https://portal.etsi.org/webapp/WorkProgram/Report_WorkItem.asp?WKI_ID=73788&curItemNr=155&totalNrItems=298&optDisplay=100000&qSORT=TB&qETSI_ALL=&SearchPage=TRUE&qINCLUDE_SUB_TB=True&qINCLUDE_MOVED_ON=&qEND_CURRENT_STATUS_CODE=11+WI%3BM58&qSTOP_FLG=N&qKEYWORD_BOOLEAN=OR&qCLUSTER_BOOLEAN=OR&qCLUSTER=19&qFREQUENCIES_BOOLEAN=OR&qSTOPPING_OUTDATED=&butExpertSearch=Search&includeNonActiveTB=FALSE&includeSubProjectCode=FALSE&qREPORT_TYPE=))",
          "createdAt": "2025-02-11T15:50:39Z",
          "updatedAt": "2025-02-11T15:50:39Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "regarding the bullet points:\n- openid federation depends on X.509. At the same time this specs can be used to obtain X.509 certificates to be used for httpd. This might represent a circular dependency. It is up to the trust framework enable a triage phase for new participants, using self issued X.509 certificates, establishing their entity id and the discovery on top of these. Other case might consider this specification for the x.509 certificates used in specialized/legacy application, giving for granted the requirement to the participants to obtain an x.509 certificate before joining in the federation.\n\n- in italy we are also working on a proposal like this: every participant is enabled in issuing self-signed certificates, having a superior statement giving the certificate and the public cryptographic material used to validate the signature of the self signed x5cs. This is not applicable using this specification about acme, since the issuance phase must be implemented using this acme extension.\n\n- I am open to introduce any RFC extending the transparency of X.509 certificates",
          "createdAt": "2025-02-11T15:53:44Z",
          "updatedAt": "2025-02-11T15:53:44Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "> We also discussed whether the x5c should repeat intermediate issuer certificates / be a whole trust chain, with the issue that [RFC7517 defines it as a chain](https://www.rfc-editor.org/rfc/rfc7517.html#section-4.7), so doing anything different with x5c could be an issue.\n\na chain could be also a single certificate, having a way to evaluate it as trustworthy (out of band mechanism or distributed chain provided over the federation trust chain). ",
          "createdAt": "2025-02-11T15:55:23Z",
          "updatedAt": "2025-02-11T15:55:23Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "@jcjones will work up a proposed PR for including SCT(s) from a RFC 6962 transparency log.",
          "createdAt": "2025-03-11T14:19:34Z",
          "updatedAt": "2025-03-11T14:31:57Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "Between having the x5c represent a single certificate or a certificate chain, I think it would be preferable to list the full chain. Only including one certificate per x5c, and directing consumers to build a chain from the x5cs in each subordinate statement in the OIDF trust chain, would introduce a tight coupling between the OIDF hierarchy and the X.509 hierarchy. If it is ever necessary to add another layer of intermediate CAs in the X.509 PKI, then this could become an obstacle, since the OIDF entities would have to be changed as well in order to represent the certificates consistently. Alternatively, including the whole chain in the x5c parameter is both more flexible, and more in line with existing standards.\n\nOnce we address transparency use cases with an informative reference to CT, we could consider removing this suggestion regarding subordinate statements. Once requestors receive their certificate via ACME, they can turn around and use it in other protocols (like OpenID4VCI). Reflecting the X.509 certificate into subordinate statements doesn't let us do anything we couldn't do otherwise. If the role of an ACME-OIDF CA is to act as a bridge from OIDF to an X.509 PKI, then we shouldn't expect the ecosystem on the X.509 side to be aware of OIDF enough to fetch certificates from it. Furthermore, it would be operationally more difficult to enable the ACME server to update OIDF subordinate statements than to simply evaluate trust chains.",
          "createdAt": "2025-03-11T15:36:05Z",
          "updatedAt": "2025-03-11T15:36:05Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "It's also much more correct for it to be the full chain.\n\nThat aside, the text says now `X.509 Certificate linked to JWK in the Subordinate Statement related to the Requestor`, which is sensible in that the private key used for the cert would be in the public key JWKS, but [OpenID Fed says](https://openid.net/specs/openid-federation-1_0.html#name-entity-statement), for the JWKs in the Entity Statement:\n\n>  These Federation Entity Keys SHOULD NOT be used in other protocols. (Keys to be used in other protocols, such as OpenID Connect, are conveyed in the metadata elements for the protocol's Entity Type Identifiers, such as the metadata under the openid_provider and openid_relying_party Entity Type Identifiers.)\n\nSo then we have a mismatch here as we'd want to associate the issued certificate with the entity key, but it shouldn't go there?\n\nThis makes moving the transparency aspect of this out of the doc even more preferable, imo",
          "createdAt": "2025-03-17T17:57:33Z",
          "updatedAt": "2025-03-17T17:57:33Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "> It's also much more correct for it to be the full chain.\n\nI thought about this. A federation entity statement is signed and can be linked to any superior entity statement, belonging to one or more superior entity. Any superior statement have in common at least two things:\n\n- subject identifier\n- public cryptographic material, the so called federation entity keys, in possession on the subject\n\nthis is very similar about any X.509 certificate. Now, supposing to have the following federations\n\nTA.1 -> INT.1 -> Leaf.A\nTA.2 -> INT.2 ____|\nTA.3 ____|             \nTA.4 ___________|\n\nAll the superiors would optionally provide the x.509 certificate issued for their subordinates in their x5c, only the certificate issued by themselves. TA.1 publishes the x5c about INT.1 and INT.1 the ones about Leaf.A. Things became more interesting about INT.2, since to enable a consistent X509Chain, INT.2 for signingn the certificate about Leaf.A should use the cryptographic material for which both TA.3 and TA.2 have issued a certificate for INT.2.\n\nThe challenge is to enable some sort of dinamic x5c linkability, with the full respect of any number of above superiors and their configurations.\n\nI want to enable the possibility for the implementation to include x5c making them aware of this and leaving up to them the possibility to include the full chain or enable the linkability using single, linkable, certificates. There might be the possibility to use full chains and at the same time make them splittable using different paths, therefore using chunks of them with different superiors, as long the crytographic binding would be consistent and valid.\n\n> So then we have a mismatch here as we'd want to associate the issued certificate with the entity key, but it shouldn't go there?\n\nthis is why I was in favour of enabling `metadata.$metadata_type.jwk.keys[n].x5c`",
          "createdAt": "2025-03-18T09:05:52Z",
          "updatedAt": "2025-03-18T09:06:23Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "I_kwDOJ6_NW86sZsxl",
      "title": "Contradictory requirements on metadata after certificate issuance",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/70",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 6.4.2 says \"The Issuer MUST only use the Requestor's acme_requestor to validate an ACME challenge. Therefore, after completing the challenge, the Requestor MAY remove the acme_requestor metadata from its Entity Configuration.\" Section 8 says \"When a cryptographic public key is removed from the Requestor Entity Configuration the X.509 Certificate related to it SHOULD be revoked by its Credential Issuer, if not expired.\"\n\nContinuous monitoring of validation information post-issuance is not well-suited to the ACME protocol's model. Besides, this sort of recommendation would be a better fit in the policies governing some trust framework than here, in a protocol document.\n\nNote that federation entities could request revocation via the `revokeCert` resource defined by RFC 8555. If control of a federation entity has changed recently, you could create a new order for an identifier, respond to the challenge in the resulting authorization object, never finalize the order, and instead send a revocation request for the certificate you want revoked, reusing the authorization from the above solved challenges.",
      "createdAt": "2025-03-03T22:00:38Z",
      "updatedAt": "2025-03-11T14:13:01Z",
      "closedAt": "2025-03-11T14:13:01Z",
      "comments": []
    },
    {
      "number": 75,
      "id": "I_kwDOJ6_NW86ti3ip",
      "title": "Add directives to RFC Editor",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/75",
      "state": "OPEN",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Not necessary for the first drafts, but as we progress it, we'll want to start putting explicit `(RFC EDITOR: Replace \"XXXX\" with the RFC number assigned to this document.)` sorts of things in the document.",
      "createdAt": "2025-03-11T19:05:19Z",
      "updatedAt": "2025-03-11T19:05:19Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 79,
      "id": "I_kwDOJ6_NW861odyW",
      "title": "Allow issuer to include its OIDF trust anchors in `openid-federation-01` challenge",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/79",
      "state": "CLOSED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The `openid-federation-01` challenge consists of a token, which the requestor must sign to prove possession of one of the keys in the `acme_requestor` metadata. The challenge response can optionally contain a trust chain, to save the ACME issuer the trouble of resolving trust in the requestor. Makes sense, but the question is: a chain to what trust anchor?\n\nThe protocol text says: [\"The Requestor SHOULD use a Trust Anchor it has in common with the ACME server.\"](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-6.7-9)\n\nBut it's not clear to me how the requestor is supposed to know what TAs it has in common with the issuer. An OpenID Fed entity doesn't advertise its trust anchors anywhere (`authority_hints` has to be immediate superiors). The best the requestor could do would be to try resolving the issuer up to each of its own TAs and use the first trust chain it can resolve. But I think we can do better.\n\nWhat if the challenge object that the issuer presents to the requester optionally included the issuer's TAs, so that then the requestor could intersect that with its own TAs and do a single resolve to get a trust chain? e.g.\n\n```json\n{\n  \"type\": \"openid-federation-01\",\n  \"url\": \"https://issuer.example.com/acme/chall/prV_B7yEyA4\",\n  \"status\": \"pending\",\n  \"token\": \"LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0\",\n  \"trust-anchors\": [\"https://example.org/\", \"https://another-ta.org/\"]\n}\n```",
      "createdAt": "2025-05-07T22:13:37Z",
      "updatedAt": "2025-05-27T14:22:11Z",
      "closedAt": "2025-05-27T14:22:11Z",
      "comments": [
        {
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "body": "Looking at RFC 8555, there seems to be a preference for JSON keys to be in `bumpyCase` rather than `snake_case`, so I think `trustAnchors` would be more appropriate than `trust-anchors`.",
          "createdAt": "2025-05-19T16:32:18Z",
          "updatedAt": "2025-05-19T16:32:18Z"
        },
        {
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "body": "I think another thing is missing here: besides checking that some trust path exists from the requestor to one of the issuer's trust anchors, I think the issuer needs to make sure that the trust chain allows the requestor to have the `acme_requestor` entity type.\n\nBasically, I think we want to guard against a scenario where the requestor's EC contains entity type `acme_requestor` (ECs are self-signed so they can claim anything they want), but the ES does not, perhaps because the particular federation's policy forbids it.\n\nI'm not sure if the existing text implies that the issuer should check for this. All it says is that either the requestor should provide \"an array of strings containing signed JWTs, representing the Trust Chain of the Requestor, see [Section 4.3](https://openid.net/specs/openid-federation-1_0-41.html#section-4.3) of [[OPENID-FED](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#OPENID-FED)]\" or in the absence of the trust chain, that the issuer \"MUST start Federation Entity Discovery to obtain the Trust Chain related to the Requestor\".\n\nWe should probably have a specific reference to \"Federation Entity Discovery\" in the OIDF draft. In my implementation, I use the resolve endpoint (8.3). I think also we should explicitly spell out that the leaf ES in the trust chain must have `acme_requestor` metadata in it. And the text should either require the issuer to check that the `acme_requestor` metadata in the requestor EC is consistent with the leaf ES of the trust chain, or that only the leaf ES should be used to validate token signatures.",
          "createdAt": "2025-05-19T17:16:12Z",
          "updatedAt": "2025-05-19T17:16:12Z"
        },
        {
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, what if the requestor can't construct a trust chain, say because none of the trust anchors provided by the issuer trust it? Should it fail to solve the challenge? Or should it still sign the token and construct a challenge response without `trustChain` so that the issuer can try resolving trust?",
          "createdAt": "2025-05-19T17:19:20Z",
          "updatedAt": "2025-05-19T17:19:20Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "@tgeoghegan unfortunately, if the acme provider cannot resolve the requestor under a known trust anchor, the process should fail. Be this a fake/invalid trust chain provided by requestor or a failed discovery process thrown by acme provider.\n\nIn general, any inconsistency in the trust evaluation process about an entity about it self or an entity about its audience must return an error and therefore fail the process.",
          "createdAt": "2025-05-27T14:21:50Z",
          "updatedAt": "2025-05-27T14:21:50Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "I_kwDOJ6_NW864bJgR",
      "title": "Be consistent on use of snake_case vs camelCase",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/82",
      "state": "OPEN",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The ACME RFC uses camelCase for JSON members, while OpenID Fed prefers snake_case. \n* For the parts of this which are an ACME extension, we should adopt the ACME RFC's naming for ACME data structures. \n* For the parts of this which are an OpenID Federation extension, we should adopt the OpenID spec's naming.\n\nIt's quite possible this is a no-op, but I want to do a check before deciding.",
      "createdAt": "2025-05-27T14:20:31Z",
      "updatedAt": "2025-05-27T14:24:39Z",
      "closedAt": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "Considering the use of Camel case in ACME specs, it would make sense to align this draft and the interop flow using Camel case.\n\ninterop flow are about ACME requests/responses \n\nmetadata as sort of extension of the openid federation em,tadata types, should keep their snake cases, according to ietf/openid foundation specs.",
          "createdAt": "2025-05-27T14:23:10Z",
          "updatedAt": "2025-05-27T14:24:38Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "I_kwDOJ6_NW8640yld",
      "title": "\"Discovery\" is under-specified",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/84",
      "state": "OPEN",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The start of [section 6 \"Protocol Flow\"](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-6) tells us that there are two major phases, discovery and \"order request\". But then [section 6.2 Discovery](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-6.2) doesn't really say much about how to do discovery. Is there a section in OPENID-FED we could point to that explains how to look for entities of a certain type in a federation? I don't think there's anything especially clever implementations can do here (they either have to be handed an issuer's identifier or walk the tree of the federation) but it seems odd to me that we make such a big deal of discovery but then say so little about it.",
      "createdAt": "2025-05-29T16:26:53Z",
      "updatedAt": "2025-05-29T18:17:13Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "body": "[The first bullet under 6.3 Overview](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-6.3-1.1.1) also contradicts 6.2 Discovery:\n\n```\n1. The Requestor checks if its superior Federation Entity supports the ACME\n   protocol for OpenID Federation 1.0. If not, the Requestor starts the\n   discovery process to find Issuers within the federation.\n```\n\nI don't think it's wise for this document to assert that requestors should prefer their immediate federation superior over other `acme_issuer`s in the federation. We don't know enough about why X.509 certs are being issued to say that. For example, my superior might be an X.509 CA that is trusted to issue credentials to talk to system A, but what I'm trying to do is get creds to talk to system B, which can only be issued by some other issuer in the federation.\n\nedit: this specific point is addressed in #89 by deleting the line in question but we should still think about whether we can say any more useful stuff about issuer discovery.",
          "createdAt": "2025-05-29T16:29:42Z",
          "updatedAt": "2025-05-29T18:17:12Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDOJ6_NW8641G4M",
      "title": "Use of `urn:ietf:params:acme:error:openIDFederationEntity` is awkward",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/85",
      "state": "OPEN",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We have [a single reference ](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-6.3-1.5.1) to this problem type we define and there's a few problems here:\n\n- it's only mentioned in the overview which isn't a great place for normative text\n- it talks about a \"CSR request\" which is hard to parse because lots of things could go wrong before the requestor sends a CSR\n- it's hard to reconcile with RFC 8555, which will occasionally say you MUST use a specific error URN\n- it's not helpful for errors to tell you something went wrong w.r.t. an `openIDFederationEntity`, because you already know you were doing OIDF stuff because that's the kind of order you constructed\n- it mandates a single `error_code` value, though the OPENID-FED section referred to enumerates about a dozen things that could go wrong with OIDF\n\nI think we should instead guide implementations to include an error of this type as a _sub_problem and allow for a variety of `error_code` values.",
      "createdAt": "2025-05-29T16:59:26Z",
      "updatedAt": "2025-05-29T16:59:26Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 86,
      "id": "I_kwDOJ6_NW8641KbT",
      "title": "Certificate Transparency advice is bad",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/86",
      "state": "CLOSED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "[Section 7](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-7):\n\n> All X.509 Certificates issued SHOULD be published to one or more Certificate Transparency logs {{!RFC9162}}.\n\nThis is bad advice and doing this would sorely annoy web PKI CT log operators. Certificates that aren't for TLS in the web PKI should not be submitted to web PKI logs. I think we try to acknowledge this in the next sentence:\n\n> Selection of those logs, their versions, and embedding or discovery of Signed Certificate Timestamps, are policy decisions and are out of scope for this document.\n\nBut on balance I believe we'd be better off saying nothing about CT. There are other documents out there that explain when it's appropriate or required for certificates to be submitted to logs.\n",
      "createdAt": "2025-05-29T17:05:59Z",
      "updatedAt": "2025-06-02T21:00:18Z",
      "closedAt": "2025-06-02T21:00:18Z",
      "comments": [
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see Web PKI CT log operators even accepting these certificates. \n\nWhen I wrote that passage, it was to provide a notice that _someone_ should run suitable CT logs and accept these, but OK, your point about that being entirely out-of-scope seems valid too.",
          "createdAt": "2025-05-29T17:17:44Z",
          "updatedAt": "2025-05-29T17:17:44Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "I_kwDOJ6_NW8641TTs",
      "title": "\"Overview\" should come first and subsume other sections",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/87",
      "state": "CLOSED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The purpose of an overview is to ease the reader into the complex topics the document will cover, and provide a framework of understanding that will be filled in by later sections of the document that have all the fine details in them.\n\nThe \"Overview\" we have in 6.2 is helpful (especially the sequence diagram), but:\n\n- it comes surprisingly late in the document, after some sections like \"Discovery\" and \"Preconditions\" that contain normative text (MUSTs)\n- it seems like it overlaps with some things stated in [Section 5](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-5) and the [header of Section 6](https://peppelinux.github.io/draft-demarco-acme-openid-federation/draft-demarco-acme-openid-federation.html#section-6).\n\nI think we should reorganize to move the overview up and collapse redundant sections into it.",
      "createdAt": "2025-05-29T17:21:14Z",
      "updatedAt": "2025-06-04T16:38:07Z",
      "closedAt": "2025-06-04T16:38:06Z",
      "comments": [
        {
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved by #89 ",
          "createdAt": "2025-06-04T16:38:06Z",
          "updatedAt": "2025-06-04T16:38:06Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "I_kwDOJ6_NW8656V5K",
      "title": "Consider revising name of ACME Identifier Type",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/92",
      "state": "OPEN",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For ACME Identifier Types, we use `openid-federation`, but that would be the first hyphenated identifier there, while [RFC 9448](https://www.rfc-editor.org/rfc/rfc9448.html) use PascalCase for TNAuthList:  https://www.iana.org/assignments/acme/acme.xhtml#acme-identifier-types\n\nThis is arguably a mismatch, and we should consider using something else. `openidFederation` looks more like the 8555/8738 examples.\n\nOr we could just go with what we have, arguing that it matches everything _except_ 9448, including all the \"Auto-Renewal Fields\".",
      "createdAt": "2025-06-04T20:50:07Z",
      "updatedAt": "2025-06-04T20:50:07Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 93,
      "id": "I_kwDOJ6_NW866Q051",
      "title": "Update OpenID Federation reference to draft 43",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/93",
      "state": "OPEN",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Draft 43 of OpenID Federation was just published a few days ago. https://openid.net/specs/openid-federation-1_0-43.html#name-document-history Among other things, this makes changes to trust marks and defines the term \"Resolved Metadata\", referring to the result of applying all metadata policies to the Entity Configuration.\n\nWe should update the document reference, update section numbers as needed, and make use of the term \"Resolved Metadata\" when talking about how to get metadata parameters.",
      "createdAt": "2025-06-06T14:35:17Z",
      "updatedAt": "2025-06-06T14:35:17Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "PR_kwDOJ6_NW856CIbm",
      "title": "WIP: rephrase OpenID federation validation as a new challenge type.",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/3",
      "state": "MERGED",
      "author": "branlwyd",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-30T23:32:27Z",
      "updatedAt": "2024-10-08T14:35:23Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "5f1e34bcb3bdd432f146773537c3cca10c9b6c8a",
      "headRepository": "branlwyd/draft-demarco-acme-openid-federation",
      "headRefName": "bran/challenge",
      "headRefOid": "22589fe6fe6c76989877cf708ebf4532389a2950",
      "closedAt": "2024-10-08T14:35:23Z",
      "mergedAt": "2024-10-08T14:35:23Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "2d7af5cfe546691fc3ccc6baf359592464f645e5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86Hy3vC",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:09:37Z",
          "updatedAt": "2024-09-03T19:09:37Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "```suggestion\r\ndomain and its underlying endpoints using the trust evaluation mechanism provided by OpenID Federation 1.0. The client demonstrates control\r\n```\r\nI would not say mutual because the client has discovered in a previous moment all the ACME certificate issuers within a large scale federation, and at the time of the acme request only the acme issuers needs to evaluate the trust with the client",
              "createdAt": "2024-09-03T19:09:37Z",
              "updatedAt": "2024-09-03T19:09:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy4Lp",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:10:27Z",
          "updatedAt": "2024-09-03T19:10:28Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "```suggestion\r\nof a cryptographic public key published in its OpenID Federation Entity Configuration, which the ACME server uses\r\n```",
              "createdAt": "2024-09-03T19:10:27Z",
              "updatedAt": "2024-09-03T19:10:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy4vw",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:11:31Z",
          "updatedAt": "2024-09-03T19:11:31Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "requirement:\r\n\r\nthe domain must be part of the client_id and therefore of the http url used in the value of the parameter `sub` contained in the entity configuration ",
              "createdAt": "2024-09-03T19:11:31Z",
              "updatedAt": "2024-09-03T19:11:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy6dY",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:15:11Z",
          "updatedAt": "2024-09-03T19:15:11Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "```suggestion\r\n    field; otherwise, the ACME server MUST start a Federation Entity Discovery about the client\r\n```\r\n\r\nhow the acme issuer know which is the client's entity id? suggest to add it in the previous object to provide a way to the acme issuer to fetch the entity configuration, when the trust chain is not provided within the request",
              "createdAt": "2024-09-03T19:15:11Z",
              "updatedAt": "2024-09-03T19:15:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy66Q",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:16:07Z",
          "updatedAt": "2024-09-03T19:16:08Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "\r\n```suggestion\r\nOnce the ACME issuer sends the request the client responds with an object with the following format:\r\n```\r\n\r\nthe acme issuer http request needs to be further described using a non-normative example about the http request",
              "createdAt": "2024-09-03T19:16:08Z",
              "updatedAt": "2024-09-03T19:16:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy7CS",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:16:23Z",
          "updatedAt": "2024-09-03T19:16:24Z",
          "comments": [
            {
              "originalPosition": 244,
              "body": "```suggestion\r\n    encoded in UTF-8 with one of the keys published in the client's OpenID Federation Entity\r\n```",
              "createdAt": "2024-09-03T19:16:23Z",
              "updatedAt": "2024-09-03T19:16:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy7b7",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:17:10Z",
          "updatedAt": "2024-09-03T19:17:11Z",
          "comments": [
            {
              "originalPosition": 247,
              "body": "```suggestion\r\ntrust_chain (optional, array of string):  an array of base64url-encoded bytes containing a signed JWT and\r\n```",
              "createdAt": "2024-09-03T19:17:10Z",
              "updatedAt": "2024-09-03T19:17:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy8Qn",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:18:34Z",
          "updatedAt": "2024-09-03T19:18:34Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "another requirement is that the client, within its trust chain, SHOULD use the same trust anchor that it has in common with the acme issuer, in other words the trust anchor used to evaluate the trust with the acme issuer",
              "createdAt": "2024-09-03T19:18:34Z",
              "updatedAt": "2024-09-03T19:18:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy8ik",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:19:01Z",
          "updatedAt": "2024-09-03T19:19:01Z",
          "comments": [
            {
              "originalPosition": 261,
              "body": "```suggestion\r\n       \"kid\": \"1\",\r\n```",
              "createdAt": "2024-09-03T19:19:01Z",
              "updatedAt": "2024-09-03T19:19:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy8wR",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:19:26Z",
          "updatedAt": "2024-09-03T19:19:26Z",
          "comments": [
            {
              "originalPosition": 255,
              "body": "```suggestion\r\n   Host: client.example.com\r\n```",
              "createdAt": "2024-09-03T19:19:26Z",
              "updatedAt": "2024-09-03T19:19:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy9k7",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:20:59Z",
          "updatedAt": "2024-09-03T19:20:59Z",
          "comments": [
            {
              "originalPosition": 283,
              "body": "I would move this note out of the brackets and configuring it as a normative requirement\r\n\r\nthe client can only request certificate about the FQDN used in its federation entity id",
              "createdAt": "2024-09-03T19:20:59Z",
              "updatedAt": "2024-09-03T19:20:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Hy-Wh",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T19:22:28Z",
          "updatedAt": "2024-09-03T19:22:28Z",
          "comments": [
            {
              "originalPosition": 294,
              "body": "provide failure behaviour such as giving http response error code in the form of non-normative example and according to the ACME specs legacy",
              "createdAt": "2024-09-03T19:22:28Z",
              "updatedAt": "2024-09-03T19:22:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86IVMZR",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T22:59:38Z",
          "updatedAt": "2024-09-06T22:59:38Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "I pulled in the following requirement around validation, attempting to match the existing check on the identifier the client is requesting issuance for:\r\n\r\n> Verifies that the requested domain names match the FQDN contained within the `iss` parameter of the client's Entity Configuration.\r\n\r\nThe [OpenID Federation 1.0's Entity Statement](https://openid.net/specs/openid-federation-1_0.html#name-entity-statement) section says:\r\n\r\n> iss\r\n> REQUIRED. The Entity Identifier of the issuer of the Entity Statement. If the iss and the sub are identical, the issuer is making an Entity Statement about itself called an Entity Configuration.\r\n\r\nSince we are explicitly checking the client's Entity Configuration, technically speaking, I think `iss` & `sub` are identical here. (Please correct me if I am wrong here.) Conceptually, however, I think `sub` makes more sense than `iss` since we are interested in knowing the subject of the configuration; I have made the suggested change to the requirements.",
              "createdAt": "2024-09-06T22:59:38Z",
              "updatedAt": "2024-09-06T22:59:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86IVOoO",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T23:17:51Z",
          "updatedAt": "2024-09-06T23:17:51Z",
          "comments": [
            {
              "originalPosition": 261,
              "body": "I think this is right, currently -- this would be an ACME account key, rather than a key published in the client's Entity Configuration. (I think it's valuable to maintain the concept of ACME accounts separately from the OpenID Entity Configurations since (a) ACME implementations will generally expect accounts to exist and (b) the ACME implementation may wish to implement account controls/rate-limiting/etc at the level of ACME accounts rather than OpenID Entities, i.e. individual domains.)\r\n\r\nHowever, we could add a `kid` field to the payload of the challenge, indicating which key in the Entity Configuration to use to validate the signature. What do you think?",
              "createdAt": "2024-09-06T23:17:51Z",
              "updatedAt": "2024-09-06T23:17:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86IVOxb",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T23:19:07Z",
          "updatedAt": "2024-09-06T23:19:08Z",
          "comments": [
            {
              "originalPosition": 255,
              "body": "This request is to the issuer, i.e. the ACME server, rather than the client.",
              "createdAt": "2024-09-06T23:19:07Z",
              "updatedAt": "2024-09-06T23:19:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86IVQXZ",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T23:33:10Z",
          "updatedAt": "2024-09-06T23:33:10Z",
          "comments": [
            {
              "originalPosition": 294,
              "body": "IMO, we should follow the ACME spec as well as RFC 8737, RFC 8823 -- these all define challenge types in terms of success or failure, relying on [RFC 8555 section 7.3.1](https://datatracker.ietf.org/doc/html/rfc8555/#section-7.5.1) to generically define how success/failure of an authorization attempt is handled.\r\n\r\nI added some text referring to this section.",
              "createdAt": "2024-09-06T23:33:10Z",
              "updatedAt": "2024-09-06T23:33:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86IVRWL",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T23:43:15Z",
          "updatedAt": "2024-09-06T23:43:15Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "Which request? The client's response has a non-normative example below; the rest of the process is standard ACME as described in RFC 8555.",
              "createdAt": "2024-09-06T23:43:15Z",
              "updatedAt": "2024-09-06T23:43:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86IVSKL",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T23:52:48Z",
          "updatedAt": "2024-09-06T23:52:48Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "> how the acme issuer know which is the client's entity id? suggest to add it in the previous object to provide a way to the acme issuer to fetch the entity configuration, when the trust chain is not provided within the request\r\n\r\nI added text to this effect.\r\n\r\nFor my own education: is there a reason we couldn't start federation entity discovery based on the FQDN contained in the identifier? For example, could multiple Entities have Entity Configurations with the same FQDN in `iss`? Or maybe it is impractical to look up entities based on partial Entity IDs, even if the FQDN is unique?\r\n\r\n> another requirement is that the client, within its trust chain, SHOULD use the same trust anchor that it has in common with the acme issuer, in other words the trust anchor used to evaluate the trust with the acme issuer\r\n\r\nAdded text to this effect. Why is this a `SHOULD` rather than a `MUST` -- what behavior would we expect of the server if the client sends a trust chain to an anchor it does not trust? (Failure would be the most likely response, but I think we could also allow the server to perform Entity Discovery if it receives a trust chain that it can't verify.)",
              "createdAt": "2024-09-06T23:52:48Z",
              "updatedAt": "2024-09-06T23:52:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86KRthP",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-21T20:12:46Z",
          "updatedAt": "2024-09-21T20:12:46Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "yes, in a entity configuration iss and sub are identical (while in a subordinate statements not).\r\n\r\n",
              "createdAt": "2024-09-21T20:12:46Z",
              "updatedAt": "2024-09-21T20:12:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86KRtpe",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-21T20:18:36Z",
          "updatedAt": "2024-09-21T20:18:36Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "we use entity id using https url, therefore more than a single FQDN, since within the same hostname/domain we might have more entities with different, even if derived from the same FQDN, entities (eg: multitenancy)\r\n\r\nthere might be implementations/deployments that wants to use federation in a more \"decentralized\" way (such as openid gain-poc wg) where RP of federation X trusts also a list of third party trust anchors belonging to other federations. I nthis scenario X trusts Y because X trusts Y-TrustAnchor and Y trusts X because X-TrustAnchor. These kind of decision belongs to the trust framework in use and goes beyond the scope of openid federation, therefore I decided to use a SHOULD there",
              "createdAt": "2024-09-21T20:18:36Z",
              "updatedAt": "2024-09-21T20:18:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86KRtqi",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-21T20:19:31Z",
          "updatedAt": "2024-09-21T20:19:31Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "a response happes after a request, there is space to further describe the flow if you agree in giving more guidance to the reader",
              "createdAt": "2024-09-21T20:19:31Z",
              "updatedAt": "2024-09-21T20:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86LgNG_",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-01T14:04:01Z",
          "updatedAt": "2024-10-01T14:04:01Z",
          "comments": [
            {
              "originalPosition": 261,
              "body": "I would not embed challenges values in kid, it's up to the implementers and jwk issuers decide the kid parameter value",
              "createdAt": "2024-10-01T14:04:01Z",
              "updatedAt": "2024-10-01T14:04:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86LgNsv",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-01T14:04:53Z",
          "updatedAt": "2024-10-01T14:04:53Z",
          "comments": [
            {
              "originalPosition": 255,
              "body": "therefore I'd go to server.example.com\r\n\r\nour example would give more guidance to facilitate the readers in having a good read experience",
              "createdAt": "2024-10-01T14:04:53Z",
              "updatedAt": "2024-10-01T14:04:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86LuYLU",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-02T22:18:17Z",
          "updatedAt": "2024-10-02T22:18:17Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "From off-PR discussion: I think we should define, probably in another PR, what fields are filled out in the X.509 certificates. RFC 8555 ACME is concerned with validating a domain, and will generate a certificate for that domain. But in a multitenant situation, both tenants of a given domain would get a certificate associating the relevant key to the domain, which I think is not desirable.\r\n\r\nI'm unaware of what will be consuming these certificates, and especially in what they will expect. Is this something we are free to define, or are there designs/implementations that are already consuming the X.509 certificates this design would be creating?\r\n\r\nWe should also specify the public key that is included in the certificate -- IIRC from our discussion, this is the same public key that is included in the Entity Configuration.",
              "createdAt": "2024-10-02T22:18:17Z",
              "updatedAt": "2024-10-02T22:18:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86LuaVG",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-02T22:27:55Z",
          "updatedAt": "2024-10-02T22:27:55Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "I added a non-normative example of what the challenge object would like like post-validation.",
              "createdAt": "2024-10-02T22:27:55Z",
              "updatedAt": "2024-10-02T22:27:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Luaxf",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-02T22:29:58Z",
          "updatedAt": "2024-10-02T22:29:58Z",
          "comments": [
            {
              "originalPosition": 261,
              "body": "Hmm -- there are two types of keys in play here:\r\n\r\n1. ACME account keys. This is identified by the `kid` field referenced in this comment. I think this should stay the same.\r\n\r\n2. OpenID entity keys. We should decide where to place this `kid` field. I think we could either have the server check all keys published in the entity configuration, or have the client include a `kid` field in the key response identifying which OpenID entity key is used to meet the challenge.",
              "createdAt": "2024-10-02T22:29:58Z",
              "updatedAt": "2024-10-02T22:29:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Ludl8",
          "commit": {
            "abbreviatedOid": "6d6606f"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-02T22:43:33Z",
          "updatedAt": "2024-10-02T22:43:33Z",
          "comments": [
            {
              "originalPosition": 255,
              "body": "I updated all of the domain names to be `issuer.example.com` (matching some pre-existing URIs for the issuer) or `requestor.example.com`.",
              "createdAt": "2024-10-02T22:43:33Z",
              "updatedAt": "2024-10-02T22:45:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOJ6_NW85-Y1wo",
      "title": "Update introductory & concluding sections to match challenge-type spec.",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/4",
      "state": "MERGED",
      "author": "branlwyd",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The text of the initial sections is updated to match the new phrasing of this spec as a new ACME challenge type. I also reflow the text to 80 columns and make a few editorial/typographical changes.",
      "createdAt": "2024-10-12T00:06:47Z",
      "updatedAt": "2024-11-03T07:31:06Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "2d7af5cfe546691fc3ccc6baf359592464f645e5",
      "headRepository": "branlwyd/draft-demarco-acme-openid-federation",
      "headRefName": "bran/cleanup",
      "headRefOid": "a2619dd85099e4f5e827c75d840e826882a8e7c7",
      "closedAt": "2024-11-03T07:31:06Z",
      "mergedAt": "2024-11-03T07:31:06Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "26507dfd11d4f2c8673966a6b32a4d392ac3d475"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86OLW86",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:11:26Z",
          "updatedAt": "2024-10-22T14:11:26Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nThis document defines how X.509 certificates associating a given OpenID Federation Entity\r\n```",
              "createdAt": "2024-10-22T14:11:26Z",
              "updatedAt": "2024-10-22T14:11:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLYRt",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:13:18Z",
          "updatedAt": "2024-10-22T14:13:19Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Actually an ACME provider can be a leaf and not necessarly a Trust Anchor or an Intermediate entity.\r\n\r\n",
              "createdAt": "2024-10-22T14:13:18Z",
              "updatedAt": "2024-10-22T14:13:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLZDB",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:14:23Z",
          "updatedAt": "2024-10-22T14:14:23Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\nOpenID Federation 1.0 allows an ACME server to issue X.509 certificates\r\n```",
              "createdAt": "2024-10-22T14:14:23Z",
              "updatedAt": "2024-10-22T14:14:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLa1A",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:16:48Z",
          "updatedAt": "2024-10-22T14:16:49Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nConfiguration. X.509 Certificates can be provided to one or more organizations,\r\n```",
              "createdAt": "2024-10-22T14:16:48Z",
              "updatedAt": "2024-10-22T14:17:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLbZ_",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:17:35Z",
          "updatedAt": "2024-10-22T14:17:35Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "```suggestion\r\ntrust framework. OpenID Federation 1.0 allows each participant to\r\n```",
              "createdAt": "2024-10-22T14:17:35Z",
              "updatedAt": "2024-10-22T14:17:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLbnT",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:17:52Z",
          "updatedAt": "2024-10-22T14:17:52Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nCertificate to a server and the issuer is the ACME server that validates the\r\n```",
              "createdAt": "2024-10-22T14:17:52Z",
              "updatedAt": "2024-10-22T14:17:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLcIv",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:18:34Z",
          "updatedAt": "2024-10-22T14:18:34Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nspecification defines how ACME and OpenID Federation 1.0 can be\r\n```",
              "createdAt": "2024-10-22T14:18:34Z",
              "updatedAt": "2024-10-22T14:18:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLc91",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:19:41Z",
          "updatedAt": "2024-10-22T14:19:41Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "we must say in the terminolog ysection that \"ACME Challenge is defined in RFC....\" and therefore use it the defined term ACME Challenge as well as the other terms",
              "createdAt": "2024-10-22T14:19:41Z",
              "updatedAt": "2024-10-22T14:19:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLdJn",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:19:57Z",
          "updatedAt": "2024-10-22T14:19:57Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "```suggestion\r\n  OpenID Federation 1.0.\r\n```",
              "createdAt": "2024-10-22T14:19:57Z",
              "updatedAt": "2024-10-22T14:19:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLdbe",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:20:06Z",
          "updatedAt": "2024-10-22T14:20:06Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\n- It defines how to use and validate a basic OpenID Federation\r\n```",
              "createdAt": "2024-10-22T14:20:06Z",
              "updatedAt": "2024-10-22T14:20:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLdzt",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:20:32Z",
          "updatedAt": "2024-10-22T14:20:32Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n  publication of the X.509 Certificates, by a Trust Anchor or Intermediate, that\r\n```",
              "createdAt": "2024-10-22T14:20:32Z",
              "updatedAt": "2024-10-22T14:20:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLgU1",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:23:56Z",
          "updatedAt": "2024-10-22T14:23:57Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "pelase move these above at the begin of the section and remove all the re-definition by using a short ref as mentioned before in one of the previous comments",
              "createdAt": "2024-10-22T14:23:56Z",
              "updatedAt": "2024-10-22T14:23:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLhIq",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:25:03Z",
          "updatedAt": "2024-10-22T14:25:03Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "I think \"trust anchor or intermediate\" here is referring to the X.509 CA. I think we should pick some distinguished terminology for the X.509 CA, because \"trust anchor\" is used frequently in the context of OpenID Federation, so making the distinction clear would help with understanding.",
              "createdAt": "2024-10-22T14:25:03Z",
              "updatedAt": "2024-10-22T14:25:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLh8L",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:26:06Z",
          "updatedAt": "2024-10-22T14:26:06Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "```suggestion\r\n   in its Entity Configuration, attested by the superior Subordinate Statement.\r\n```",
              "createdAt": "2024-10-22T14:26:06Z",
              "updatedAt": "2024-10-22T14:26:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLjHa",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T14:27:40Z",
          "updatedAt": "2024-10-22T14:27:40Z",
          "comments": [
            {
              "originalPosition": 282,
              "body": "```suggestion\r\n   ACME protocol as specified in [RFC8555], using the new challenge defined in\r\n```",
              "createdAt": "2024-10-22T14:27:40Z",
              "updatedAt": "2024-10-22T14:27:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86OLjjv",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Approving it and lookign forward for the next review including suggestions and comment before merge",
          "createdAt": "2024-10-22T14:28:14Z",
          "updatedAt": "2024-10-22T14:28:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86PwQY-",
          "commit": {
            "abbreviatedOid": "4b6731e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-03T07:06:36Z",
          "updatedAt": "2024-11-03T07:06:37Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nOpenID Federation 1.0 is a standard that allows building\r\n```",
              "createdAt": "2024-11-03T07:06:36Z",
              "updatedAt": "2024-11-03T07:06:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86PwQdh",
          "commit": {
            "abbreviatedOid": "2727de0"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-03T07:09:09Z",
          "updatedAt": "2024-11-03T07:09:10Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nOpenID Federation 1.0 defines how to build a trust infrastructure using trusted third party model.\r\nIt implements a trust evaluation mechanism attesting the\r\npossession of public keys, protocol specific metadata\r\nand several administrative and technical information in the form of trust marks,\r\nrelated to a specific entity.\r\n```",
              "createdAt": "2024-11-03T07:09:09Z",
              "updatedAt": "2024-11-03T07:09:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86PwQgK",
          "commit": {
            "abbreviatedOid": "cf6e4c5"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-03T07:10:50Z",
          "updatedAt": "2024-11-03T07:10:51Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nOpenID Federation 1.0 defines how to build a trust infrastructure\r\nusing a trusted third-party model.\r\n```",
              "createdAt": "2024-11-03T07:10:51Z",
              "updatedAt": "2024-11-03T07:10:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86PwREC",
          "commit": {
            "abbreviatedOid": "3941bd5"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-03T07:30:36Z",
          "updatedAt": "2024-11-03T07:30:37Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "Done ",
              "createdAt": "2024-11-03T07:30:37Z",
              "updatedAt": "2024-11-03T07:30:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOJ6_NW85-vkbT",
      "title": "Define which keys can be used to satisfy a challenge.",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/5",
      "state": "MERGED",
      "author": "branlwyd",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This clarifies which keys can be used to satisfy the new ACME challenge\r\ntype. Along with the preexisting text that \"The CSR MUST include the\r\npublic key, attested within the Trust Chain, used by the Requestor to\r\nsatisfy the Issuer's challenge.\", this also defines which keys can be\r\nincluded in the eventual certificate -- I made some editorial changes to\r\nhighlight this requirement.",
      "createdAt": "2024-10-15T23:11:32Z",
      "updatedAt": "2024-11-03T07:39:33Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "26507dfd11d4f2c8673966a6b32a4d392ac3d475",
      "headRepository": "branlwyd/draft-demarco-acme-openid-federation",
      "headRefName": "bran/key",
      "headRefOid": "099398ec35fa11c023de03324dd27a7af8e88c33",
      "closedAt": "2024-11-03T07:39:33Z",
      "mergedAt": "2024-11-03T07:39:33Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "f3830f837d38f53b3ddb5967165714ff6a93f175"
      },
      "comments": [
        {
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "body": "Stacked on #4 -- please review that PR first, and I will rebase as-needed.",
          "createdAt": "2024-10-15T23:12:00Z",
          "updatedAt": "2024-10-15T23:12:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOJ6_NW85-v37Y",
      "title": "Specify requirements on CSR and Certificate.",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/6",
      "state": "MERGED",
      "author": "branlwyd",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Specifically, require the certificate to include the same public key\r\nused to satisfy the challenge (duplicating text elsewhere), and specify\r\nhow the Entity ID is included in the certificate.",
      "createdAt": "2024-10-16T00:19:25Z",
      "updatedAt": "2024-11-05T15:05:27Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "f3830f837d38f53b3ddb5967165714ff6a93f175",
      "headRepository": "branlwyd/draft-demarco-acme-openid-federation",
      "headRefName": "bran/san-entity-id",
      "headRefOid": "5e71edb2017cb232d45e6373fe2ef849d1aa33a4",
      "closedAt": "2024-11-05T15:05:21Z",
      "mergedAt": "2024-11-05T15:05:21Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "d68a33eeaac1dc672fefac00696bef533e87c5da"
      },
      "comments": [
        {
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "body": "Stacked on #4 -- please review that PR first, and I will rebase as-needed.\r\n\r\nThe requirement for the CSR to contain the same key used to satisfy the challenge will be written in 3 places now. WDYT about removing the requirement elsewhere, and keeping it only in this new \"CSR and Certificate Requirements\" section?",
          "createdAt": "2024-10-16T00:20:17Z",
          "updatedAt": "2024-10-16T00:20:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86P8SDS",
          "commit": {
            "abbreviatedOid": "c0a6b8c"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T08:32:09Z",
          "updatedAt": "2024-11-05T08:32:09Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "```suggestion\r\ncertificate signing request (CSR) and the issued X.509 Certificate:\r\n```",
              "createdAt": "2024-11-05T08:32:09Z",
              "updatedAt": "2024-11-05T08:32:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86P8TCL",
          "commit": {
            "abbreviatedOid": "94542d9"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T08:34:04Z",
          "updatedAt": "2024-11-05T08:34:04Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "```suggestion\r\nWhen using this challenge type, both the certificate signing request (CSR)\r\nand the X.509 Certificate:\r\n\r\n* MUST include a public key corresponding to\r\n  the key used to satisfy the challenge.\r\n\r\n* MUST include no Common Name, and must include\r\n  a single Subject Alternative Name value corresponding to an `otherName` with an\r\n  ID of **TBD**, containing an Octet String value corresponding to a UTF-8\r\n  encoding of the Requestor's Entity ID, that is, the value of the `sub` claim\r\n  of the Requestor's Entity Configuration.\r\n```",
              "createdAt": "2024-11-05T08:34:04Z",
              "updatedAt": "2024-11-05T15:02:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOJ6_NW86A8YIw",
      "title": "editorial: fix json in metadata code block",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/9",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Missing closing bracket.",
      "createdAt": "2024-11-05T15:07:46Z",
      "updatedAt": "2024-11-05T15:11:14Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "d68a33eeaac1dc672fefac00696bef533e87c5da",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "patch-1",
      "headRefOid": "5b3b05617536d43164ac5eba14ab08ecd707a6d0",
      "closedAt": "2024-11-05T15:11:14Z",
      "mergedAt": "2024-11-05T15:11:14Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "7c482e2e9e17f568f9a780e65b2553dbc511f507"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86QAAtc",
          "commit": {
            "abbreviatedOid": "5b3b056"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-05T15:11:07Z",
          "updatedAt": "2024-11-05T15:11:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOJ6_NW86CFrVo",
      "title": "Add openid-federation ACME identifier type",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/11",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reintroduces the addition of an ACME identifier type, since the certs are not for DNS names.",
      "createdAt": "2024-11-15T20:31:46Z",
      "updatedAt": "2024-11-18T16:47:55Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "editorial2",
      "baseRefOid": "c4603337df3ba57d041986eb51e3a1f98e1ba7b3",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "inahga/resource-type",
      "headRefOid": "b58db54c928722ff886421b3d1d148298ee4b3aa",
      "closedAt": "2024-11-18T16:47:55Z",
      "mergedAt": "2024-11-18T16:47:55Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "e25b6ae1f3387405d0efdf7018135ccce67058d9"
      },
      "comments": [
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "@branlwyd I could use your review too.",
          "createdAt": "2024-11-15T20:32:37Z",
          "updatedAt": "2024-11-15T20:32:37Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "I have rebased to get this PR merged to the editorial2 branch, therefore I have resolved the conflicts.\r\n\r\nwe will have a final review on the editorial2 branch before the merge to the main branch",
          "createdAt": "2024-11-18T16:47:29Z",
          "updatedAt": "2024-11-18T16:47:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86RaOVN",
          "commit": {
            "abbreviatedOid": "f408830"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-15T20:34:21Z",
          "updatedAt": "2024-11-15T20:34:21Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Raised this question in channel, but where are we retrieving the Entity Configuration from? Presumably the Issuer is reaching out to the Requestor at `https://requestor.example.com/.well-known/openid-federation`.\r\n\r\nIf this is the case, we have to consider how we would derive the discovery URL from the requestor's newOrder. If the requestor supplies `https://requestor.example.com/oidc/rp`, where is the Entity Configuration stored?",
              "createdAt": "2024-11-15T20:34:21Z",
              "updatedAt": "2024-11-15T20:34:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rale6",
          "commit": {
            "abbreviatedOid": "146d240"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-15T21:10:18Z",
          "updatedAt": "2024-11-15T21:10:18Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "This was a source of some confusion, I think a holdover from a previous iteration. The challenge doesn't provide domain validation.",
              "createdAt": "2024-11-15T21:10:18Z",
              "updatedAt": "2024-11-15T21:10:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86RjDnO",
          "commit": {
            "abbreviatedOid": "146d240"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-11-18T08:49:27Z",
          "updatedAt": "2024-11-18T08:51:04Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n- It extends the ACME newOrder resource, as defined in Section 7.4 of [RFC8555], defining a new payload identifer type\r\n```",
              "createdAt": "2024-11-18T08:49:27Z",
              "updatedAt": "2024-11-18T08:51:05Z"
            },
            {
              "originalPosition": 90,
              "body": "```suggestion\r\n* Verifies that the requested `openid-federation` value matches the `sub`\r\n  parameter of the requestor's Entity Configuration. Since the Entity\r\n  Configuration MUST contain at most one Entity Identifier, this effectively\r\n  means this challenge type works with requests for a single Federation Entity\r\n  only.\r\n```",
              "createdAt": "2024-11-18T08:50:47Z",
              "updatedAt": "2024-11-18T08:51:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rn8i1",
          "commit": {
            "abbreviatedOid": "f408830"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T16:42:11Z",
          "updatedAt": "2024-11-18T16:42:11Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "See: https://openid.net/specs/openid-federation-1_0.html#section-9\r\n\r\nwe can use a ref to that specific Section ",
              "createdAt": "2024-11-18T16:42:11Z",
              "updatedAt": "2024-11-18T16:42:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rn9Kt",
          "commit": {
            "abbreviatedOid": "402f3cf"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-18T16:43:16Z",
          "updatedAt": "2024-11-18T16:43:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86Rn9bY",
          "commit": {
            "abbreviatedOid": "f408830"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T16:43:42Z",
          "updatedAt": "2024-11-18T16:43:43Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Thanks, will work on this section more in another PR.",
              "createdAt": "2024-11-18T16:43:43Z",
              "updatedAt": "2024-11-18T16:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rn_Cm",
          "commit": {
            "abbreviatedOid": "873db27"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T16:46:36Z",
          "updatedAt": "2024-11-18T16:46:36Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2024-11-18T16:46:36Z",
              "updatedAt": "2024-11-18T16:46:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 12,
      "id": "PR_kwDOJ6_NW86COUXy",
      "title": "fix: editorials and terminology used",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/12",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This PR alignes terminology, in particular\r\n\r\n- replaces Entity Statement with Subordinate Statement, to be more clear about the type of Entity Statement used and therefore aligned with the current Federation Draft\r\n- remove the word \"Connect\" in OpenID Federation\r\n- uses the term Certificate Issuer instead of Issuer alone\r\n- use more normative language\r\n- removes some useless remark\r\n\r\nGenerally this PR facilitate the further works of:\r\n\r\n- reducing duplication, in the text we might see some duplicated words about the check and the overall verification mechanism\r\n- introducing sequence diagrams",
      "createdAt": "2024-11-18T10:15:53Z",
      "updatedAt": "2024-11-19T15:17:23Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "7c482e2e9e17f568f9a780e65b2553dbc511f507",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "editorial2",
      "headRefOid": "68e39b51ddec34ac9f39af0aba61516ac309f973",
      "closedAt": "2024-11-19T15:17:22Z",
      "mergedAt": "2024-11-19T15:17:22Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "e75f931bfd51f13af8e0201e18a6a37b960ed141"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86RnXEb",
          "commit": {
            "abbreviatedOid": "c460333"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Largely LGTM",
          "createdAt": "2024-11-18T15:43:56Z",
          "updatedAt": "2024-11-18T15:55:36Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "```suggestion\r\n    - The Requestor adds the Trust Chain JWT header parameter related to itself.\r\n      This option is RECOMMENDED since it reduces the effort of the Certificate Issuer in\r\n```\r\nEditorial",
              "createdAt": "2024-11-18T15:43:56Z",
              "updatedAt": "2024-11-18T15:55:36Z"
            },
            {
              "originalPosition": 219,
              "body": "```suggestion\r\n    - The Requestor doesn't add the Trust Chain in the request. The Certificate Issuer\r\n      MUST start a [Federation Entity\r\n      Discovery](https://openid.net/specs/openid-federation-1_0.html#section-8)\r\n      to obtain the Trust Chain related to the Requestor.\r\n```\r\nSimilar to above, reads a little bit easier.",
              "createdAt": "2024-11-18T15:45:18Z",
              "updatedAt": "2024-11-18T15:55:36Z"
            },
            {
              "originalPosition": 277,
              "body": "I think this sentence is unnecessary? The certificate issuer shouldn't have to enumerate all keys, since in this changeset the requestor is REQUIRED to include valid key ID.",
              "createdAt": "2024-11-18T15:48:14Z",
              "updatedAt": "2024-11-18T15:55:36Z"
            },
            {
              "originalPosition": 289,
              "body": "```suggestion\r\n    containing a signed JWT and representing the Trust Chain of the Requestor.\r\n```\r\neditorial",
              "createdAt": "2024-11-18T15:48:31Z",
              "updatedAt": "2024-11-18T15:55:36Z"
            },
            {
              "originalPosition": 330,
              "body": "As earlier, since the requestor is now required to provide the `kid`, this can be reworded.\r\n\r\nMaybe something like \"Only keys in the entity configuration matching the `kid` in the requestor's challenge response are considered.\"",
              "createdAt": "2024-11-18T15:53:09Z",
              "updatedAt": "2024-11-18T15:55:36Z"
            },
            {
              "originalPosition": 374,
              "body": "```suggestion\r\nA Requestor SHOULD request the revocation of its X.509 Certificate when the related\r\ncryptographic material is revoked and published in the Federation Historical Key\r\nRegistry.\r\n```\r\neditorial, duplicate words",
              "createdAt": "2024-11-18T15:55:19Z",
              "updatedAt": "2024-11-18T15:55:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rx1zn",
          "commit": {
            "abbreviatedOid": "16a2f1b"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T15:06:43Z",
          "updatedAt": "2024-11-19T15:06:43Z",
          "comments": [
            {
              "originalPosition": 324,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-11-19T15:06:43Z",
              "updatedAt": "2024-11-19T15:06:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rx4Rp",
          "commit": {
            "abbreviatedOid": "1702e92"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T15:10:12Z",
          "updatedAt": "2024-11-19T15:10:12Z",
          "comments": [
            {
              "originalPosition": 238,
              "body": "```suggestion\r\nBelow is a non-normative example about the Credential Issuer metadata object. All the parameters contained within it are defined in the [RFC8555].\r\n```",
              "createdAt": "2024-11-19T15:10:12Z",
              "updatedAt": "2024-11-19T15:10:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rx8Uq",
          "commit": {
            "abbreviatedOid": "82e1688"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T15:16:03Z",
          "updatedAt": "2024-11-19T15:16:03Z",
          "comments": [
            {
              "originalPosition": 378,
              "body": "```suggestion\r\n  [OPENID-FED]. Since the Requestor MUST provide a `kid` value in its challenge response,\r\n  only keys (JWKs) in the Entity Configuration with a matching `kid` value are\r\n```",
              "createdAt": "2024-11-19T15:16:03Z",
              "updatedAt": "2024-11-19T15:16:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Rx8tn",
          "commit": {
            "abbreviatedOid": "82e1688"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-19T15:16:37Z",
          "updatedAt": "2024-11-19T15:16:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOJ6_NW86CeFXR",
      "title": "Grammar, spelling, and an initial IANA Considerations section",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/16",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I pulled `OpenIdFederationEntityId` out of thin air, we should ensure `id` is capitalized the way we want, and consider pulling the second out to `identifier` to match 1.3.6.1.5.5.7.8.3 `id-on-permanentIdentifier`, but this is only intended as a first stab.",
      "createdAt": "2024-11-20T04:14:59Z",
      "updatedAt": "2024-11-22T07:53:23Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e75f931bfd51f13af8e0201e18a6a37b960ed141",
      "headRepository": "jcjones/draft-demarco-acme-openid-federation",
      "headRefName": "main",
      "headRefOid": "7e4d83f23f7fa3ff85ca9c8f2966313308c7dd0f",
      "closedAt": "2024-11-22T07:53:22Z",
      "mergedAt": "2024-11-22T07:53:22Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "f5878af0534c2c884ae74aef326ac79090e27e4c"
      },
      "comments": [
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "Closes, or at least overlaps with https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/14",
          "createdAt": "2024-11-21T17:42:35Z",
          "updatedAt": "2024-11-21T17:42:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86SPhLi",
          "commit": {
            "abbreviatedOid": "7e4d83f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-22T07:51:23Z",
          "updatedAt": "2024-11-22T07:51:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOJ6_NW86CuDBt",
      "title": "Reword metadata section for clarity",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/17",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This section is somewhat awkwardly worded. Reword to make it clear that we're taking the ACME directory and putting it in the entity configuration.",
      "createdAt": "2024-11-21T20:04:50Z",
      "updatedAt": "2024-11-22T07:54:44Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e75f931bfd51f13af8e0201e18a6a37b960ed141",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "inahga/entity-configuration-metadata",
      "headRefOid": "c1c0b628e93082257b2506d6ab6431c711c28812",
      "closedAt": "2024-11-22T07:54:44Z",
      "mergedAt": "2024-11-22T07:54:44Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "d657adb592006d98b9bbe29106497f8e4c7001f1"
      },
      "comments": [
        {
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "body": "@divergentdave brings up a good point about clients using the directory in the entity configuration. I believe that's the intent of having the whole directory in the entity configuration, so make this an explicit requirement in [c1c0b62](https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/17/commits/c1c0b628e93082257b2506d6ab6431c711c28812).",
          "createdAt": "2024-11-21T20:37:21Z",
          "updatedAt": "2024-11-21T20:37:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86SPjDn",
          "commit": {
            "abbreviatedOid": "c1c0b62"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-22T07:54:34Z",
          "updatedAt": "2024-11-22T07:54:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOJ6_NW86CxwOX",
      "title": "fix: all the the keys and not federation entity keys only",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/20",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This PR\r\n\r\n- fix the inconsistency we have mentioning the federation entity keys instead of all the jwks made available through the entity configuration\r\n- Resolves https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/18",
      "createdAt": "2024-11-22T08:16:41Z",
      "updatedAt": "2024-11-29T09:47:32Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "d657adb592006d98b9bbe29106497f8e4c7001f1",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "all-jwks",
      "headRefOid": "8623a3ae8973310f7a4dcdb310ab023c7d6aaa9d",
      "closedAt": "2024-11-29T09:47:32Z",
      "mergedAt": "2024-11-29T09:47:32Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "638608e286c1969155ac14730455791f608b8be1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86ST3nO",
          "commit": {
            "abbreviatedOid": "5e36f06"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-22T15:05:16Z",
          "updatedAt": "2024-11-22T15:06:17Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nother cryptographic keys published in the Requestor's Entity Configuration.\r\n```\r\neditorial: maybe reads better?",
              "createdAt": "2024-11-22T15:05:16Z",
              "updatedAt": "2024-11-22T15:06:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOJ6_NW86CyAO7",
      "title": "fix: nonce endpoint is not protected",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/22",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "this PR resolves https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/19",
      "createdAt": "2024-11-22T08:39:34Z",
      "updatedAt": "2024-11-29T09:46:38Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "d657adb592006d98b9bbe29106497f8e4c7001f1",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "nonce-withouth-auth",
      "headRefOid": "31b054209fdbddf2b0d3170cde95d0299f9ad76c",
      "closedAt": "2024-11-29T09:46:38Z",
      "mergedAt": "2024-11-29T09:46:38Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "82f2fab36558f6c585f4a87432cba0060d07ed23"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86ST1_G",
          "commit": {
            "abbreviatedOid": "31b0542"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-22T15:02:33Z",
          "updatedAt": "2024-11-22T15:02:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 23,
      "id": "PR_kwDOJ6_NW86D7nta",
      "title": "editorial: reword discovery for clarity",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/23",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Precondition 4 is always true, and doesn't seem applicable to the statement we're making here. I also reworded slightly.\r\n\r\nIn Overview I also fix the formatting slightly--the indentation was too deep causing it to be rendered as a code block.",
      "createdAt": "2024-12-03T18:33:18Z",
      "updatedAt": "2024-12-10T15:44:27Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "ee391f959f71bbfd6f8bea658749c280926033f8",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "inahga/editorial",
      "headRefOid": "8b659b0a28b3f62bb1a13925cfa0161d44f80408",
      "closedAt": "2024-12-10T15:44:27Z",
      "mergedAt": "2024-12-10T15:44:27Z",
      "mergedBy": "inahga",
      "mergeCommit": {
        "oid": "f3796ced732711b2652217b93df0a2ec8638512e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86UY2tV",
          "commit": {
            "abbreviatedOid": "e77f935"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-09T17:43:29Z",
          "updatedAt": "2024-12-09T17:43:29Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\n  - The Requestor adds the Trust Chain JWT header parameter related to itself, as described in Section 4.3. of [OPENID-FED].\r\n```",
              "createdAt": "2024-12-09T17:43:29Z",
              "updatedAt": "2024-12-09T17:43:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86UY23r",
          "commit": {
            "abbreviatedOid": "e77f935"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "a little comment",
          "createdAt": "2024-12-09T17:43:47Z",
          "updatedAt": "2024-12-09T17:43:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOJ6_NW86EN0qX",
      "title": "authors: add Ameer",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/26",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-05T17:31:12Z",
      "updatedAt": "2024-12-09T17:41:29Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "638608e286c1969155ac14730455791f608b8be1",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "inahga/contributors",
      "headRefOid": "86c2c8ef9783d2dfa2e530daf2494a4487de6c0c",
      "closedAt": "2024-12-09T17:41:29Z",
      "mergedAt": "2024-12-09T17:41:28Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "ee391f959f71bbfd6f8bea658749c280926033f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86UY1FG",
          "commit": {
            "abbreviatedOid": "86c2c8e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-09T17:41:21Z",
          "updatedAt": "2024-12-09T17:41:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOJ6_NW86EN42t",
      "title": "High level sequence diagram",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/27",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/10\r\n",
      "createdAt": "2024-12-05T17:41:56Z",
      "updatedAt": "2025-01-07T10:34:23Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "07d9e1cc40dce10212160dac8d7c1059ff538b49",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "inahga/sequence",
      "headRefOid": "d5a28f47412b5be00c78c3e8353ae8302ea9908e",
      "closedAt": "2025-01-07T10:34:23Z",
      "mergedAt": "2025-01-07T10:34:22Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "76771e0e00e8f820ecaac8b62239e3f277b24fe0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86Vfsc0",
          "commit": {
            "abbreviatedOid": "058325e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T08:09:31Z",
          "updatedAt": "2024-12-17T08:09:31Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nThe following diagram illustrates a successful interaction between Issuer and\r\nRequestor to retrieve an X.509 Certificate. In the diagram there is flow about a Requestor that has already\r\ndiscovered the Issuer\r\n```\r\n\r\nit is not clear to me the presence of this requirement about the acme account creation.\r\nUsing an automatic issuance the acme account would not be required, or differently, it would be created during the first interaction between a requestor and a issuer, on the fly.\r\n\r\nWe need to further align on this element.",
              "createdAt": "2024-12-17T08:09:31Z",
              "updatedAt": "2024-12-17T08:09:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86VftHo",
          "commit": {
            "abbreviatedOid": "058325e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T08:10:46Z",
          "updatedAt": "2024-12-17T08:10:47Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n```\r\n\r\nI will move this seq diagram in a file within the folder called `diagrams` and convert it to ascii arts",
              "createdAt": "2024-12-17T08:10:47Z",
              "updatedAt": "2024-12-17T08:10:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86VjW0e",
          "commit": {
            "abbreviatedOid": "058325e"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T14:40:48Z",
          "updatedAt": "2024-12-17T14:44:37Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "RFC XML supports a `src` attribute on `<figure>` elements to provide a separate graphics file, but we'll still need an ASCII art text representation to fall back to. `kramdown-rfc2629` supports [running a number of tools](https://github.com/cabo/kramdown-rfc/blob/18d5a95dee9ea9d180a37d8c8a4c5ce1b806339f/lib/kramdown-rfc2629.rb#L581) to turn inline diagram DSLs into SVGs, including `aasvg`, `plantuml`, etc., but not Mermaid, it looks like.",
              "createdAt": "2024-12-17T14:40:48Z",
              "updatedAt": "2024-12-17T14:44:37Z"
            },
            {
              "originalPosition": 37,
              "body": "Since trust chains are asymmetric, I recommend changing this to \"Determine trust chain from Issuer's trust anchors to Requestor\".",
              "createdAt": "2024-12-17T14:41:43Z",
              "updatedAt": "2024-12-17T14:44:37Z"
            },
            {
              "originalPosition": 31,
              "body": "Would it make sense to split the Requestor participant in this diagram in two, into the Requestor-as-ACME client and the server that hosts the Requestor's OpenID Federation entity?",
              "createdAt": "2024-12-17T14:43:45Z",
              "updatedAt": "2024-12-17T14:44:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Vjn-k",
          "commit": {
            "abbreviatedOid": "058325e"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T15:08:26Z",
          "updatedAt": "2024-12-17T15:08:26Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I will note the section of ACME that relates to the account. I will also note somewhere a prerequisite of having an ACME account.\r\n\r\n",
              "createdAt": "2024-12-17T15:08:26Z",
              "updatedAt": "2024-12-17T15:15:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Vjw_r",
          "commit": {
            "abbreviatedOid": "058325e"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T15:19:31Z",
          "updatedAt": "2024-12-17T15:19:31Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I will take this suggestion, and also clarify definitions of the Requestor and Requestor-as-ACME client.",
              "createdAt": "2024-12-17T15:19:31Z",
              "updatedAt": "2024-12-17T15:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86XCTJm",
          "commit": {
            "abbreviatedOid": "e5b5fb2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T10:29:50Z",
          "updatedAt": "2025-01-07T10:29:50Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n  A ->> A: Check challenge sig is signed with key in<br>Entity Configuration\r\n```",
              "createdAt": "2025-01-07T10:29:50Z",
              "updatedAt": "2025-01-07T10:29:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86XCTUj",
          "commit": {
            "abbreviatedOid": "e5b5fb2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T10:30:10Z",
          "updatedAt": "2025-01-07T10:30:10Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "```suggestion\r\n    A <<->> F: Determine Trust Chain from<br>Issuer's Trust Anchors to Requestor<br>(OpenID Federation Discovery)\r\n```",
              "createdAt": "2025-01-07T10:30:10Z",
              "updatedAt": "2025-01-07T10:30:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86XCTid",
          "commit": {
            "abbreviatedOid": "e5b5fb2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T10:30:30Z",
          "updatedAt": "2025-01-07T10:30:30Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\n  A ->> A: Check Entity Configuration sub matches<br>Entity identifier in the order\r\n```",
              "createdAt": "2025-01-07T10:30:30Z",
              "updatedAt": "2025-01-07T10:30:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86XCTym",
          "commit": {
            "abbreviatedOid": "e5b5fb2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T10:30:54Z",
          "updatedAt": "2025-01-07T10:30:54Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\n  A -->> RC: Newly issued X.509 Certificate \ud83c\udf89\r\n```",
              "createdAt": "2025-01-07T10:30:54Z",
              "updatedAt": "2025-01-07T10:30:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOJ6_NW86EvTMU",
      "title": "Add Brandon Pitman as author.",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/28",
      "state": "MERGED",
      "author": "branlwyd",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-10T17:28:21Z",
      "updatedAt": "2024-12-10T19:47:47Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "f3796ced732711b2652217b93df0a2ec8638512e",
      "headRepository": "branlwyd/draft-demarco-acme-openid-federation",
      "headRefName": "bran/author",
      "headRefOid": "4435e54ed3208cd1271155226c216053d9171eb0",
      "closedAt": "2024-12-10T19:47:47Z",
      "mergedAt": "2024-12-10T19:47:47Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "b2b3d1f5eecc6864a7d6c6d387b03031fc751593"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86UmQY-",
          "commit": {
            "abbreviatedOid": "4435e54"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-10T17:28:51Z",
          "updatedAt": "2024-12-10T17:28:52Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "N.B. my understanding is that authors will typically use a personal email address, rather than one connected to an organization. This is up to personal preference, of course.",
              "createdAt": "2024-12-10T17:28:52Z",
              "updatedAt": "2024-12-10T17:28:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86UnJLm",
          "commit": {
            "abbreviatedOid": "4435e54"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-10T18:50:39Z",
          "updatedAt": "2024-12-10T18:50:39Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "@inahga ^",
              "createdAt": "2024-12-10T18:50:39Z",
              "updatedAt": "2024-12-10T18:50:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86UnpXy",
          "commit": {
            "abbreviatedOid": "4435e54"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-10T19:47:18Z",
          "updatedAt": "2024-12-10T19:47:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86Unple",
          "commit": {
            "abbreviatedOid": "4435e54"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-10T19:47:43Z",
          "updatedAt": "2024-12-10T19:47:43Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "no particular rules, I saw authors with both personal or org e-mail addresses",
              "createdAt": "2024-12-10T19:47:43Z",
              "updatedAt": "2024-12-10T19:47:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOJ6_NW86FE2Fb",
      "title": "Add acme_requestor metadata",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/29",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/24\r\n\r\nI think this also relates to https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/21.",
      "createdAt": "2024-12-12T22:07:44Z",
      "updatedAt": "2024-12-20T00:02:21Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "b2b3d1f5eecc6864a7d6c6d387b03031fc751593",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "inahga/metadata",
      "headRefOid": "8c5f5488d2ad3b725d41e4860457f6583574f997",
      "closedAt": "2024-12-20T00:02:21Z",
      "mergedAt": "2024-12-20T00:02:21Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "07d9e1cc40dce10212160dac8d7c1059ff538b49"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86Vfnt8",
          "commit": {
            "abbreviatedOid": "e7b20d2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T07:58:30Z",
          "updatedAt": "2024-12-17T07:58:30Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n   Issuer as configured in the federation. When used, the Trust Mark MUST be\r\n```\r\n\r\nnow in openidfed it is a defined term.",
              "createdAt": "2024-12-17T07:58:30Z",
              "updatedAt": "2024-12-17T07:58:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Vfo9L",
          "commit": {
            "abbreviatedOid": "e7b20d2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T08:01:29Z",
          "updatedAt": "2024-12-17T08:01:29Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n\r\nThis section contains the description of the Entity's metadata in its Entity Configuration, enabling the interoperability between the Issuer and the Requestor.\r\n\r\n```",
              "createdAt": "2024-12-17T08:01:29Z",
              "updatedAt": "2024-12-17T15:22:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86VfpNK",
          "commit": {
            "abbreviatedOid": "e7b20d2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T08:02:05Z",
          "updatedAt": "2024-12-17T08:02:06Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "```suggestion\r\nAfter X.509 Certificate issuance, the Requestor MAY remove the `acme_requestor`\r\n```",
              "createdAt": "2024-12-17T08:02:05Z",
              "updatedAt": "2024-12-17T08:02:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86VfqOK",
          "commit": {
            "abbreviatedOid": "e7b20d2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T08:04:23Z",
          "updatedAt": "2024-12-17T08:04:23Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "what if the requestor does not remove those jwks?\r\n\r\nbe the issuer able to inspect if those requestor's jwks was already issued in the form of x.509 certificates and if not expired yet no action, or it should be mandated to reissue the certificates?\r\n\r\nthe key element is that it's up to the requestor specifying the key used for the x.509 request, this makes the presence of old/already issued public key impactless for the issuer ",
              "createdAt": "2024-12-17T08:04:23Z",
              "updatedAt": "2024-12-17T08:04:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Vkh6n",
          "commit": {
            "abbreviatedOid": "e7b20d2"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T16:13:21Z",
          "updatedAt": "2024-12-17T16:13:21Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "I will elaborate on this section a bit.",
              "createdAt": "2024-12-17T16:13:21Z",
              "updatedAt": "2024-12-17T16:13:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86V_dOc",
          "commit": {
            "abbreviatedOid": "8c5f548"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-20T00:02:12Z",
          "updatedAt": "2024-12-20T00:02:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOJ6_NW86Fhne-",
      "title": "Make entity_id required",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/30",
      "state": "MERGED",
      "author": "inahga",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/15",
      "createdAt": "2024-12-17T17:08:17Z",
      "updatedAt": "2025-01-07T10:28:29Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "07d9e1cc40dce10212160dac8d7c1059ff538b49",
      "headRepository": "inahga/draft-demarco-acme-openid-federation",
      "headRefName": "inahga/15",
      "headRefOid": "ab8e4ebd16bd22ea030b34143d7466fa614f723f",
      "closedAt": "2025-01-07T10:28:28Z",
      "mergedAt": "2025-01-07T10:28:28Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "6d4c2a594d369625a239bdf660d4a4d35233b53d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86VlI9q",
          "commit": {
            "abbreviatedOid": "64bc8ea"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T17:09:04Z",
          "updatedAt": "2024-12-17T17:09:05Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Editorial: The only difference between the examples is one optional field, so I don't think both are necessary.",
              "createdAt": "2024-12-17T17:09:04Z",
              "updatedAt": "2024-12-17T17:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86V_dx7",
          "commit": {
            "abbreviatedOid": "64bc8ea"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-20T00:04:44Z",
          "updatedAt": "2024-12-20T00:04:44Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "`Otherwise,` ?\r\n\r\nis that a typo?",
              "createdAt": "2024-12-20T00:04:44Z",
              "updatedAt": "2024-12-20T00:04:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86V_d1n",
          "commit": {
            "abbreviatedOid": "64bc8ea"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-20T00:05:05Z",
          "updatedAt": "2024-12-20T00:05:06Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n    includes this field; otherwise, the ACME server MUST start Federation Entity\r\n```",
              "createdAt": "2024-12-20T00:05:05Z",
              "updatedAt": "2024-12-20T00:05:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86WF3Xy",
          "commit": {
            "abbreviatedOid": "64bc8ea"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-20T18:33:30Z",
          "updatedAt": "2024-12-20T18:33:30Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "[Yes, that was fixed in the last PR.](https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/29/files#diff-a10546b011a74e6e9acf1e13c8e156ab69679b6d20d778d806b69054d1b72ba4L388)",
              "createdAt": "2024-12-20T18:33:30Z",
              "updatedAt": "2024-12-20T18:33:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86XCREp",
          "commit": {
            "abbreviatedOid": "308334b"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-07T10:25:53Z",
          "updatedAt": "2025-01-07T10:25:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86XCR_v",
          "commit": {
            "abbreviatedOid": "308334b"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T10:27:40Z",
          "updatedAt": "2025-01-07T10:27:40Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Entity Identifier it is not a defined term yet, therefore it should be Entity identifier",
              "createdAt": "2025-01-07T10:27:40Z",
              "updatedAt": "2025-01-07T10:27:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86XCSIA",
          "commit": {
            "abbreviatedOid": "308334b"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T10:27:55Z",
          "updatedAt": "2025-01-07T10:27:56Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nentity_identifier (required, string):  the Entity identifier of the Requestor.\r\n```",
              "createdAt": "2025-01-07T10:27:55Z",
              "updatedAt": "2025-01-07T10:27:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOJ6_NW86G80ku",
      "title": "fix: generalization of the role of the Issuer within the federation",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/31",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This PR clarifies that the Issuer MUST implement ACME and it might match the trust anchor or one of its intermediates",
      "createdAt": "2025-01-07T15:02:35Z",
      "updatedAt": "2025-01-07T21:35:55Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "76771e0e00e8f820ecaac8b62239e3f277b24fe0",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "iss-1",
      "headRefOid": "f20e7055743879a5fcd40c98c55c805c35ee390c",
      "closedAt": "2025-01-07T21:35:55Z",
      "mergedAt": "2025-01-07T21:35:55Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "338de0daeb77e37e02a4b3da4d7f48c85a45607f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86XEqMm",
          "commit": {
            "abbreviatedOid": "f20e705"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-07T15:07:13Z",
          "updatedAt": "2025-01-07T15:07:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86XGHb6",
          "commit": {
            "abbreviatedOid": "f20e705"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-07T17:13:18Z",
          "updatedAt": "2025-01-07T17:13:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOJ6_NW86HMuAz",
      "title": "Sequence diagram in ascii arts",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/33",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-09T12:20:09Z",
      "updatedAt": "2025-01-14T14:18:55Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "338de0daeb77e37e02a4b3da4d7f48c85a45607f",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "seq2",
      "headRefOid": "d462427b04bdb8b29117bcfd096ddc1a2bea8ec1",
      "closedAt": "2025-01-14T14:18:55Z",
      "mergedAt": "2025-01-14T14:18:55Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "bfc7b9d18c67a5c514909ba615eb941e0e1847fd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86XaseE",
          "commit": {
            "abbreviatedOid": "3bb4a63"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Nice!",
          "createdAt": "2025-01-09T16:13:27Z",
          "updatedAt": "2025-01-09T16:13:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 34,
      "id": "PR_kwDOJ6_NW86HvHMd",
      "title": "Specify how errors are formatted",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/34",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This addresses #13. I introduce one new problem type for the problem details returned in ACME error responses. This encapsulates an OAuth error code, and thus provides us a way to translate all existing OpenID Federation error codes into an ACME error response. This also requires some additional IANA considerations, in order to set up a registration justifying the `urn:ietf:params:` URI.",
      "createdAt": "2025-01-14T16:40:26Z",
      "updatedAt": "2025-01-21T17:23:01Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "bfc7b9d18c67a5c514909ba615eb941e0e1847fd",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/error-type",
      "headRefOid": "db8a38b27eda4fcf0024194722547847b0cc8855",
      "closedAt": "2025-01-21T15:12:47Z",
      "mergedAt": "2025-01-21T15:12:47Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "0b9cfdda74ef91e37e5b3d7e479bba8f07a2cfc6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86YCNB5",
          "commit": {
            "abbreviatedOid": "7606ecf"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T18:30:44Z",
          "updatedAt": "2025-01-14T18:31:51Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "We probably don't want to use the `ppm` namespace for `acme`\r\n```suggestion\r\n   error type `urn:ietf:params:acme:openid-federation:error:oauthError`,\r\n```\r\n\r\nHaving `acme:acme-` seems redundant so I dropped the second, but we'd want to make the change throughout.",
              "createdAt": "2025-01-14T18:30:44Z",
              "updatedAt": "2025-01-14T18:31:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86YCTJj",
          "commit": {
            "abbreviatedOid": "7606ecf"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-01-14T18:43:54Z",
          "updatedAt": "2025-01-14T18:45:45Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "Let's be clear about where this extension member goes\r\n\r\n```suggestion\r\ncode that caused the error. The problem document for this error type SHOULD include an extension\r\nmember named `error_code`. The `error_code` member SHOULD be set to the OAuth error code,\r\n```",
              "createdAt": "2025-01-14T18:43:54Z",
              "updatedAt": "2025-01-14T18:45:45Z"
            },
            {
              "originalPosition": 74,
              "body": "I am missing why this can't just go as another entry in [ACME Error Types](https://www.iana.org/assignments/acme/acme.xhtml#acme-error-types). We need to justify creating a new registry, particularly for a single value, and I don't see that yet.",
              "createdAt": "2025-01-14T18:45:10Z",
              "updatedAt": "2025-01-14T18:58:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86YDtvj",
          "commit": {
            "abbreviatedOid": "7606ecf"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T22:01:11Z",
          "updatedAt": "2025-01-14T22:01:11Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Good point, will do.",
              "createdAt": "2025-01-14T22:01:11Z",
              "updatedAt": "2025-01-14T22:01:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86YOPwP",
          "commit": {
            "abbreviatedOid": "e4400a4"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-15T20:33:41Z",
          "updatedAt": "2025-01-15T20:33:41Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Since `error` is already in the URN, and [none of the other error types include `error`](https://www.iana.org/assignments/acme/acme.xhtml#acme-error-types), what do you think of this being `openIDFederationEntity`?\r\n\r\n```suggestion\r\n|openIDFederationEntity|An error occurred while resolving an OpenID Federation entity|this document|\r\n```",
              "createdAt": "2025-01-15T20:33:41Z",
              "updatedAt": "2025-01-15T20:34:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Ya2-C",
          "commit": {
            "abbreviatedOid": "060d60f"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-16T19:57:05Z",
          "updatedAt": "2025-01-16T19:57:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86Y4P3K",
          "commit": {
            "abbreviatedOid": "060d60f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-21T14:55:02Z",
          "updatedAt": "2025-01-21T14:55:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86Y4Qex",
          "commit": {
            "abbreviatedOid": "060d60f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-21T14:55:52Z",
          "updatedAt": "2025-01-21T14:55:53Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nFederation Entities. The title of this error type is \"OpenID Federation Error\".\r\n```",
              "createdAt": "2025-01-21T14:55:53Z",
              "updatedAt": "2025-01-21T14:55:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOJ6_NW86Hwa0p",
      "title": "Clean up references",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/35",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This fixes some warnings about broken references, improves formatting of references and links, and fixes links that were pointing to incorrect or nonexistent sections of OpenID Federation 1.0. (presumably because of changes in recent draft versions)\r\n\r\nFor the OpenID Federation 1.0 links to particular sections, I had to include an inline attribute list specifying the fragment to add to the URL. I'm not sure if this is because RFCs have special handling, or because RFCs have bibxml files available. It'd be nice to eliminate the IALs and have the section links populated automatically, but this will work for now.\r\n\r\nFWIW the unused reference removed in the first commit became unused as of PR #3.",
      "createdAt": "2025-01-14T19:12:27Z",
      "updatedAt": "2025-01-21T15:01:36Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "bfc7b9d18c67a5c514909ba615eb941e0e1847fd",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/ref-cleanup",
      "headRefOid": "3a7a3f143af2bb0d3b439a0e34927f61144f7193",
      "closedAt": "2025-01-21T14:58:31Z",
      "mergedAt": "2025-01-21T14:58:31Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "b6749f6b36c851dc00ce042b9f9c372935227254"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86YCxOf",
          "commit": {
            "abbreviatedOid": "3a7a3f1"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-14T19:38:52Z",
          "updatedAt": "2025-01-14T19:38:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86Y4SRy",
          "commit": {
            "abbreviatedOid": "3a7a3f1"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-21T14:58:22Z",
          "updatedAt": "2025-01-21T14:58:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOJ6_NW86HwcY9",
      "title": "Fix Giuseppe's name in authors",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/36",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Giuseppe's name is not handled correctly by heuristics. This explicitly sets the \"initials/surname\" field to fix that, copying from the OPENID-FED reference's authors.",
      "createdAt": "2025-01-14T19:16:43Z",
      "updatedAt": "2025-01-21T15:01:42Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "bfc7b9d18c67a5c514909ba615eb941e0e1847fd",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/giuseppe-ins",
      "headRefOid": "094beac67e0fb7e0428f49cfe5f174aa9d8b5b43",
      "closedAt": "2025-01-21T14:59:02Z",
      "mergedAt": "2025-01-21T14:59:02Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "71210ee4c1b74e78c006531631fd8fbd9dfa0311"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86YDRQj",
          "commit": {
            "abbreviatedOid": "094beac"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-14T20:52:21Z",
          "updatedAt": "2025-01-14T20:52:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOJ6_NW86ICKXX",
      "title": "Remove entity_identifier from challenge response",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/40",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As mentioned in #38, the entity identifier is implicitly known from the parent authorization of the challenge. Thus, it is not necessary to include the identifier in the challenge response.",
      "createdAt": "2025-01-16T16:26:13Z",
      "updatedAt": "2025-01-21T16:13:46Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "bfc7b9d18c67a5c514909ba615eb941e0e1847fd",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/response-remove-identifier",
      "headRefOid": "89b1864b2feb26f775a0403d884d6e69d407fb92",
      "closedAt": "2025-01-21T15:01:31Z",
      "mergedAt": "2025-01-21T15:01:31Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "047d7603793efd1205b1ac1ad4042a2194601800"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "having the nonce, we have everything to link it back to the request and its requestor.",
          "createdAt": "2025-01-21T15:00:34Z",
          "updatedAt": "2025-01-21T15:00:34Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "In practice, implementations should be looking up the information using the challenge's URL, and not the nonce.",
          "createdAt": "2025-01-21T16:13:45Z",
          "updatedAt": "2025-01-21T16:13:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86Ya3_S",
          "commit": {
            "abbreviatedOid": "89b1864"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "The rationale makes sense to me.",
          "createdAt": "2025-01-16T19:59:20Z",
          "updatedAt": "2025-01-16T19:59:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86Y4T9M",
          "commit": {
            "abbreviatedOid": "89b1864"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-21T15:00:45Z",
          "updatedAt": "2025-01-21T15:00:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOJ6_NW86ILysZ",
      "title": "Challenge proves control of entity, not domain",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/44",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This updates the description of the challenge type to clarify that it only proves control of a federation entity, not a domain.",
      "createdAt": "2025-01-17T17:50:40Z",
      "updatedAt": "2025-01-21T15:20:43Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "0b9cfdda74ef91e37e5b3d7e479bba8f07a2cfc6",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/remove-domain-control",
      "headRefOid": "67f6343d23fd03d50c8019fa56826032459042e6",
      "closedAt": "2025-01-21T15:20:40Z",
      "mergedAt": "2025-01-21T15:20:40Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "f3fc270f4d5b9adfa02b4ac1d363bc3b0304ff48"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86Y4Vk-",
          "commit": {
            "abbreviatedOid": "1641af2"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-21T15:03:09Z",
          "updatedAt": "2025-01-21T15:03:09Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nfederation Entity using the trust evaluation mechanism\r\n```",
              "createdAt": "2025-01-21T15:03:09Z",
              "updatedAt": "2025-01-21T15:03:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Y4f-k",
          "commit": {
            "abbreviatedOid": "1641af2"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-21T15:17:18Z",
          "updatedAt": "2025-01-21T15:17:18Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I capitalized `Federation` as well.",
              "createdAt": "2025-01-21T15:17:18Z",
              "updatedAt": "2025-01-21T15:17:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOJ6_NW86INXqr",
      "title": "ACME Challenges are asynchronous and require polling",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/49",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is way too wide, still (https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/41), but it corrects it.\r\n\r\nI did update both the Mermaid and PlantUML diagrams, but I think we can just use the one that generates ASCII well.. Particularly since we probably need to switch to manual sequence diagramming to solve #41 to the IETF's standards.",
      "createdAt": "2025-01-17T23:20:28Z",
      "updatedAt": "2025-01-21T15:10:35Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "bfc7b9d18c67a5c514909ba615eb941e0e1847fd",
      "headRepository": "jcjones/draft-demarco-acme-openid-federation",
      "headRefName": "46-async-challenge",
      "headRefOid": "2bd46ba4673eef8310e9bd3a02bd7378b32913a4",
      "closedAt": "2025-01-21T15:10:35Z",
      "mergedAt": "2025-01-21T15:10:35Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "4a7b81ad907aa3f76998a95ed114c317e1e4e6d7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86Y4Yzm",
          "commit": {
            "abbreviatedOid": "2bd46ba"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-21T15:08:01Z",
          "updatedAt": "2025-01-21T15:08:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "PR_kwDOJ6_NW86JOQ9J",
      "title": "chore: reducing sequence diag width up to ~100",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/50",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Trying to partially resolve https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/41",
      "createdAt": "2025-01-28T13:00:33Z",
      "updatedAt": "2025-01-28T15:30:37Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "f3fc270f4d5b9adfa02b4ac1d363bc3b0304ff48",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "seq4",
      "headRefOid": "2762db81eba24ace54b05b6d69533a47285ea898",
      "closedAt": "2025-01-28T15:30:37Z",
      "mergedAt": "2025-01-28T15:30:37Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "e763d59eb2897bfce13d704dd6c7e06d7ca9b87c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86Zr6lc",
          "commit": {
            "abbreviatedOid": "9ca56bd"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-28T14:27:50Z",
          "updatedAt": "2025-01-28T14:28:36Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "nit: missing the last line",
              "createdAt": "2025-01-28T14:27:50Z",
              "updatedAt": "2025-01-28T14:28:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86Zsfr-",
          "commit": {
            "abbreviatedOid": "9ca56bd"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-28T15:09:56Z",
          "updatedAt": "2025-01-28T15:09:56Z",
          "comments": [
            {
              "originalPosition": 223,
              "body": "```suggestion\r\n| Web Server      |  `-----------'\r\n`-----------------'\r\n```",
              "createdAt": "2025-01-28T15:09:56Z",
              "updatedAt": "2025-01-28T15:10:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 51,
      "id": "PR_kwDOJ6_NW86JPMdC",
      "title": "Use a UTF8String in the other name form",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/51",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #37.",
      "createdAt": "2025-01-28T14:39:06Z",
      "updatedAt": "2025-02-18T16:58:47Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "f3fc270f4d5b9adfa02b4ac1d363bc3b0304ff48",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/asn-1-utf8string",
      "headRefOid": "266428a3a46aa0f8714a6ac4a1d603cd343b5a68",
      "closedAt": "2025-01-28T15:08:18Z",
      "mergedAt": "2025-01-28T15:08:18Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "8b281eea16f09cf8f04943a734d51669872a6b61"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 52,
      "id": "PR_kwDOJ6_NW86JbFvh",
      "title": "Rewrite Discovery Preconditions section",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/52",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This rewrites the Discovery Preconditions section, splitting it in two and moving some other parts to neighboring sections. The text no longer distinguishes between leaf and intermediate federation entities. The options of no discovery/discovery by entity type alone/discovery with trust marks are laid out in the new discovery section. ACME account creation is moved to the overview section, and the procedure there is cleaned up a bit. Closes #48.",
      "createdAt": "2025-01-29T21:24:09Z",
      "updatedAt": "2025-02-18T16:58:59Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e763d59eb2897bfce13d704dd6c7e06d7ca9b87c",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/discovery",
      "headRefOid": "2a51af57accc620f4e6a196a49e2f9d2f8fe5b9d",
      "closedAt": "2025-02-04T18:36:24Z",
      "mergedAt": "2025-02-04T18:36:24Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "5dcc1cbea80db472453c367e07b1efea0ce11c86"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86aGdrR",
          "commit": {
            "abbreviatedOid": "d428628"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I've gone through this yesterday and today feeling like I need to give some sort of feedback, but haven't come up with anything yet to improve on it.\r\n\r\nBy posting this comment, I hope to actually jog my brain into coming up with something useful tomorrow.",
          "createdAt": "2025-01-31T00:17:19Z",
          "updatedAt": "2025-01-31T00:17:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86aaPqD",
          "commit": {
            "abbreviatedOid": "d428628"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2025-02-03T17:24:47Z",
          "updatedAt": "2025-02-03T17:24:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86alvf6",
          "commit": {
            "abbreviatedOid": "d428628"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-04T17:37:06Z",
          "updatedAt": "2025-02-04T17:37:07Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nThe protocol requires the following preconditions are met.\r\n```",
              "createdAt": "2025-02-04T17:37:07Z",
              "updatedAt": "2025-02-04T17:37:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86alvwo",
          "commit": {
            "abbreviatedOid": "d428628"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-04T17:37:38Z",
          "updatedAt": "2025-02-04T17:37:38Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nRequestors that use discovery MAY select any entity with an entity type of\r\n```",
              "createdAt": "2025-02-04T17:37:38Z",
              "updatedAt": "2025-02-04T17:37:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86alv_c",
          "commit": {
            "abbreviatedOid": "d428628"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "two normative language suggestions",
          "createdAt": "2025-02-04T17:38:06Z",
          "updatedAt": "2025-02-04T17:38:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86amBy0",
          "commit": {
            "abbreviatedOid": "2a51af5"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T18:04:52Z",
          "updatedAt": "2025-02-04T18:04:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86amULj",
          "commit": {
            "abbreviatedOid": "2a51af5"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T18:35:59Z",
          "updatedAt": "2025-02-04T18:35:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOJ6_NW86JbKe8",
      "title": "Sign key authorization instead of token",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/53",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This changes the challenge method to include a signature of the key authorization, instead of a signature of the token. I also added a corresponding blurb to the security considerations section. Closes #42.",
      "createdAt": "2025-01-29T21:37:04Z",
      "updatedAt": "2025-02-18T16:59:03Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e763d59eb2897bfce13d704dd6c7e06d7ca9b87c",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/key-auth",
      "headRefOid": "c70a100d8094d7a5f94326c4f0068ad305ad1efe",
      "closedAt": "2025-02-04T17:38:56Z",
      "mergedAt": "2025-02-04T17:38:56Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "824ddee9fe8abf6f5ce8f1fbe8a5ed62fadd1b6f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86aZi1I",
          "commit": {
            "abbreviatedOid": "c70a100"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is correct usage, LGTM.",
          "createdAt": "2025-02-03T16:07:54Z",
          "updatedAt": "2025-02-03T16:07:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86acBE1",
          "commit": {
            "abbreviatedOid": "c70a100"
          },
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-03T21:25:46Z",
          "updatedAt": "2025-02-03T21:25:46Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I'm not certain it's necessary to specify \"encoded in UTF-8\". Per RFC 8555 section 8.1 ([1]), a key authorization is `keyAuthorization = token || '.' || base64url(Thumbprint(accountKey))`. In all extant challenge types (including this one), tokens are restricted to the base64url alphabet, and thus a key authorization is already UTF-8. \"encoded in UTF-8\" implies a further encoding step that isn't necessary, I think. \r\n\r\n[1]: https://datatracker.ietf.org/doc/html/rfc8555#section-8.1",
              "createdAt": "2025-02-03T21:25:46Z",
              "updatedAt": "2025-02-03T21:25:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86acDO3",
          "commit": {
            "abbreviatedOid": "c70a100"
          },
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-03T21:31:15Z",
          "updatedAt": "2025-02-03T21:31:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I have some other concerns about this text, but they're orthogonal to this change, and so I am addressing them in #57.",
              "createdAt": "2025-02-03T21:31:16Z",
              "updatedAt": "2025-02-03T21:31:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86acN6y",
          "commit": {
            "abbreviatedOid": "c70a100"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-03T21:53:01Z",
          "updatedAt": "2025-02-03T21:53:02Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I think explicitly mentioning the encoding makes sense, because the token is presented to us as a JSON string, (a string of Unicode codepoints) and signature algorithms expect a byte string message input. This would work identically if we said to encode the string into bytes using either UTF-8 or ASCII. As a pathological example, if we used UTF-16 or EBCDIC, we'd get a different to-be-signed message.",
              "createdAt": "2025-02-03T21:53:02Z",
              "updatedAt": "2025-02-03T21:53:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86ac6Y8",
          "commit": {
            "abbreviatedOid": "c70a100"
          },
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-03T22:30:50Z",
          "updatedAt": "2025-02-03T22:30:50Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Oh, that's a good point. I agree with your analysis.",
              "createdAt": "2025-02-03T22:30:50Z",
              "updatedAt": "2025-02-03T22:30:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86alwnP",
          "commit": {
            "abbreviatedOid": "c70a100"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T17:38:45Z",
          "updatedAt": "2025-02-04T17:38:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOJ6_NW86J4Ztv",
      "title": "CAA is irrelevant",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/55",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We can't check CAA for non-dnsName identifiers. While the Entity Configuration is marked non-normative, having CAA in there will be confusing.",
      "createdAt": "2025-02-03T17:24:15Z",
      "updatedAt": "2025-02-04T17:40:21Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e763d59eb2897bfce13d704dd6c7e06d7ca9b87c",
      "headRepository": "jcjones/draft-demarco-acme-openid-federation",
      "headRefName": "no-caa",
      "headRefOid": "dae15f909cca0413db71a6c38566d3e267386b7d",
      "closedAt": "2025-02-04T17:40:21Z",
      "mergedAt": "2025-02-04T17:40:21Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "a2e777b17a733703d803d9ce752ca6e39d44ec23"
      },
      "comments": [
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "For tests to pass, will require rebasing atop https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/56",
          "createdAt": "2025-02-03T19:09:56Z",
          "updatedAt": "2025-02-03T19:09:56Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "less is more.",
          "createdAt": "2025-02-04T17:40:13Z",
          "updatedAt": "2025-02-04T17:40:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86ab3NC",
          "commit": {
            "abbreviatedOid": "dae15f9"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM. CAA may still be relevant in a CA that mixes identities of different types, but that's a more advanced application. Plus, `caaIdentities` is optional to begin with, and it wasn't adding anything to this example.",
          "createdAt": "2025-02-03T21:01:43Z",
          "updatedAt": "2025-02-03T21:01:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86alxSu",
          "commit": {
            "abbreviatedOid": "dae15f9"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T17:40:01Z",
          "updatedAt": "2025-02-04T17:40:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOJ6_NW86J5DGt",
      "title": "Update per https://github.blog/changelog/2024-04-16-deprecation-notice-v3-of-the-artifact-actions/",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/56",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/martinthomson/internet-draft-template is updated past the deprecated versions, we must update too, and can sync with the parent.\r\n\r\nThis is the result of:\r\n```sh\r\ngit submodule sync\r\ngit submodule update\r\ncp lib/template/.github/workflows/* .github/workflows\r\n```",
      "createdAt": "2025-02-03T19:00:50Z",
      "updatedAt": "2025-02-04T18:35:25Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "a2e777b17a733703d803d9ce752ca6e39d44ec23",
      "headRepository": "jcjones/draft-demarco-acme-openid-federation",
      "headRefName": "upload-artifact-upgrade",
      "headRefOid": "c3d30b0334819ce8f21d483445ea018ef1388f29",
      "closedAt": "2025-02-04T18:35:25Z",
      "mergedAt": "2025-02-04T18:35:25Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "65a4997e423efd3f13782a0529e5acc7b97e7707"
      },
      "comments": [
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "The makefile's insistence about the state of the python venv is real sketchy on MacOS, hence doing it separately, but I _do_ have a Linux box here.",
          "createdAt": "2025-02-04T18:15:28Z",
          "updatedAt": "2025-02-04T18:15:28Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "The auto-tool wanted to updated CODEOWNERS, too, but I stripped that commit.",
          "createdAt": "2025-02-04T18:27:08Z",
          "updatedAt": "2025-02-04T18:27:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86abSdg",
          "commit": {
            "abbreviatedOid": "57db10c"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "FWIW there are also Makefile targets for this in lib/update.mk, but those do git commits as well",
          "createdAt": "2025-02-03T19:41:59Z",
          "updatedAt": "2025-02-03T19:41:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOJ6_NW86J5_Aj",
      "title": "Clarify construction of signed challenge",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/57",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The existing text about how the ACME requestor should sign the ACME issuer's challenge token had several ambiguities and problems. This change is stacked on top of #53: the problems I am describing are orthogonal to that change. Below, I will reference text assuming #53 is merged.\r\n\r\n> a base64url encoding of a JWT\r\n\r\n- \"a base64url encoding\" isn't specific enough. It makes more sense to me to explicitly require JWS Compact Serialization here, which is consistent with the requirement in OpenID Federation ([1]).\r\n- If this is a signature, then presumably what we are constructing is a JWS. A JWS is a JWT, so this wasn't wrong, but it seems more clear to explicitly say JWS, as otherwise it's unclear how the implementation should represent a signature.\r\n\r\n> It is REQUIRED that this JWT include a `kid` claim corresponding to a valid key.\r\n\r\nIf I'm understanding all this correctly, then `sig` is a JWS whose payload is _not_ a JSON object (it's just the UTF-8 string of the keyauth), and thus it doesn't make sense to talk about a `kid` claim. Rather, there should be a `kid` Header Parameter in the JWS.\r\n\r\nFinally, we should use a `typ` Header Parameter to avoid cross-JWT confusion, per RFC 8725 ([2]). I invented `signed-acme-challenge+jwt` but we can probably do better.\r\n\r\n[1]: https://openid.net/specs/openid-federation-1_0-41.html#section-1.1\r\n[2]: https://www.rfc-editor.org/rfc/rfc8725.html#section-3.11",
      "createdAt": "2025-02-03T21:30:30Z",
      "updatedAt": "2025-02-04T18:37:28Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "a2e777b17a733703d803d9ce752ca6e39d44ec23",
      "headRepository": "tgeoghegan/draft-demarco-acme-openid-federation",
      "headRefName": "signed-challenge-jws",
      "headRefOid": "3bc54449b529188847eed57b3cfc67847ac467fd",
      "closedAt": "2025-02-04T18:37:28Z",
      "mergedAt": "2025-02-04T18:37:28Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "e8ab4baf04b967eb89953ace90dc66c8ff038018"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86amUjo",
          "commit": {
            "abbreviatedOid": "3bc5444"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T18:36:46Z",
          "updatedAt": "2025-02-04T18:36:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOJ6_NW86J6-cs",
      "title": "Remove non-existent response from sequence diagram",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/58",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The diagram shows the requestor POSTing to the challenge at L326, and then the issuer responds at L332 indicating validation has begun. The existing diagram also illustrates a response from issuer to requestor at L372, but that isn't correct: the requestor's request was previously responded to at L332. Validation happens asynchronously from the POST to the challenge, and the requestor learns of its success or failure by polling the authz.\r\n\r\nI'm explaining this rather laboriously so that reviewers can let me know if I've misunderstood how ACME works.",
      "createdAt": "2025-02-04T00:32:58Z",
      "updatedAt": "2025-02-10T18:19:42Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e763d59eb2897bfce13d704dd6c7e06d7ca9b87c",
      "headRepository": "tgeoghegan/draft-demarco-acme-openid-federation",
      "headRefName": "post-challenge-response-flow-diagram",
      "headRefOid": "9c8f79ec5d3492458110f8ff7707a15eda4b76aa",
      "closedAt": "2025-02-10T18:19:42Z",
      "mergedAt": "2025-02-10T18:19:42Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "d8d1268e2b46e048326413777f914b34434d8973"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "each http request must have an http response, the removal of that response introduces an inconsistency in the diag\r\n\r\n",
          "createdAt": "2025-02-04T17:36:09Z",
          "updatedAt": "2025-02-04T17:36:09Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "I view the arrow at line 334 being the response to the POST request, though it could probably use a better label. Thus, this PR is fixing a response arrow that does not have a corresponding request arrow. RFC 8555 says the response should be a 200 OK, with the updated challenge object in the response body.",
          "createdAt": "2025-02-04T17:58:02Z",
          "updatedAt": "2025-02-04T17:58:02Z"
        },
        {
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed that we need to remove that line, because the following line is the async polling to determine just that result. However, we need to also edit the source in `diagrams/plantuml` (heh, we should rename that now), not just the `.md` file. \r\n\r\n```diff\r\ndiff --git a/diagrams/plantuml b/diagrams/plantuml\r\nindex 72ec16e..2d1bb0d 100644\r\n--- a/diagrams/plantuml\r\n+++ b/diagrams/plantuml\r\n@@ -20,7 +20,6 @@ opt If requestor did not provide Trust Chain\r\n   A <<->> F: Determine Trust Chain\\nfrom Issuer's Trust Anchor to Requestor\\n(OpenID Federation Discovery)\r\n end\r\n A ->> A: Evaluate trust chain\r\n-A -->> RC: Respond to POST with validation success\r\n\r\n\r\n loop Poll until authz status is \"valid\" or \"invalid\"\r\n```",
          "createdAt": "2025-02-04T18:37:05Z",
          "updatedAt": "2025-02-04T18:37:05Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "ok, with time and a few more brain I am now able to fully appreciate this PR. thx",
          "createdAt": "2025-02-10T18:19:37Z",
          "updatedAt": "2025-02-10T18:19:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86akJTG",
          "commit": {
            "abbreviatedOid": "1fdbb35"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T15:05:45Z",
          "updatedAt": "2025-02-04T15:05:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86amcn_",
          "commit": {
            "abbreviatedOid": "9c8f79e"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-04T18:51:41Z",
          "updatedAt": "2025-02-04T18:51:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOJ6_NW86KWUiB",
      "title": "Fix example acme_requestor JWKS",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/63",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The example of a JWKS included in an acme_requestor metadata block should not include `iss`, `sub` or `iat`. The protocol text says that the JWK set should be published according to OIDF 5.2.1, which describes metadata keys `signed_jwks_uri`, `jwks_uri` and `jwks`. Only in the first case are `iss`, `sub` or `iat` necessary. Including them when the key set is inline in the metadata is just confusing, because they de facto must have the same `sub` as the enclosing entity configuration.",
      "createdAt": "2025-02-06T23:31:42Z",
      "updatedAt": "2025-02-10T18:17:14Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e8ab4baf04b967eb89953ace90dc66c8ff038018",
      "headRepository": "tgeoghegan/draft-demarco-acme-openid-federation",
      "headRefName": "acme-requestor-example-jwks",
      "headRefOid": "3c70bfecdac403217b7366957a3de6da1afca3a6",
      "closedAt": "2025-02-10T18:17:14Z",
      "mergedAt": "2025-02-10T18:17:14Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "1f8d691946a1bf40a271b16915c79ad8a684c6c3"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "fully approved",
          "createdAt": "2025-02-10T18:17:12Z",
          "updatedAt": "2025-02-10T18:17:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86bYFFB",
          "commit": {
            "abbreviatedOid": "3c70bfe"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-10T18:16:42Z",
          "updatedAt": "2025-02-10T18:16:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOJ6_NW86KeJS6",
      "title": "Converge on \"ACME issuer\" rather than \"provider\"",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/64",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 3 helpfully formalizes the notions of ACME issuers and requestors. However, in the issuer metadata (section 6.4.1), we define the OpenID Federation entity type `acme_provider`. There's no need to introduce two notions of \"issuer\" and \"provider\" that are basically synonymous, so in this commit we use \"issuer\" (in prose) or `acme_issuer` (in JSON documents) consistently.",
      "createdAt": "2025-02-07T21:32:21Z",
      "updatedAt": "2025-02-10T18:16:01Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e8ab4baf04b967eb89953ace90dc66c8ff038018",
      "headRepository": "tgeoghegan/draft-demarco-acme-openid-federation",
      "headRefName": "acme-issuer",
      "headRefOid": "e98df4ed8ac88495e197061197435812267039c8",
      "closedAt": "2025-02-10T18:16:00Z",
      "mergedAt": "2025-02-10T18:16:00Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "621f48c9bd118bd8c49294e2dcbb4358ee736323"
      },
      "comments": [
        {
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My real concern here is using a single, consistent term, and I'm just as happy to use provider/`acme_provider` instead of issuer/`acme_issuer`. It's also possible that I'm missing a valuable, nuanced distinction between an ACME provider and a certificate issuer that is captured by the existing terms.",
          "createdAt": "2025-02-07T21:33:26Z",
          "updatedAt": "2025-02-07T21:33:26Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "yeah, good catch",
          "createdAt": "2025-02-10T18:15:58Z",
          "updatedAt": "2025-02-10T18:15:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86bXMA2",
          "commit": {
            "abbreviatedOid": "e98df4e"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I agree with this. Since the draft uses _issuer_ almost exclusively, naming the entity type the same reduces the number of words used to describe the same entity.",
          "createdAt": "2025-02-10T16:51:23Z",
          "updatedAt": "2025-02-10T16:51:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86bYEoG",
          "commit": {
            "abbreviatedOid": "e98df4e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-10T18:15:48Z",
          "updatedAt": "2025-02-10T18:15:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 66,
      "id": "PR_kwDOJ6_NW86Ln5bS",
      "title": "Editorial fixes",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/66",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This makes several small editorial changes throughout the document.",
      "createdAt": "2025-02-18T16:02:57Z",
      "updatedAt": "2025-04-29T15:12:00Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "d8d1268e2b46e048326413777f914b34434d8973",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/editorial",
      "headRefOid": "a7fc286296ce5d3760486f2fb34e9f6cf5f3bd8a",
      "closedAt": "2025-03-06T16:04:13Z",
      "mergedAt": "2025-03-06T16:04:13Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "c5ba539e3ae0153b89620f65555fc4ef675b7ec3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86dR0Uo",
          "commit": {
            "abbreviatedOid": "a7fc286"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-24T23:26:54Z",
          "updatedAt": "2025-02-24T23:26:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86dg7dl",
          "commit": {
            "abbreviatedOid": "a7fc286"
          },
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-25T23:01:05Z",
          "updatedAt": "2025-02-25T23:01:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86e160v",
          "commit": {
            "abbreviatedOid": "a7fc286"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-06T16:04:05Z",
          "updatedAt": "2025-03-06T16:04:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOJ6_NW86MXOnz",
      "title": "Clarify Ambiguities between OpenID Federation and RFC 5280",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/67",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #47.\r\n\r\nEarlier reviews we had some stumbles over overloaded uses of Trust Root, Leaf, Issuer, and Intermediate, which all have meanings within OpenID Federation as well as in X.509.\r\n\r\nMost of those have already been refactored out, but this PR catches the last ambiguities I could find.\r\n\r\nTo take them one by one:\r\n-  Replaces the phrase `trust anchor and its intermediates` with `Certification Authority` (prefixed with `X.509` in the _Abstract_, for extra precision), which is a defined term from RFC 5280.\r\n- Updates `certificate authority` to the RFC 5280 term `Certification Authority`.\r\n- Removes the term `Intermediate` from the _Terminology_, as it is no longer used.\r\n- In the Terminology section, changes `Issuer`, which can be confused with a Trust Mark Issuer, to `Certificate Issuer`, which is already how we write it elsewhere in the document.\r\n- Clarifies in the _Publication of the Certificates within the Federation_ section that publication can only be done when the certificate is issued by the `Superior Entity`, not just any Certification Authority.",
      "createdAt": "2025-02-24T22:51:02Z",
      "updatedAt": "2025-03-06T17:28:55Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "d8d1268e2b46e048326413777f914b34434d8973",
      "headRepository": "jcjones/draft-demarco-acme-openid-federation",
      "headRefName": "47-clarify",
      "headRefOid": "ba325005f35e1ada17435a4bf2dbd4982c039f5a",
      "closedAt": "2025-03-06T16:57:36Z",
      "mergedAt": "2025-03-06T16:57:36Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "42478455da19f59eb2afe3644833e16a137c4e90"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86dRm5A",
          "commit": {
            "abbreviatedOid": "b8e8923"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-24T22:56:32Z",
          "updatedAt": "2025-02-24T22:59:04Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I think this might be an incorrect change, as the existing text is talking about how to reflect the X.509 certificates back into OpenID Federation subordinate statements. We could fix this by instead by using the term \"Superior Entity\", defined in OpenID Federation.",
              "createdAt": "2025-02-24T22:56:32Z",
              "updatedAt": "2025-02-24T22:59:04Z"
            },
            {
              "originalPosition": 27,
              "body": "We should add \"Superior Entity\" to this list.",
              "createdAt": "2025-02-24T22:58:47Z",
              "updatedAt": "2025-02-24T22:59:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86dR0xt",
          "commit": {
            "abbreviatedOid": "b8e8923"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-24T23:28:18Z",
          "updatedAt": "2025-02-24T23:28:19Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I don't think it's incorrect, by my understanding, as it would be the CA doing the work to publish after having issued the certificate, but I agree Superior Entity is much better.\r\n```suggestion\r\n  publication of the X.509 Certificates, by a Superior Entity, that\r\n```",
              "createdAt": "2025-02-24T23:28:18Z",
              "updatedAt": "2025-02-24T23:28:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86dR1wP",
          "commit": {
            "abbreviatedOid": "b8e8923"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-24T23:31:01Z",
          "updatedAt": "2025-02-24T23:31:01Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "In https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/67/commits/66aba9b371a333bc1e993f4ac59290690aabc1de",
              "createdAt": "2025-02-24T23:31:01Z",
              "updatedAt": "2025-02-24T23:31:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86dR43g",
          "commit": {
            "abbreviatedOid": "66aba9b"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-24T23:39:19Z",
          "updatedAt": "2025-02-24T23:39:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86dhQBt",
          "commit": {
            "abbreviatedOid": "66aba9b"
          },
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-26T00:17:32Z",
          "updatedAt": "2025-02-26T00:18:25Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nissued by an X.509 Certification Authority through the ACME protocol to the\r\n```",
              "createdAt": "2025-02-26T00:17:32Z",
              "updatedAt": "2025-02-26T00:18:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86e1-JV",
          "commit": {
            "abbreviatedOid": "2382570"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-06T16:07:48Z",
          "updatedAt": "2025-03-06T16:07:48Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "```suggestion\r\nWhen the Certificate Issuer is the Superior Entity, the X.509\r\n```",
              "createdAt": "2025-03-06T16:07:48Z",
              "updatedAt": "2025-03-06T16:07:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86e2gWe",
          "commit": {
            "abbreviatedOid": "ba32500"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-06T16:57:31Z",
          "updatedAt": "2025-03-06T16:57:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOJ6_NW86MXcMa",
      "title": "Restrict the OpenID Federation challenge type and identifier to each other.",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/68",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #59.\r\n\r\nThis pulls the definition of `openid-federation`'s Identifier Type into its own heading, moving it slightly up the page, to make it more clear it's there and happening (like with https://datatracker.ietf.org/doc/html/draft-ietf-acme-onion-07#name-identifier and https://datatracker.ietf.org/doc/html/rfc8738#name-ip-identifier).\r\n\r\nThen it adds the necessary `MUST NOT` conditions on usage, taking some inspiration from https://datatracker.ietf.org/doc/html/rfc8738#section-7 and https://datatracker.ietf.org/doc/html/draft-ietf-acme-onion-07#section-3.1.1.",
      "createdAt": "2025-02-24T23:26:14Z",
      "updatedAt": "2025-03-06T17:28:40Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "c5ba539e3ae0153b89620f65555fc4ef675b7ec3",
      "headRepository": "jcjones/draft-demarco-acme-openid-federation",
      "headRefName": "59-restrict-challenge",
      "headRefOid": "6f0f270f4da2be02bc1748ce5a63817e4f268c22",
      "closedAt": "2025-03-06T16:58:08Z",
      "mergedAt": "2025-03-06T16:58:08Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "b19abad2486ba749f934172a0d606354a9e46ba0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86dR9Pt",
          "commit": {
            "abbreviatedOid": "77a32c5"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-24T23:51:29Z",
          "updatedAt": "2025-02-24T23:53:13Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "We should be specific that this is an ACME identifier type.\r\n```suggestion\r\nThis document defines a new ACME identifier type for OpenID Federation entities, `openid-federation`,\r\n```",
              "createdAt": "2025-02-24T23:51:29Z",
              "updatedAt": "2025-02-24T23:53:13Z"
            },
            {
              "originalPosition": 4,
              "body": "We should add a link in the IANA considerations section back up to here.",
              "createdAt": "2025-02-24T23:52:22Z",
              "updatedAt": "2025-02-24T23:53:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86dc8m5",
          "commit": {
            "abbreviatedOid": "77a32c5"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-25T15:55:14Z",
          "updatedAt": "2025-02-25T15:55:14Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This has taken me down a rabbit-hole for a bunch of IANA cleanups (fixing one typo of `to to` is a gateway to rewriting, lol), which I'll split into another PR.\r\n\r\nThe minimal-ish change is in 7ec9c5e, and the new PR is https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/69.",
              "createdAt": "2025-02-25T15:55:14Z",
              "updatedAt": "2025-02-25T15:55:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86ddJ60",
          "commit": {
            "abbreviatedOid": "7ec9c5e"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-25T16:10:48Z",
          "updatedAt": "2025-02-25T16:10:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86dhQif",
          "commit": {
            "abbreviatedOid": "7ec9c5e"
          },
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-26T00:19:35Z",
          "updatedAt": "2025-02-26T00:19:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86e1-jp",
          "commit": {
            "abbreviatedOid": "7ec9c5e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-06T16:08:25Z",
          "updatedAt": "2025-03-06T16:08:25Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nThe `openid-federation-01` challenge MUST NOT be used to issue X.509 Certificates\r\n```",
              "createdAt": "2025-03-06T16:08:25Z",
              "updatedAt": "2025-03-06T16:08:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86e2grv",
          "commit": {
            "abbreviatedOid": "6f0f270"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-06T16:58:03Z",
          "updatedAt": "2025-03-06T16:58:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOJ6_NW86MftaY",
      "title": "Restructure the IANA Considerations section",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/69",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Place the ACME updates in a group together.\r\n- Explicitly define each update, so that IANA doesn't have to ask for clarification.\r\n- Backreference each to the appropriate portion of the specification.\r\n\r\nThis builds on https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/68 and specifically from https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/68#discussion_r1968588504.\r\n\r\nBecause I opened these in my fork, I can't base this PR upon my change from #68 while keeping the ultimate destination as the origin. Since now I have access to create branches here, I'll move future work within this repo.\r\n\r\nThe changes in this PR begin at 7f5e645550aa89447d02d260ba638c06c84ad6e8.",
      "createdAt": "2025-02-25T15:55:06Z",
      "updatedAt": "2025-03-06T17:28:30Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "c5ba539e3ae0153b89620f65555fc4ef675b7ec3",
      "headRepository": "jcjones/draft-demarco-acme-openid-federation",
      "headRefName": "59-iana-updates",
      "headRefOid": "6b477a0736533729b7c20f4897a742310243ffaf",
      "closedAt": "2025-03-06T16:56:59Z",
      "mergedAt": "2025-03-06T16:56:59Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "de6efe59aeee5ea0c13819aecd9eefb63bac9489"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86dgiWJ",
          "commit": {
            "abbreviatedOid": "7f5e645"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-25T21:52:35Z",
          "updatedAt": "2025-02-25T21:53:28Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "This should match the identifier type defined above\r\n```suggestion\r\n|openid-federation-01|openid-federation|this document|\r\n```",
              "createdAt": "2025-02-25T21:52:35Z",
              "updatedAt": "2025-02-25T21:53:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86dg4eK",
          "commit": {
            "abbreviatedOid": "7f5e645"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-25T22:51:39Z",
          "updatedAt": "2025-02-25T22:51:40Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "ohhh, now I see what the point of that column is intended to be. That then somewhat obviates the need in #68 to state\r\n> The `openid-federation-01` challenge MUST NOT be used to issue certificates\r\n> for any identifiers except `openid-federation` identifiers.",
              "createdAt": "2025-02-25T22:51:39Z",
              "updatedAt": "2025-02-25T22:51:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86dhQ7R",
          "commit": {
            "abbreviatedOid": "e88ccc8"
          },
          "author": "tgeoghegan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-26T00:20:54Z",
          "updatedAt": "2025-02-26T00:20:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86eSDt_",
          "commit": {
            "abbreviatedOid": "e88ccc8"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T22:56:35Z",
          "updatedAt": "2025-03-03T22:56:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86e2f7t",
          "commit": {
            "abbreviatedOid": "6b477a0"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-06T16:56:52Z",
          "updatedAt": "2025-03-06T16:56:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOJ6_NW86NN3gZ",
      "title": "Loosen certificate profile",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/71",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This relaxes some restrictions on certificates. Putting the entity ID in a subject alternative name is now optional. The requirement to have only one identifier per order is deleted in two places. Closes #54 and #38.",
      "createdAt": "2025-03-03T22:16:46Z",
      "updatedAt": "2025-03-06T17:09:39Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "d8d1268e2b46e048326413777f914b34434d8973",
      "headRepository": "divergentdave/draft-demarco-acme-openid-federation",
      "headRefName": "david/loosen-certificate-profile",
      "headRefOid": "a2b582869f731516b2ffbe9328841d327fbbdc65",
      "closedAt": "2025-03-06T17:09:32Z",
      "mergedAt": "2025-03-06T17:09:32Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "e8f0c54b8e2b0ec919baf5f59429e917e99a1a1d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86edXDA",
          "commit": {
            "abbreviatedOid": "74260a5"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-04T17:57:34Z",
          "updatedAt": "2025-03-04T17:57:42Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "nit while we're here: this is a really long sentence.  Maybe we just split it a little bit?\r\n\r\n```suggestion\r\nDepending on the Certificate Issuer's X.509 certificate profile, the CSR and\r\nX.509 Certificate MAY associate the certificate to the Federation Entity.  To do\r\nthat, the Issuer includes a Subject Alternative Name value corresponding to an \r\n`otherName` with a `type-id` of `id-on-OpenIdFederationEntityId`, containing \r\nan Octet String value corresponding to a UTF-8 encoding of the Entity ID in the\r\n`openid-federation` identifier in the `newOrder` request.\r\n```\r\nOr not, is fine either way.",
              "createdAt": "2025-03-04T17:57:34Z",
              "updatedAt": "2025-03-04T17:57:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86egRYg",
          "commit": {
            "abbreviatedOid": "74260a5"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-04T22:36:58Z",
          "updatedAt": "2025-03-04T22:36:59Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I did some further wordsmithing",
              "createdAt": "2025-03-04T22:36:58Z",
              "updatedAt": "2025-03-04T22:36:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86eqFfi",
          "commit": {
            "abbreviatedOid": "e20be0e"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2025-03-05T17:14:37Z",
          "updatedAt": "2025-03-05T17:14:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86e2hdO",
          "commit": {
            "abbreviatedOid": "e20be0e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-06T16:59:14Z",
          "updatedAt": "2025-03-06T16:59:14Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\nDepending on the Certificate Issuer's X.509 Certificate profile, the CSR and\r\nX.509 Certificate MAY associate the X.509 Certificate to the Federation Entity by\r\nincluding the Entity ID in the X.509 Certificate.\r\n```",
              "createdAt": "2025-03-06T16:59:14Z",
              "updatedAt": "2025-03-06T16:59:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOJ6_NW86NzGn_",
      "title": "Use different keys for challenge and certificate",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/72",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This closes #32.",
      "createdAt": "2025-03-07T16:14:39Z",
      "updatedAt": "2025-04-29T15:12:07Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e8f0c54b8e2b0ec919baf5f59429e917e99a1a1d",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "david/separate-keypairs",
      "headRefOid": "29e8a890383fcfedc522846c2b66342fd7736933",
      "closedAt": "2025-03-11T14:08:23Z",
      "mergedAt": "2025-03-11T14:08:23Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "148b999f3522fef8a8b18b25f33aa6c2ca5db7da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86fbJa4",
          "commit": {
            "abbreviatedOid": "29e8a89"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T14:08:07Z",
          "updatedAt": "2025-03-11T14:08:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOJ6_NW86NzIAa",
      "title": "Don't revoke upon federation metadata change",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/73",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This removes a `SHOULD` that told issuers to monitor entity configuration post-issuance and revoke when keys are removed. Closes #70.",
      "createdAt": "2025-03-07T16:17:46Z",
      "updatedAt": "2025-04-29T15:12:11Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e8f0c54b8e2b0ec919baf5f59429e917e99a1a1d",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "david/remove-revocation-requirement",
      "headRefOid": "052609fafd80bd2ea5af833b086b4d9fcf747a50",
      "closedAt": "2025-03-11T14:13:00Z",
      "mergedAt": "2025-03-11T14:13:00Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "718d704732c87f1e777ef47285a758d86f347eb5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86fBUWI",
          "commit": {
            "abbreviatedOid": "052609f"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Agreed. We could keep a TODO list of things that should go in a policy doc somewhere, if anyone desires -- maybe just an issue.",
          "createdAt": "2025-03-07T17:37:52Z",
          "updatedAt": "2025-03-07T17:37:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86fbKnn",
          "commit": {
            "abbreviatedOid": "052609f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T14:09:16Z",
          "updatedAt": "2025-03-11T14:09:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86fbPCt",
          "commit": {
            "abbreviatedOid": "052609f"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T14:12:52Z",
          "updatedAt": "2025-03-11T14:12:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOJ6_NW86NzSOQ",
      "title": "Rephrase description of trust chain",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/74",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The strings in the `trust_chain` array are not base64url-encoded data, but compact form JWTs.",
      "createdAt": "2025-03-07T16:41:31Z",
      "updatedAt": "2025-04-29T15:12:59Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "e8f0c54b8e2b0ec919baf5f59429e917e99a1a1d",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "david/trust-chain-editorial",
      "headRefOid": "1c5d0b77226bec778cbe2ccf0520c82fd5f4cd92",
      "closedAt": "2025-03-11T14:14:24Z",
      "mergedAt": "2025-03-11T14:14:23Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "6330d456a0ad2c8b95cfa300ed41711a3c5a062b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86fBTrO",
          "commit": {
            "abbreviatedOid": "1c5d0b7"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-07T17:36:24Z",
          "updatedAt": "2025-03-07T17:36:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86fbQ8c",
          "commit": {
            "abbreviatedOid": "1c5d0b7"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T14:14:16Z",
          "updatedAt": "2025-03-11T14:14:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOJ6_NW86O-XeM",
      "title": "Revise publication to rely on Certificate Transparency",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/76",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This moves responsibility for publication of certificates from the OIDFed hierarchy to RFC6962/RFC9162 certificate transparency logs, and otherwise marks it as out-of-scope.\r\n\r\nI am hoping this is unambiguous that how a Certificate Issuer does it is for policy, to include whether they submit pre-certificates or final certificates, or if they embed SCTs or transmit them some other way, or even use CTv1 vs CTv2.\r\n\r\nFixes #65.",
      "createdAt": "2025-03-17T18:11:53Z",
      "updatedAt": "2025-03-27T19:02:27Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "6330d456a0ad2c8b95cfa300ed41711a3c5a062b",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "65-use-ct",
      "headRefOid": "02cf5584a277e40b4463f70d703712b41caf264a",
      "closedAt": "2025-03-27T19:02:27Z",
      "mergedAt": "2025-03-27T19:02:27Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "0573f04f6a1fe50b01358abc3288dfff32a33c6c"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "please add a ref about the Immediate Superior Entities within the defined terms section",
          "createdAt": "2025-03-25T14:17:01Z",
          "updatedAt": "2025-03-25T14:17:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86hwcrP",
          "commit": {
            "abbreviatedOid": "4c55e01"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-25T13:44:54Z",
          "updatedAt": "2025-03-25T13:44:55Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nand are out of scope for this document.\r\n\r\nFederation Immediate Superior Entities having issued X.509 Certificates pertaining to one or more Federation Entity Keys in control of their Subordinates MAY evidence this information by including in each JWK contained within the Subordinate Statement the member `x5c`. When this happens, it's up to the implementation to decide if the `x5c` should contain the entire X.509 Certificate Chain, from the CA to the Subordinate, or only the X.509 Certificate about the Subordinate. \r\n\r\nPlease note that multiple Immediate Superior Entities above the Subordinate Statement Issuer (such as other Intermediates or Trust Anchors) may have produced cryptographically verifiable X.509 Certificates about the Subordinate Statement Issuer, making the single `x5c` verifiable using more than a single X.509 Certificate about its issuer, signed by more than a single Immediate Superior. This is similar to the federation Trust Chain, where a single Entity Statement can be linked to one or more Subordinate Statements.\r\n```",
              "createdAt": "2025-03-25T13:44:54Z",
              "updatedAt": "2025-03-25T14:13:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86iT74F",
          "commit": {
            "abbreviatedOid": "02cf558"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-27T19:01:35Z",
          "updatedAt": "2025-03-27T19:01:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86iT8OA",
          "commit": {
            "abbreviatedOid": "02cf558"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "I believe that the paragraph starting \"The X.509 Certificates issued by federation...\" captures the essence of the issue.",
          "createdAt": "2025-03-27T19:02:14Z",
          "updatedAt": "2025-03-27T19:02:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDOJ6_NW86UYEbb",
      "title": "Fix idnits",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/77",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I ran the draft through the idnits and idnits3 tools, and fixed some of the issues it flagged.\r\n\r\n* I removed references from the abstract section\r\n* After doing so, we no longer use RFC2818. Besides, RFC 2818 has been obsoleted by RFC 9110. This isn't directly important to the draft, so I deleted the reference.\r\n* I fixed some references that were using Markdown links instead of the double curly brace syntax. These seem to look the same in text and HTML form, but they were producing a warning about the XML reference's text form.",
      "createdAt": "2025-04-29T16:02:07Z",
      "updatedAt": "2025-05-13T14:09:06Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "0573f04f6a1fe50b01358abc3288dfff32a33c6c",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "david/idnits3",
      "headRefOid": "a8075e603122051e0c35e139191f5fd708e1f77a",
      "closedAt": "2025-05-13T14:08:35Z",
      "mergedAt": "2025-05-13T14:08:35Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "3a828bc99b8db7ebf4be0cf54250fa9e92d1acbf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86nMJNz",
          "commit": {
            "abbreviatedOid": "a8075e6"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks right to me. Thanks!",
          "createdAt": "2025-04-29T20:24:49Z",
          "updatedAt": "2025-04-29T20:24:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86pGGV9",
          "commit": {
            "abbreviatedOid": "a8075e6"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-13T14:08:27Z",
          "updatedAt": "2025-05-13T14:08:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOJ6_NW86UYvfK",
      "title": "Update authors list",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/78",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This updates the authors list per discussions with Ameer and Bran, ahead of our first submission to the IETF Datatracker.\r\n\r\ncc @inahga @branlwyd",
      "createdAt": "2025-04-29T17:29:47Z",
      "updatedAt": "2025-05-27T14:04:44Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "0573f04f6a1fe50b01358abc3288dfff32a33c6c",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "david/update-authors",
      "headRefOid": "cb7b67e19dca1d1f30116771a98fffc33663d549",
      "closedAt": "2025-05-27T14:04:44Z",
      "mergedAt": "2025-05-27T14:04:44Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "c04bc3fdfe4a786ee93a4f7fd736ae9ef8fde30d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86nKnRq",
          "commit": {
            "abbreviatedOid": "174556b"
          },
          "author": "branlwyd",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-29T18:18:37Z",
          "updatedAt": "2025-04-29T18:18:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86nMhbR",
          "commit": {
            "abbreviatedOid": "174556b"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I'd add yourself in there, @divergentdave.",
          "createdAt": "2025-04-29T21:01:15Z",
          "updatedAt": "2025-04-29T21:01:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86pGGAn",
          "commit": {
            "abbreviatedOid": "174556b"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-05-13T14:08:03Z",
          "updatedAt": "2025-05-13T14:08:08Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "please add ppl, here\r\n\r\ndon't be shy, ppl like @jcjones for instance must be included ",
              "createdAt": "2025-05-13T14:08:03Z",
              "updatedAt": "2025-05-13T14:08:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86pGMxd",
          "commit": {
            "abbreviatedOid": "98dac2a"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-13T14:15:49Z",
          "updatedAt": "2025-05-13T14:15:50Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I'm using the `contributor` block in the front matter, which gets rendered at the end of the document. Added myself and J.C. there.",
              "createdAt": "2025-05-13T14:15:49Z",
              "updatedAt": "2025-05-13T14:15:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86pGnNl",
          "commit": {
            "abbreviatedOid": "98dac2a"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-13T14:42:34Z",
          "updatedAt": "2025-05-13T14:42:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86pGwQa",
          "commit": {
            "abbreviatedOid": "98dac2a"
          },
          "author": "inahga",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-13T14:52:28Z",
          "updatedAt": "2025-05-13T14:52:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n    email: inahga@letsencrypt.org\r\n```",
              "createdAt": "2025-05-13T14:52:28Z",
              "updatedAt": "2025-05-13T14:52:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86rI46v",
          "commit": {
            "abbreviatedOid": "cb7b67e"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-27T14:04:29Z",
          "updatedAt": "2025-05-27T14:04:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOJ6_NW86VWKuh",
      "title": "Allow issuer to provide TAs to requestor",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/80",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "When solving an `openid-federation-01` challenge, the requestor may provide a trust chain from itself to a trust anchor trusted by the issuer, to save the issuer the trouble of doing a resolve. However it's not clear how the requestor is supposed to know what TAs the issuer trusts.\r\n\r\nThis commit adds an optional field `trust_anchors` to the challenge object. The requestor can use that to construct a trust chain that the issuer will accept.\r\n\r\nAdditionally, this removes the sentence \"The Requestor SHOULD use a Trust Anchor it has in common with the ACME server.\"\r\n\r\nFirst, I don't think it's the right requirement. What matters is that (1) the trust anchor be trusted by the issuer and (2) there be some path from the requestor to the trust anchor. Those can be true even if the requestor doesn't trust the TA! To illustrate:\r\n\r\n```\r\ntrust_anchor_1           trust_anchor_2\r\n     |________________________|\r\n                  |\r\n            intermediate\r\n                  |\r\n     +------------+-----------+\r\n     |                        |\r\n  issuer                 requestor\r\n```\r\n\r\nIf issuer trusts trust_anchor_1 but not _2, and requestor trusts trust_anchor_2 but not _1, then trust_anchor_1->intermediate->requestor is a valid trust chain for solving a challenge even if requestor wouldn't trust it.\r\n\r\nSecond, it makes more sense as a MUST than a SHOULD. I rewrote it to make it explicit that the trust chain must end in one of the issuer's trust anchors.\r\n\r\nResolves #79",
      "createdAt": "2025-05-07T22:47:47Z",
      "updatedAt": "2025-05-27T14:22:10Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "0573f04f6a1fe50b01358abc3288dfff32a33c6c",
      "headRepository": "tgeoghegan/draft-demarco-acme-openid-federation",
      "headRefName": "issuer-tas-hint",
      "headRefOid": "cd60c2d5388f60a8e5aa2635a0b7fbf860fade65",
      "closedAt": "2025-05-27T14:22:10Z",
      "mergedAt": "2025-05-27T14:22:10Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "f9b5aa27ddec8fef0ef247652c02bf99e29e5ef2"
      },
      "comments": [
        {
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "body": "I added a commit here to address https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/79#issuecomment-2891752148.",
          "createdAt": "2025-05-23T17:06:34Z",
          "updatedAt": "2025-05-23T17:06:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86pGXdH",
          "commit": {
            "abbreviatedOid": "063a75e"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-13T14:27:14Z",
          "updatedAt": "2025-05-13T14:27:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86p9yPO",
          "commit": {
            "abbreviatedOid": "50ea0ab"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-19T17:28:30Z",
          "updatedAt": "2025-05-19T17:28:36Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Should we use dromedary-case here, too?",
              "createdAt": "2025-05-19T17:28:30Z",
              "updatedAt": "2025-05-19T17:28:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86p92dw",
          "commit": {
            "abbreviatedOid": "50ea0ab"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-19T17:36:07Z",
          "updatedAt": "2025-05-19T17:36:07Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Yeah, since this object is in the ACME-object-domain rather than the OIDF-JWT domain (which appears to prefer `snake_case`.",
              "createdAt": "2025-05-19T17:36:07Z",
              "updatedAt": "2025-05-19T17:36:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86p-i_m",
          "commit": {
            "abbreviatedOid": "7de6730"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-19T19:06:25Z",
          "updatedAt": "2025-05-19T19:06:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86rI7IE",
          "commit": {
            "abbreviatedOid": "468fc82"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T14:06:33Z",
          "updatedAt": "2025-05-27T14:06:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    Entity Identifiers of the Issuer's Trust Anchors. When solving the\r\n```",
              "createdAt": "2025-05-27T14:06:33Z",
              "updatedAt": "2025-05-27T14:06:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86rI8yl",
          "commit": {
            "abbreviatedOid": "468fc82"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-27T14:07:58Z",
          "updatedAt": "2025-05-27T14:07:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOJ6_NW86Xa8Sh",
      "title": "Clarify trust chain metadata validation",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/81",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Fix sequence diagram: trust is established before verifying key authorizaton\r\n- Clarify that the `acme_requestor` metadata has to be valid under Federation policy\r\n\r\nThis addresses outstanding observations in https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/79#issuecomment-2891744187. I also wanted to provide a more clear reference into OPENID-FED for \"Federation Entity Discovery\", but no such specification exists.",
      "createdAt": "2025-05-23T17:04:47Z",
      "updatedAt": "2025-05-27T21:53:53Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "f9b5aa27ddec8fef0ef247652c02bf99e29e5ef2",
      "headRepository": "tgeoghegan/draft-demarco-acme-openid-federation",
      "headRefName": "clarify-trust-chain",
      "headRefOid": "b7f0e2d44fa4f5fdeddf1d0f35263abc4dc72dd3",
      "closedAt": "2025-05-27T21:53:53Z",
      "mergedAt": "2025-05-27T21:53:53Z",
      "mergedBy": "tgeoghegan",
      "mergeCommit": {
        "oid": "37224b81f92825ca878d13571c690a402954b28b"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "@tgeoghegan the discovery process is detailed here: https://openid.github.io/federation/main.html#section-10",
          "createdAt": "2025-05-27T14:29:14Z",
          "updatedAt": "2025-05-27T14:29:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86rJPWo",
          "commit": {
            "abbreviatedOid": "666f0bd"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T14:27:06Z",
          "updatedAt": "2025-05-27T14:27:06Z",
          "comments": [
            {
              "originalPosition": 148,
              "body": "This link is missing a brace\r\n```suggestion\r\n  ({{Section 6.1 of OPENID-FED}}{: relative=\"#section-6.1\"}).\r\n```",
              "createdAt": "2025-05-27T14:27:06Z",
              "updatedAt": "2025-05-27T14:27:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86rO2bX",
          "commit": {
            "abbreviatedOid": "b7f0e2d"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-27T21:46:52Z",
          "updatedAt": "2025-05-27T21:46:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOJ6_NW86X3X2f",
      "title": "Change the definition of acme_issuer to be the URL to the ACME directory",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/83",
      "state": "MERGED",
      "author": "jcjones",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As described in Issue #60, this PR removes the duplication of ACME Directory information from the issuer's Entity Configuration, favoring instead the URL to the ACME Directory as defined in RFC 8555.\r\n\r\nDoing this removes the ability to identify changes in the ACME Directory information via the Entity Configuration, in exchange for simplification across the stack for clients and issuers. It's still possible to identify changes via the Directory directly. \r\n\r\nA point-by-point analysis of the consequences of this change is posted in https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/60#issuecomment-2688694461. Further commentary is welcome.\r\n\r\n@peppelinux @selfissued\r\n\r\nFixes #60. ",
      "createdAt": "2025-05-27T23:17:32Z",
      "updatedAt": "2025-06-03T14:17:18Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "37224b81f92825ca878d13571c690a402954b28b",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "jcj/60-directory-indirectory",
      "headRefOid": "4486c61b1250496aec4b2f59656923d737abdc1c",
      "closedAt": "2025-06-03T14:17:18Z",
      "mergedAt": "2025-06-03T14:17:18Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "35dbd2fc880044fd4a92c36c1804e55d8977700b"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "I agree that we really need to avoid overlapping information distributed in different ways.\r\n\r\nAt the same time using federation trust chain we satisfy the requirement of non repudiation.\r\n\r\nhaving an external ref,  such as the directory url makes sense, but unfortunately this doesn't bring any evidence about the parameters used during the issuance of the x5c at time of issuance within a veriafiable trust chain.",
          "createdAt": "2025-06-03T14:12:42Z",
          "updatedAt": "2025-06-03T14:12:42Z"
        },
        {
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "body": "Referring back to https://github.com/peppelinux/draft-demarco-acme-openid-federation/issues/60#issuecomment-2688694461, I don't think that non-repudiation of the particular pieces of information in the ACME directory furthers useful security goals. Many of the fields are themselves URLs, which also act as external references, some are informational, etc.",
          "createdAt": "2025-06-03T14:16:45Z",
          "updatedAt": "2025-06-03T14:16:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86rc2wV",
          "commit": {
            "abbreviatedOid": "77320b7"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-28T21:17:46Z",
          "updatedAt": "2025-05-28T21:17:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86sP9-g",
          "commit": {
            "abbreviatedOid": "77320b7"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-06-02T20:39:00Z",
          "updatedAt": "2025-06-02T20:41:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think the metadata under our entity type identifier ought to be a JSON object, and not just a bare string. See https://openid.net/specs/openid-federation-1_0-42.html#section-3-6.14.1. The description of metadata policies also assumes that there is a second layer of objects, see https://openid.net/specs/openid-federation-1_0-42.html#section-6.1.2-2.2.2. This would also allow for future extensibility.",
              "createdAt": "2025-06-02T20:39:00Z",
              "updatedAt": "2025-06-02T20:41:19Z"
            },
            {
              "originalPosition": 23,
              "body": "Per above:\r\n```suggestion\r\n    \"acme_issuer\": {\r\n      \"directory_url\": \"https://issuer.example.com/acme/directory\"\r\n    }\r\n```",
              "createdAt": "2025-06-02T20:39:24Z",
              "updatedAt": "2025-06-02T20:41:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sQMNU",
          "commit": {
            "abbreviatedOid": "77320b7"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-02T21:00:07Z",
          "updatedAt": "2025-06-02T21:00:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I wondered the same thing, but wasn't sure whether a string counts as a \"JSON object\". But I suppose I'm swayed by the extensibility argument.",
              "createdAt": "2025-06-02T21:00:07Z",
              "updatedAt": "2025-06-02T21:00:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sQoBp",
          "commit": {
            "abbreviatedOid": "77320b7"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-02T21:49:28Z",
          "updatedAt": "2025-06-02T21:49:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "See what you think of https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/83/commits/30ca7267a196bef8b7f83443f32c09048a2b1da6.",
              "createdAt": "2025-06-02T21:49:28Z",
              "updatedAt": "2025-06-02T21:49:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sQqlW",
          "commit": {
            "abbreviatedOid": "30ca726"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-02T21:55:18Z",
          "updatedAt": "2025-06-02T21:55:27Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Judging by other definitions of entity types, I think we should say \"parameter\" instead of \"policy\".\r\n```suggestion\r\nEntity Type metadata within it. The `acme_issuer` metadata contains one parameter,\r\n```",
              "createdAt": "2025-06-02T21:55:19Z",
              "updatedAt": "2025-06-02T21:55:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sQxYP",
          "commit": {
            "abbreviatedOid": "4486c61"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-02T22:13:00Z",
          "updatedAt": "2025-06-02T22:13:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86sai_J",
          "commit": {
            "abbreviatedOid": "4486c61"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T14:17:10Z",
          "updatedAt": "2025-06-03T14:17:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOJ6_NW86YKLHq",
      "title": "Editorial pass",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/88",
      "state": "OPEN",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See inline comments for justification and context",
      "createdAt": "2025-05-29T17:33:57Z",
      "updatedAt": "2025-06-04T16:37:35Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "37224b81f92825ca878d13571c690a402954b28b",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "timg-misc-edits",
      "headRefOid": "284f5f71f6e61d1127d3e1327f70da94bb1473e1",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86rm5Wv",
          "commit": {
            "abbreviatedOid": "9f36390"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T17:39:12Z",
          "updatedAt": "2025-05-29T17:46:22Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I don't agree with this statement: this document does not describe how to construct, validate or advertise an entity configuration. OPENID-FED does that.",
              "createdAt": "2025-05-29T17:39:12Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 72,
              "body": "I don't think we should talk about bootstrapping trust from HTTP (without S), because I am skeptical that this specification would let you bootstrap into HTTPS, since ACME requires HTTPS. It may still be possible but we don't need to make that promise here.",
              "createdAt": "2025-05-29T17:41:10Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 113,
              "body": "This is redundant with the next sentence, AFAICT",
              "createdAt": "2025-05-29T17:41:34Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 128,
              "body": "Both of these points are made redundant by the preconditions listed below in {{preconditions}}, which include that both entities have to publish an OPENID-FED EC. By definition, those prove possession of a private key and control of the identifier.",
              "createdAt": "2025-05-29T17:42:20Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 141,
              "body": "\"Order request\" is one specific part of ACME, but issuing one of thee certs could use more than just that interaction. \"Issuance\" better captures everything that might happen.",
              "createdAt": "2025-05-29T17:42:59Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 152,
              "body": "This is not a precondition to the protocol being runnable. The protocol is designed to handle the case where a trust chain cannot be built (issuance fails in a well-defined manner). Additionally I think it's wrong to say that trust must be bidirectional: it's perfectly OK for a requestor to ask for a cert from an issuer it doesn't trust. Maybe it's trying to get a cert it can show to someone else who *does* trust the issuer.",
              "createdAt": "2025-05-29T17:43:58Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 193,
              "body": "These items were (1) restating several details of RFC 8555 (getting a nonce, making an account) when we should just reference that document and (2) overly specific and normative for an overview",
              "createdAt": "2025-05-29T17:45:00Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 199,
              "body": "This is too specific and normative for an overview. See also my points in #85",
              "createdAt": "2025-05-29T17:45:24Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            },
            {
              "originalPosition": 236,
              "body": "This implements one of the things I think we should do enumerated in #85. There may be other spots where we need to mandate the use of error `openIDFederationEntity`.",
              "createdAt": "2025-05-29T17:46:17Z",
              "updatedAt": "2025-05-29T17:46:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86r1ECa",
          "commit": {
            "abbreviatedOid": "158b0b0"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-30T22:33:26Z",
          "updatedAt": "2025-05-30T22:33:26Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "It feels like this might be worth saying somewhere explicitly, perhaps as a use case?",
              "createdAt": "2025-05-30T22:33:26Z",
              "updatedAt": "2025-05-30T22:33:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86r7eaz",
          "commit": {
            "abbreviatedOid": "9f36390"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-31T19:47:15Z",
          "updatedAt": "2025-05-31T19:47:15Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "Yeah, that's reasonable. In da027cb, I rewrote a paragraph in the introduction to be clear about what the new ACME challenge type proves. At the same time, I don't want to be as prescriptive as this item which I deleted, because (1) OPENID-FED does a perfectly good job of explaining how trust works, so there's no need to get into the fine details of Trust Anchors and Trust Chains here and (2) the text here was wrong again, in implying that Trust Chains go between the Requestor and Issuer, which isn't really how that works.",
              "createdAt": "2025-05-31T19:47:15Z",
              "updatedAt": "2025-05-31T19:59:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sNCsD",
          "commit": {
            "abbreviatedOid": "da027cb"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for these. I like the changes.",
          "createdAt": "2025-06-02T16:11:05Z",
          "updatedAt": "2025-06-02T16:11:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86sRADh",
          "commit": {
            "abbreviatedOid": "da027cb"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-02T22:51:09Z",
          "updatedAt": "2025-06-02T22:55:06Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Further clarification\r\n```suggestion\r\nissuer that they are trusted OpenID Federation 1.0 entities. This document\r\nextends the ACME protocol in the following ways:\r\n```",
              "createdAt": "2025-06-02T22:51:09Z",
              "updatedAt": "2025-06-02T22:55:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sas04",
          "commit": {
            "abbreviatedOid": "da027cb"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T14:23:27Z",
          "updatedAt": "2025-06-03T14:23:27Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "however, we want to give some help to newcomers implkementing this draft without not having the necessary understanding of openid federation, trying to give them the basic elements to get them aware and prepared with the study of opneid federation.\r\n\r\nMay I ask you to do any further editorial improvement to give this help to newcomers?",
              "createdAt": "2025-06-03T14:23:27Z",
              "updatedAt": "2025-06-03T14:23:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sau1a",
          "commit": {
            "abbreviatedOid": "da027cb"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T14:24:55Z",
          "updatedAt": "2025-06-03T14:24:55Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "ok",
              "createdAt": "2025-06-03T14:24:55Z",
              "updatedAt": "2025-06-03T14:24:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sax_w",
          "commit": {
            "abbreviatedOid": "da027cb"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T14:27:08Z",
          "updatedAt": "2025-06-03T14:27:08Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "yeah, they could sound very obvious according to the openid federation specification.",
              "createdAt": "2025-06-03T14:27:08Z",
              "updatedAt": "2025-06-03T14:27:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86ssund",
          "commit": {
            "abbreviatedOid": "da027cb"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-04T16:33:21Z",
          "updatedAt": "2025-06-04T16:33:21Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Sure! This particular bullet list enumerates extensions to ACME, though, so I don't think it's an appropriate place to introduce the notion of ECs. I added a paragraph above explaining how this document defines new entity types used in issuance. Is there any other basic information you think the introduction should cover?",
              "createdAt": "2025-06-04T16:33:21Z",
              "updatedAt": "2025-06-04T16:33:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOJ6_NW86YKe6j",
      "title": "reorganize protocol overview",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/89",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "# Stacked on #88\r\n\r\nMoves \"Overview\" up to the header section of \"Protocol Flow\" and collapses some redundant sections into it.",
      "createdAt": "2025-05-29T18:11:39Z",
      "updatedAt": "2025-06-04T16:37:33Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "timg-misc-edits",
      "baseRefOid": "d5b565b0f13a9958d07dd66fdea945f302b4665e",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "timg-overview-refactor",
      "headRefOid": "01ff981f42ed777415a12c1ae4dbe4549ffdd731",
      "closedAt": "2025-06-04T16:37:33Z",
      "mergedAt": "2025-06-04T16:37:33Z",
      "mergedBy": "tgeoghegan",
      "mergeCommit": {
        "oid": "284f5f71f6e61d1127d3e1327f70da94bb1473e1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86rnPpb",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T18:13:17Z",
          "updatedAt": "2025-05-29T18:13:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I wound up effectively deleting this section. All it was doing is restating what validation an issuer does for an OIDF identifier, which is already covered elsewhere. Was the intent for this section to explain what a certificate issued by this mechanism attests to? I don't think this document can do that, since the Open ID identifier SAN is optional, and we allow arbitrary cert profiles. Meaning that the certs issued could in fact contain absolutely anything and thus attest to absolutely anything.",
              "createdAt": "2025-05-29T18:13:17Z",
              "updatedAt": "2025-05-29T18:13:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sOLnp",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I've gone through this version of the document twice and I agree with the section delete and reorganize. If we get questions later regarding something here being less clear, we can resurrect some text from the change history.\r\n\r\nThanks for this!",
          "createdAt": "2025-06-02T17:45:01Z",
          "updatedAt": "2025-06-02T17:45:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86sRDXi",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-02T22:57:14Z",
          "updatedAt": "2025-06-02T22:57:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86sa2LO",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T14:29:52Z",
          "updatedAt": "2025-06-03T14:29:52Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\n- **Discovery**: the Requestor discovers the available Certificate Issuers\r\n  within a federation, inspecting the ACME issuer Entity types. This is\r\n```",
              "createdAt": "2025-06-03T14:29:52Z",
              "updatedAt": "2025-06-03T14:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sa3sa",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T14:30:44Z",
          "updatedAt": "2025-06-03T14:30:45Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "```suggestion\r\nRequestors that use discovery MAY select any Entity with an Entity type of\r\n```",
              "createdAt": "2025-06-03T14:30:44Z",
              "updatedAt": "2025-06-03T14:30:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sa4u-",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T14:31:24Z",
          "updatedAt": "2025-06-03T14:31:24Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "```suggestion\r\n`acme_issuer`, or they may additionally require that such Entities have a\r\n```\r\n\r\nDid I assume well that this `may` is not normative?",
              "createdAt": "2025-06-03T14:31:24Z",
              "updatedAt": "2025-06-03T14:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJ6_NW86sa5Qe",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T14:31:46Z",
          "updatedAt": "2025-06-03T14:31:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86sswKe",
          "commit": {
            "abbreviatedOid": "100e86c"
          },
          "author": "tgeoghegan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-04T16:35:44Z",
          "updatedAt": "2025-06-04T16:35:45Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "Honestly, I'm not sure. I also don't really recall why I made the MAY on the previous line an RFC 2119 word. I think that even with this PR, the discovery section is rather meager (#84) but I'm not sure what to do about that. Which is to say: I think we should discuss discovery more and revisit this section anyway.",
              "createdAt": "2025-06-04T16:35:44Z",
              "updatedAt": "2025-06-04T16:36:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOJ6_NW86YKg9w",
      "title": "Say nothing about Certificate Transparency",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/90",
      "state": "MERGED",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #86",
      "createdAt": "2025-05-29T18:16:02Z",
      "updatedAt": "2025-06-03T14:07:40Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "37224b81f92825ca878d13571c690a402954b28b",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "timg-be-silent-on-ct",
      "headRefOid": "7dca9f4d661daa0f9e1b1b6e7c90cda6158cc4c0",
      "closedAt": "2025-06-02T21:00:17Z",
      "mergedAt": "2025-06-02T21:00:17Z",
      "mergedBy": "tgeoghegan",
      "mergeCommit": {
        "oid": "0ff5f3a3e86a12d003c4fd594b625ad5b9e8f3be"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "OWNER",
          "body": "ok",
          "createdAt": "2025-06-03T14:07:39Z",
          "updatedAt": "2025-06-03T14:07:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJ6_NW86ryxI-",
          "commit": {
            "abbreviatedOid": "7dca9f4"
          },
          "author": "jcjones",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-30T18:45:08Z",
          "updatedAt": "2025-05-30T18:45:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJ6_NW86sQAGn",
          "commit": {
            "abbreviatedOid": "7dca9f4"
          },
          "author": "divergentdave",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-02T20:42:11Z",
          "updatedAt": "2025-06-02T20:42:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOJ6_NW86ZDq73",
      "title": "add self as contributor",
      "url": "https://github.com/peppelinux/draft-demarco-acme-openid-federation/pull/91",
      "state": "OPEN",
      "author": "tgeoghegan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-04T16:40:17Z",
      "updatedAt": "2025-06-04T16:40:19Z",
      "baseRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "baseRefName": "main",
      "baseRefOid": "35dbd2fc880044fd4a92c36c1804e55d8977700b",
      "headRepository": "peppelinux/draft-demarco-acme-openid-federation",
      "headRefName": "timg-contributor",
      "headRefOid": "4c694242198cb2946c50ad62767dbcbd1832edc6",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}