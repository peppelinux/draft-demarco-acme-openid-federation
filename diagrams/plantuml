@startuml
participant RF as "Requestor's\nOpenID Federation\n Web Server"
participant RC as "Requestor's\nACME Client"
participant A as "X.509 Certificate Issuer"
participant F as "Federation Trust Anchor"

RC ->> A: POST /acme/new-order
A -->> RC: Authorization at /acme/authz/[authz-id]\nFinalize at /acme/order/[order-id]/finalize
RC ->> A: POST /acme/authz/[authz-id]
A -->> RC: openid-federation-01 Challenge\nat /acme/chall/[chall-id]
RC ->> RC: Sign challenge token with private key
RC ->> A: POST /acme/chall/[chall-id] with signed\ntoken and entity ID set to Requestor's ID
A -->> RC: Challenge validation beginning

A ->> RF: GET /.well-known/openid-federation
RF -->> A: Requestor's Entity Configuration
A ->> A: Check Entity Configuration sub matches\nEntity identifier in the order
A ->> A: Check challenge sig is signed\nwith key in Entity Configuration
opt If requestor did not provide Trust Chain
  A <<->> F: Determine Trust Chain\nfrom Issuer's Trust Anchor to Requestor\n(OpenID Federation Discovery)
end
A ->> A: Evaluate trust chain

loop Poll until authz status is "valid" or "invalid"
RC ->> A: POST-as-GET /acme/authz/[authz-id]
A ->> RC: Current authz status
end

opt If the authz status is "valid"
RC ->> A: POST /acme/orders/[order-id]/finalize\nwith CSR
A ->> A: Check CSR validity according to\nprotocol and CA policy
A -->> RC: Order object with certificate\nat /acme/cert/[cert-id]
RC ->> A: POST /acme/cert/[cert-id]
A -->> RC: Newly issued X.509 Certificate ðŸŽ‰
end

@enduml
