



Automated Certificate Management Environment                 G. D. Marco
Internet-Draft                                               independent
Intended status: Standards Track                         5 November 2024
Expires: 9 May 2025


Automatic Certificate Management Environment (ACME) with OpenID Connect
                             Federation 1.0
              draft-demarco-acme-openid-federation-latest

Abstract

   The Automatic Certificate Management Environment (ACME) protocol
   [RFC8555] allows server operators to obtain TLS certificates for
   their websites (HTTPS [RFC2818]), based on a demonstration of control
   over the website's domain via a fully-automated challenge/response
   protocol.

   OpenID Federation 1.0 defines how to build a trust infrastructure
   using a trusted third-party model.  It uses a trust evaluation
   mechanism to attest the possession of public keys, protocol specific
   metadata and several administrative and technical information related
   to a specific entity.

   This document defines how X.509 certificates associating a given
   OpenID Federation Entity with a key included in that Entity's
   Configuration can be issued by a trust anchor and its intermediates
   through the ACME protocol to all the organizations that are part of a
   federation built on top of OpenID Federation 1.0.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-demarco-acme-openid-
   federation/.

   Discussion of this document takes place on the Automated Certificate
   Management Environment Working Group mailing list
   (mailto:acme@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/acme/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/acme/.

   Source for this draft and an issue tracker can be found at
   https://github.com/peppelinux/draft-demarco-acme-openid-federation.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 9 May 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Audience Target and Use Cases
   3.  Terminology
   4.  Conventions and Definitions
   5.  Certificates issued using OpenID Federation
   6.  Protocol Flow
     6.1.  Discovery Preconditions
     6.2.  Overview
     6.3.  Metadata
     6.4.  OpenID Federation Challenge Type
       6.4.1.  CSR and Certificate Requirements
   7.  Publication of the Certificates within the Federation
   8.  Certificate Lifecycle and Revocation
   9.  Security Considerations
   10. IANA Considerations
   11. Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   OpenID Federation 1.0 allows an ACME server to issue X.509
   certificates associating a given OpenID Entity to a key included in
   that Entity's Configuration.  X.509 Certificates can be provided to
   one or more organizations, without having pre-established any direct
   relationship or any stipulation of a contract.

   In a multilateral federation, composed by thousands of entities
   belonging to different organizations, all the participants adhere to
   the same regulation or trust framework.  OpenID Federation 1.0 allows
   each participant to recognize the other participant using a trust
   evaluation mechanism, with RESTful services and cryptographic
   materials.

   Considering that a requestor is an entity requesting the issuance of
   an X.509 Certificate to a server and the issuer is the ACME server
   that validates the entitlements of the requestor before issuing the
   X.509 Certificate, this specification defines how ACME and OpenID
   Federation 1.0 can be integrated to allow efficient issuance of X.509
   Certificates to a requestor via the introduction of a new ACME
   challenge type.  The new challenge type extends the ACME protocol in
   the following ways:

   *  It associates a cryptographic key with an OpenID Entity, rather
      than a domain, since the authentication and authorization of the
      requestor is asserted with OpenID Federation 1.0.

   *  It defines how to use and validate a basic OpenID Federation
      component, called Entity Configuration, that is a signed JWT
      published in a well-known resource (/.well-known/openid-
      federation) without requiring the /.well-known/acme-
      challenge/{token} endpoint.

   *  It defines how the OpenID Federation Entity Statements can be used
      for the publication of the X.509 Certificates, by a Trust Anchor
      or Intermediate, that were previously issued with ACME.

2.  Audience Target and Use Cases

   The audience of the document are the multilateral federations that
   require automatic issuance of X.509 certificates using an
   infrastructure of trust based on OpenID Federation 1.0.

   This specification can be implemented by:

   *  Federation Entities that join to a federation staging area using
      HTTP only transport to attest themselves as trustworthy, and then
      retrieve X.509 Certificates for their official HTTPS Federation
      Entity ID.

   *  Federation Entities that want to ask and obtain X.509 Certificate
      for every Federation Key contained in their Entity Configuration,
      as made reliable in a Federation Trust Chain.

3.  Terminology

   The terms "Federation Entity", "Trust Anchor", "Intermediate",
   "Entity Configuration", "Entity Statement", "Trust Mark" and "Trust
   Chain" used in this document are defined in the Section 1.2
   (https://openid.net/specs/openid-federation-1_0.html#name-
   terminology) of [OPENID-FED].

   *TA*:  OpenID Federation Trust Anchor, see CA.

   *CA*:  Certification Authority, also known as Trust Anchor or
      Intermediate, specifically one that implements the ACME protocol
      by serving an ACME server.

   *CSR*:  Certificate Signing Request, specifically a PKCS#10 [RFC2986]
      as supported by ACME.

   *FQDN*:  Fully Qualified Domain Name.

   *Requestor*:  Federation Entity that requests a X.509 certificate to
      a CA.

   *Issuer*:  Federation Entity that serves an ACME Server.  The
      Federation Entity is then a CA.

4.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

5.  Certificates issued using OpenID Federation

   The Issuer establishes the authorization of a Federation Entity to
   obtain certificates for the identifier configured in the Requestor's
   Entity Configuration.

   The Issuer establishes if a Federation Entity is eligible to obtain
   X.509 Certificates for the identifier configured in the Requestor's
   Entity Configuration.

   The Federation Entity Keys are used to satisfy the Issuer's
   challenge, and the public portion of the keys included in the issued
   X.509 Certificates.

   The protocol assumes the following discovery preconditions are met.
   The Issuer has the guarantee that:

   1.  The Requestor controls the private key related to the public part
       published in its Entity Configuration, attested by the superior
       Entity Statement.

   2.  The Requestor controls the identifier in question, having
       published the Entity Configuration.

   The CSR MUST include the public key, attested within the Trust Chain,
   used by the Requestor to satisfy the Issuer's challenge.

   This process may be repeated to request multiple certificates related
   to the Federation Entity Keys and linked to a single Entity.

6.  Protocol Flow

   This section presents the protocol flow.  The protocol flow is
   subdivided in the following phases:

   *  *Discovery*, the Requestor obtains the available CAs within a
      federation.

   *  *Order request*, the Requestor requests a X.509 certificate to a
      CA using the ACME protocol.

6.1.  Discovery Preconditions

   The protocol assumes the following discovery preconditions are met,
   where for discovery is intended the phase where a Requestor searches
   an Issuer to requests an X.509 certificate.

   1.  The Requestor and the Issuer MUST publish their Entity
       Configuration as defined in the Section 6
       (https://openid.net/specs/openid-federation-1_0.html#name-
       obtaining-federation-entity) of [OPENID-FED].

   2.  The Requestor and the Issuer MUST be able to establish the trust
       to each other obtaining the Trust Chain of each other, as defined
       in the Section 3.2 (https://openid.net/specs/openid-federation-
       1_0.html#name-trust-chain) of [OPENID-FED].

   3.  The Trust Anchor and its Intermediates SHOULD implement an ACME
       server, extended according to this document.

   4.  The Issuer MUST publish in its Entity Configuration, within the
       metadata parameter as defined in the Section 4
       (https://openid.net/specs/openid-federation-1_0.html#name-
       metadata-type-identifiers) of [OPENID-FED], the metadata type
       acme_provider according to the Section 6.3 of this specification.

   5.  The Issuer MAY be a Leaf, in these cases a specific Trust Mark
       SHOULD be issued by the Trust Anchor, or on behalf of it by an
       allowed Trust Mark issuer as configured in the federation, and
       the Trust Mark MUST then be published within the Leaf Entity
       Configuration.

   Where the precondition number 4 and number 5 are not met, there MAY
   be some cases where the Requestor knows a priori the identity of the
   Issuers in one or more federations; in these cases the Requestor
   directly requests the issuance of the X.509 certificate to the
   trusted Issuer.

6.2.  Overview

   TBD: high level design and ascii sequence diagram.

   1.  The Requestor checks if its superior Federation Entity supports
       the ACME protocol for OpenID Federation 1.0.  If not, the
       Requestor starts the discovery process to find which are the
       Issuers within the federation.

   2.  The Requestor requests and obtains a new nonce from the Issuer,
       by sending a HTTP HEAD request to the Issuer's newNonce resource;

   3.  The Issuer evaluates the trust to the Requestor by checking if it
       is part of the federation.  If not the newNonce request MUST be
       rejected (*TBD* the error to return).  There are two ways the
       Issuer is able to check if a Requestor is part of the federation,
       these are listed below:

       *  The Requestor adds the Trust Chain JWS header parameter
          related to itself, this option is RECOMMENDED since it reduces
          the effort of the Issuer in evaluating the trust to the
          Requestor;

       *  The Requestor doesn't add the Trust Chain in the request, then
          the Issuer MUST start a Federation Entity Discovery
          (https://openid.net/specs/openid-federation-1_0.html#section-
          8) to obtain the Trust Chain related to the Requestor.

   4.  The Requestor begins the certificate issuance process by sending
       a HTTP POST request to the Issuer's newOrder resource, and
       follows the remainder of the ACME protocl as specified in
       [RFC8555], using the new challenge defined in Section 6.4.

6.3.  Metadata

   The Issuer MUST publish its Entity Configuration including the
   acme_provider metadata within it.

   This section describe how to use the parameters defined in the
   Section 7.1.1 (https://datatracker.ietf.org/doc/html/rfc8555#section-
   7.1.1) of [RFC8555] in the federation Entity Configuration of the
   Issuer.

{
  "metadata":
    "acme_provider": {
      "newNonce": "https://issuer.example.com/acme/new-nonce",
      "newOrder": "https://issuer.example.com/acme/new-order",
      "revokeCert": "https://issuer.example.com/acme/revoke-cert",
      "meta": {
        "termsOfService": "https://issuer.example.com/acme/terms/2017-5-30",
        "website": "https://www.issuer.example.com/",
        "caaIdentities": ["issuer.example.com"],
        "externalAccountRequired": false
      }
   }
}

6.4.  OpenID Federation Challenge Type

   The OpenID Federation challenge type allows a client to prove control
   of a domain and its underlying endpoints using the trust evaluation
   mechanism provided by OpenID Federation 1.0.  The requestor
   demonstrates control of a cryptographic public key published in its
   OpenID Federation Entity Configuration, which the ACME server uses to
   validate that the requestor is in control of the domain.

   The openid-federation-01 ACME challenge object has the following
   format:

   type (required, string): The string "openid-federation-01"

   token (required, string): A random value that uniquely identifies the
   challenge.  This value MUST have at least 128 bits of entropy.  It
   MUST NOT contain any characters outside the base64url alphabet as
   described in Section 5 of [RFC4648].  Trailing '=' padding characters
   MUST be stripped.  See [RFC4086] for additional information on
   randomness requirements.

      {
        "type": "openid-federation-01",
        "url": "https://issuer.example.com/acme/chall/prV_B7yEyA4",
        "status": "pending",
        "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
      }

   The requestor responds with an object with the following format:

   sig (required, string): a base64url encoding of a JWS, signing the
   token encoded in UTF-8 with one of the keys published in the
   requestor's OpenID Federation Entity Configuration: either in the
   top-level jwks claim as defined in Section 3 of [OIDC-FED] or
   referenced by the signed_jwks_uri, jwks_uri, or jwks claims in the
   entity metadata as defined in Section 5.2.1 of [OIDC-FED].  It is
   RECOMMENDED that this JWS include a kid claim corresponding to a
   valid key; if so, the issuer MUST only use keys with a corresponding
   kid value when evaluating the challenge response.  Otherwise, the
   issuer SHOULD enumerate all valid keys and accept a signature from
   any of them.

   trust_chain (optional, array of string): an array of base64url-
   encoded bytes containing a signed JWT and representing the trust
   chain of the client in the OpenID Federation.  See section 4.3 of
   [OPENID-FED].  The client SHOULD use a trust anchor it has in common
   with the server.  It is RECOMMENDED that the client include this
   field; otherwise, the ACME server MUST start Federation Entity
   Discovery to obtain the trust chain related to the client.

   entity_identifier (optional, string): the Entity Identifier of the
   client, which is used by the server to perform Federation Entity
   Discovery in the case that no trust chain is provided.  The client
   SHOULD include this field only when the trust_chain field is not
   provided.

   A non-normative example for an authorization with trust_chain
   specified:

      POST /acme/chall/prV_B7yEyA4
      Host: issuer.example.com
      Content-Type: application/jose+json

      {
        "protected": base64url({
          "alg": "ES256",
          "kid": "https://issuer.example.com/acme/acct/evOfKhNU60wg",
          "nonce": "UQI1PoRi5OuXzxuX7V7wL0",
          "url": "https://issuer.example.com/acme/chall/prV_B7yEyA4"
        }),
        "payload": base64url({
         "sig": "wQAvHlPV1tVxRW0vZUa4BQ...",
         "trust_chain": ["eyJhbGciOiJFU...", "eyJhbGci..."]
        }),
        "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
      }

   A non-normative example for an authorization with entity_identifier
   specified:

      POST /acme/chall/prV_B7yEyA4
      Host: issuer.example.com
      Content-Type: application/jose+json

      {
        "protected": base64url({
          "alg": "ES256",
          "kid": "https://issuer.example.com/acme/acct/evOfKhNU60wg",
          "nonce": "UQI1PoRi5OuXzxuX7V7wL0",
          "url": "https://issuer.example.com/acme/chall/prV_B7yEyA4"
        }),
        "payload": base64url({
         "sig": "wQAvHlPV1tVxRW0vZUa4BQ...",
         "entity_identifier": "https://requestor.example.com"
        }),
        "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
      }

   On receiving a response, the issuer retrieves the public keys
   associated with the given entity (possibly performing Federation
   Entity Discovery to do so), then:

   *  Verifies that the requested domain names match the FQDN contained
      within the sub parameter of the requestor's Entity Configuration.
      For example, if the sub parameter within the Entity Configuration
      contains the value https://requestor.example.com/oidc/rp, the
      extracted FQDN is then requestor.example.com.  Since the Entity
      Configuration can contain at most one FQDN, this effectively means
      that this challenge type works with requests for a single domain
      name only.

   *  Verifies that the sig field of the payload includes a valid JWS
      over the challenge token, signed with one of the keys published in
      the requestor's Entity Configuration, either in the top-level jwks
      claim as defined in Section 3 of [OPENID-FED] or referenced by the
      signed_jwks_uri, jwks_uri, or jwks claims in the entity metadata
      as defined in Section 5.2.1 of [OEPNID-FED].  If the requestor
      provided a kid value in its challenge response, only keys in the
      Entity Configuration with a matching kid value are considered.

   If all of the above verifications succeed, then the validation is
   successful.  Otherwise, it has failed.  In either case, the issuer
   responds according to section 7.5.1 of [RFC8555].  In the event that
   the verification succeeds, the eventual CSR MUST include the public
   key, attested within the Trust Chain, used by the Requestor to
   satisfy the Issuer's challenge.

   A non-normative example for the challenge object post-validation:

      {
        "type": "openid-federation-01",
        "url": "https://issuer.example.com/acme/chall/prV_B7yEyA4",
        "status": "valid",
        "validated": "2024-10-01T12:05:13.72Z",
        "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
      }

6.4.1.  CSR and Certificate Requirements

   When using this challenge type, both the certificate signing request
   (CSR) and the X.509 Certificate:

   *  MUST include a public key corresponding to the key used to satisfy
      the challenge.

   *  MUST include no Common Name, and must include a single Subject
      Alternative Name value corresponding to an otherName with an ID of
      *TBD*, containing an Octet String value corresponding to a UTF-8
      encoding of the Requestor's Entity ID, that is, the value of the
      sub claim of the Requestor's Entity Configuration.

   TODO: determine the OID for use in the Subject Alternative Name.

7.  Publication of the Certificates within the Federation

   *TBD*, when the Issuer is the Trust Anchor or Intermediate, the X.509
   certificate linked to Federation Entity Key represented in JWK in the
   Entity Statement related to the Requestor, SHOULD be extended with
   the claim x5c, containing the issued certificate.

8.  Certificate Lifecycle and Revocation

   *TBD*.

   The issued Certificates are related to the Federation Key attested
   within a Trust Chain, their expiration time MUST be equal to the
   expiration of the Trust Chain.

   When a Federation Key is removed from the Entity Statement that
   attests it, and then it cannot be attested though a Trust Chain, the
   certificate related to it MUST be revoked by its Issuer, if not
   expired.

   A Requestor SHOULD request the revocation of its Certificate when the
   related Federation Entity Key is revoked and published in the
   Federation Historical Key Registry.

   The certficate revocation request is defined in the Section 7.6
   (https://datatracker.ietf.org/doc/html/rfc8555#section-7.6) of
   [RFC8555].

9.  Security Considerations

   TBD.

10.  IANA Considerations

   This document has no IANA actions.

11.  Normative References

   [OPENID-FED]
              Hedberg, R., Jones, M. B., Solberg, A. Å., Bradley, J., De
              Marco, G., and V. Dzhuvinov, "OpenID Connect Federation
              1.0", n.d..

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818,
              DOI 10.17487/RFC2818, May 2000,
              <https://www.rfc-editor.org/rfc/rfc2818>.

   [RFC2985]  Nystrom, M. and B. Kaliski, "PKCS #9: Selected Object
              Classes and Attribute Types Version 2.0", RFC 2985,
              DOI 10.17487/RFC2985, November 2000,
              <https://www.rfc-editor.org/rfc/rfc2985>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/rfc/rfc2986>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8555]  Barnes, R., Hoffman-Andrews, J., McCarney, D., and J.
              Kasten, "Automatic Certificate Management Environment
              (ACME)", RFC 8555, DOI 10.17487/RFC8555, March 2019,
              <https://www.rfc-editor.org/rfc/rfc8555>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Giuseppe De Marco
   independent
   Email: demarcog83@gmail.com
