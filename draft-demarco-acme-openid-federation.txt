



Automated Certificate Management Environment                 G. De Marco
Internet-Draft                                               independent
Intended status: Standards Track                                A. Ghani
Expires: 25 July 2025                                          B. Pitman
                                                                    ISRG
                                                         21 January 2025


    Automatic Certificate Management Environment (ACME) with OpenID
                             Federation 1.0
              draft-demarco-acme-openid-federation-latest

Abstract

   The Automatic Certificate Management Environment (ACME) protocol
   [RFC8555] allows server operators to obtain TLS certificates for
   their websites (HTTPS [RFC2818]), based on a demonstration of control
   over the website's domain via a fully-automated challenge/response
   protocol.

   OpenID Federation 1.0 defines how to build a trust infrastructure
   using a trusted third-party model.  It uses a trust evaluation
   mechanism to attest the possession of public keys, protocol specific
   metadata and several administrative and technical information related
   to a specific entity.

   This document defines how X.509 certificates associating a given
   OpenID Federation Entity with a key included in that Entity's
   Configuration can be issued by a trust anchor and its intermediates
   through the ACME protocol to all the organizations that are part of a
   federation built on top of OpenID Federation 1.0.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-demarco-acme-openid-
   federation/.

   Discussion of this document takes place on the Automated Certificate
   Management Environment Working Group mailing list
   (mailto:acme@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/acme/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/acme/.

   Source for this draft and an issue tracker can be found at
   https://github.com/peppelinux/draft-demarco-acme-openid-federation.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 25 July 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Audience Target and Use Cases
   3.  Terminology
   4.  Conventions and Definitions
   5.  Certificates issued using OpenID Federation
   6.  Protocol Flow
     6.1.  Discovery Preconditions
     6.2.  Overview
     6.3.  Entity Configuration Metadata
       6.3.1.  Issuer Metadata
       6.3.2.  Requestor Metadata
     6.4.  newOrder Request
     6.5.  OpenID Federation Challenge Type
       6.5.1.  CSR and Certificate Requirements
   7.  Publication of the Certificates within the Federation
   8.  Certificate Lifecycle and Revocation
   9.  Security Considerations
   10. IANA Considerations
     10.1.  Update ACME Identifier Types
     10.2.  Assign X.509 PKIX Other Name
   11. Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   OpenID Federation 1.0 allows an ACME server to issue X.509
   Certificates associating a given OpenID Entity to a key included in
   that Entity's Configuration.  X.509 Certificates can be provided to
   one or more organizations, without having pre-established any direct
   relationship or any stipulation of a contract.

   In a multilateral federation, composed by thousands of entities
   belonging to different organizations, all the participants adhere to
   the same regulation or trust framework.  OpenID Federation 1.0 allows
   each participant to recognize the other participant using a trust
   evaluation mechanism, with RESTful services and cryptographic
   materials.

   Considering that a requestor is an entity requesting the issuance of
   an X.509 Certificate to a server and the issuer is the ACME server
   that validates the entitlements of the requestor before issuing the
   X.509 Certificate, this specification defines how ACME and OpenID
   Federation 1.0 can be integrated to allow efficient issuance of X.509
   Certificates to a requestor via the introduction of a new ACME
   challenge type.  The new challenge type extends the ACME protocol in
   the following ways:

   *  It associates a cryptographic key with an OpenID Entity, rather
      than a domain, since the authentication and authorization of the
      requestor is asserted with OpenID Federation 1.0.

   *  It defines how to use and validate a basic OpenID Federation
      component, called Entity Configuration, that is a signed JWT
      published in a well-known resource (/.well-known/openid-
      federation) without requiring the /.well-known/acme-
      challenge/{token} endpoint.

   *  It defines how the OpenID Federation Subordinate Statements can be
      used for the publication of the X.509 Certificates, by a Trust
      Anchor or Intermediate, that were previously issued with ACME.

   *  It extends the ACME newOrder resource, as defined in Section 7.4
      of [RFC8555], defining a new payload identifier type called
      openid-federation.

2.  Audience Target and Use Cases

   The audience of the document are the multilateral federations that
   require automatic issuance of X.509 Certificates using an
   infrastructure of trust based on OpenID Federation 1.0.

   This specification can be implemented by:

   *  Federation Entities that join to a federation staging area using
      HTTP only transport to attest themselves as trustworthy, and then
      retrieve X.509 Certificates for their official HTTPS Federation
      Entity ID.

   *  Federation Entities that want to ask and obtain X.509 Certificate
      for one or more public cryptographic keys published in their
      Entity Configuration, as defined in Section 3 of [OPENID-FED].

3.  Terminology

   The terms "Federation Entity", "Trust Anchor", "Intermediate",
   "Entity Configuration", "Subordinate Statement", "Trust Mark" and
   "Trust Chain" used in this document are defined in Section 1.2 of
   [OPENID-FED].  The term "FQDN" used in this document is defined in
   [RFC1035].  The term "CSR" used in this document is defined in
   [RFC2986].  The term Certificate Authority used in this document is
   defined in [RFC5280].  The terms "ACME Client" and "ACME Server" are
   defined in [RFC8555].

   The specification also defines the following terms:

   Requestor:  A Federation Entity which wants to request X.509
      certificates.  It operates a web server for hosting its Entity
      Configuration.  It also operates an ACME client, extended
      according to this document.

   Issuer:  A Federation Entity which issues X.509 certificates.  It
      operates a web server for hosting its Entity Configuration.  It
      also operates an ACME server, extended according to this document.

4.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

5.  Certificates issued using OpenID Federation

   The Certificate Issuer establishes the authorization of a Federation
   Entity to obtain X.509 Certificates for the identifier configured in
   the Requestor's Entity Configuration.

   The Certificate Issuer establishes if a Federation Entity is eligible
   to obtain X.509 Certificates for the identifier configured in the
   Requestor's Entity Configuration.

   The cryptographic keys published within the Requestor's Entity
   Configuration are used to satisfy the Certificate Issuer's challenge,
   and the public portion of the keys included in the issued X.509
   Certificates.

   The protocol assumes the following discovery preconditions are met.
   The Issuer has the guarantee that:

   1.  The Requestor controls the private key related to the public part
       published in its Entity Configuration.

   2.  The Requestor controls its identifier, having published the
       Entity Configuration.

   The CSR MUST include the public key, attested within the Trust Chain,
   used by the Requestor to satisfy the Certificate Issuer's challenge.

   This process may be repeated to request multiple X.509 Certificates
   related to the other cryptographic keys published in the Requestor's
   Entity Configuration.

6.  Protocol Flow

   This section presents the protocol flow.  The protocol flow is
   subdivided in the following phases:

   *  *Discovery*, the Requestor obtains the available CAs within a
      federation, inspecting the ACME provider metadata types.

   *  *Order request*, the Requestor requests a X.509 Certificate to a
      Certificate Issuer using the ACME protocol.

6.1.  Discovery Preconditions

   The protocol assumes the following discovery preconditions are met,
   where for discovery is intended the phase where a Requestor searches
   an Certificate Issuer to request an X.509 Certificate.

   1.  The Requestor and the Issuer MUST publish their Entity
       Configuration as defined in Section 9 of [OPENID-FED].

   2.  The Requestor and the Issuer MUST be able to establish the trust
       to each other obtaining the Trust Chain of each other, as defined
       in Section 4 of [OPENID-FED].

   3.  The Issuer, be this the Trust Anchor or one or more of its
       Intermediates, MUST implement an ACME server, extended according
       to this document.

   4.  The Requestor MUST publish the metadata type acme_requestor in
       its Entity Configuration, according to Section 6.3.2.

   5.  The Issuer MUST publish the metadata type acme_provider in its
       Entity Configuration, according to Section 6.3.1.

   6.  The Certificate Issuer MAY be a Leaf, in these cases a specific
       Trust Mark enabling the issuance of X.509 Certificates within the
       federation MAY be issued by the Trust Anchor, or on behalf of it
       by an allowed Trust Mark Issuer as configured in the federation.
       When used, the Trust Mark MUST be published within the Leaf's
       Entity Configuration.

       If this is not the case, there MAY be some cases where the
       Requestor knows a priori the identity of the Issuers in one or
       more federations; in these cases, the Requestor directly requests
       the issuance of the X.509 Certificate from the Issuer, without
       discovery.

   7.  The Requestor creates an ACME Account with the Issuer, as
       described in Section 7.3 of [RFC8555].

6.2.  Overview

   1.  The Requestor checks if its superior Federation Entity supports
       the ACME protocol for OpenID Federation 1.0.  If not, the
       Requestor starts the discovery process to find which are the
       Issuers within the federation.

   2.  The Requestor requests and obtains a new nonce from the
       Certificate Issuer, by sending a HTTP HEAD request to the
       Issuer's newNonce resource;

   3.  The Requestor begins the X.509 Certificate issuance process by
       sending a HTTP POST request to the Certificate Issuer's newOrder
       resource, and follows the remainder of the ACME protocol as
       specified in [RFC8555], using the new challenge defined in
       Section 6.5.

   4.  The Requestor sends the newOrder request to the Certificate
       Issuer, as described in Section 6.4.

   5.  The Certificate Issuer evaluates the trust to the Requestor by
       checking if it is part of the federation.  If not the CSR request
       MUST be rejected (*TBD* the error to return).

   There are two ways the Certificate Issuer is able to check if a
   Requestor is part of the federation, these are listed below:

   *  The Requestor adds the Trust Chain JWT header parameter related to
      itself, as described in Section 4.3 of [OPENID-FED].  This option
      is RECOMMENDED since it reduces the effort of the Certificate
      Issuer in evaluating the trust to the Requestor.

   *  The Requestor doesn't add the Trust Chain in the request.  The
      Certificate Issuer MUST start Federation Entity Discovery as
      described in Section 9 of [OPENID-FED] to obtain the Trust Chain
      related to the Requestor.

   The following diagram illustrates a successful interaction between
   Issuer and Requestor to retrieve an X.509 Certificate.  The diagram
   assumes the Requestor has already discovered the Issuer, and the
   Requestor has already created an ACME account with the Issuer.

,-----------------.
|Requestor's      |          ,-----------.
|OpenID Federation|          |Requestor's|                         ,------------------------.                   ,-----------------------.
| Web Server      |          |ACME Client|                         |X.509 Certificate Issuer|                   |Federation Trust Anchor|
`--------+--------'          `-----+-----'                         `-----------+------------'                   `-----------+-----------'
        |                         |           POST /acme/new-order            |                                            |
        |                         |------------------------------------------->                                            |
        |                         |                                           |                                            |
        |                         |Authorization at /acme/authz/[authz-id]    |                                            |
        |                         |Finalize at /acme/order/[order-id]/finalize|                                            |
        |                         |<- - - - - - - - - - - - - - - - - - - - - -                                            |
        |                         |                                           |                                            |
        |                         |        POST /acme/authz/[authz-id]        |                                            |
        |                         |------------------------------------------->                                            |
        |                         |                                           |                                            |
        |                         |      openid-federation-01 Challenge       |                                            |
        |                         |      at /acme/chall/[chall-id]            |                                            |
        |                         |<- - - - - - - - - - - - - - - - - - - - - -                                            |
        |                         |                                           |                                            |
        |                         ----.                                       |                                            |
        |                             | Sign challenge token with private key |                                            |
        |                         <---'                                       |                                            |
        |                         |                                           |                                            |
        |                         | POST /acme/chall/[chall-id] with signed   |                                            |
        |                         | token and entity ID set to Requestor's ID |                                            |
        |                         |------------------------------------------->                                            |
        |                         |                                           |                                            |
        |                         |      Challenge validation beginning       |                                            |
        |                         |<- - - - - - - - - - - - - - - - - - - - - -                                            |
        |                         |                                           |                                            |
        |                 GET /.well-known/openid-federation                  |                                            |
        |<---------------------------------------------------------------------                                            |
        |                         |                                           |                                            |
        |                  Requestor's Entity Configuration                   |                                            |
        | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - >                                            |
        |                         |                                           |                                            |
        |                         |                                           |----.                                       |
        |                         |                                           |    | Check Entity Configuration sub matches|
        |                         |                                           |<---' Entity identifier in the order        |
        |                         |                                           |                                            |
        |                         |                                           |                                            |
        |                         |                                           |----.                                       |
        |                         |                                           |    | Check challenge sig is signed         |
        |                         |                                           |<---' with key in Entity Configuration      |
        |                         |                                           |                                            |
        |                         |                                           |                                            |
        |                         |                                           |                                            |
        |                         |                     ________________________________________________________________________________________
        |                         |                     ! OPT  /  If requestor did not provide Trust Chain                 |                    !
        |                         |                     !_____/               |                                            |                    !
        |                         |                     !                     |  Determine Trust Chain                     |                    !
        |                         |                     !                     |  from Issuer's Trust Anchor to Requestor   |                    !
        |                         |                     !                     |  (OpenID Federation Discovery)             |                    !
        |                         |                     !                     | <----------------------------------------->|                    !
        |                         |                     !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |                         |                                           |                                            |
        |                         |                                           |----.                                       |
        |                         |                                           |    | Evaluate trust chain                  |
        |                         |                                           |<---'                                       |
        |                         |                                           |                                            |
        |                         |  Respond to POST with validation success  |                                            |
        |                         |<- - - - - - - - - - - - - - - - - - - - - -                                            |
        |                         |                                           |                                            |
        |                         |                                           |                                            |
        |         ___________________________________________________________________________________                      |
        |         ! LOOP  /  Poll until authz status is "valid" or "invalid"  |                      !                     |
        |         !______/        |                                           |                      !                     |
        |         !               |    POST-as-GET /acme/authz/[authz-id]     |                      !                     |
        |         !               |------------------------------------------->                      !                     |
        |         !               |                                           |                      !                     |
        |         !               |           Current authz status            |                      !                     |
        |         !               |<-------------------------------------------                      !                     |
        |         !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!                     |
        |                         |                                           |                                            |
        |                         |                                           |                                            |
        |         ______________________________________________________________________________________________________   |
        |         ! OPT  /  If the authz status is "valid"                    |                                         !  |
        |         !_____/         |                                           |                                         !  |
        |         !               |   POST /acme/orders/[order-id]/finalize   |                                         !  |
        |         !               |   with CSR                                |                                         !  |
        |         !               |------------------------------------------->                                         !  |
        |         !               |                                           |                                         !  |
        |         !               |                                           |----.                                    !  |
        |         !               |                                           |    | Check CSR validity according to    !  |
        |         !               |                                           |<---' protocol and CA policy             !  |
        |         !               |                                           |                                         !  |
        |         !               |                                           |                                         !  |
        |         !               |       Order object with certificate       |                                         !  |
        |         !               |       at /acme/cert/[cert-id]             |                                         !  |
        |         !               |<- - - - - - - - - - - - - - - - - - - - - -                                         !  |
        |         !               |                                           |                                         !  |
        |         !               |         POST /acme/cert/[cert-id]         |                                         !  |
        |         !               |------------------------------------------->                                         !  |
        |         !               |                                           |                                         !  |
        |         !               |     Newly issued X.509 Certificate 🎉     |                                         !  |
        |         !               |<- - - - - - - - - - - - - - - - - - - - - -                                         !  |
        |         !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!  |
,--------+--------.          ,-----+-----.                         ,-----------+------------.                   ,-----------+-----------.
|Requestor's      |          |Requestor's|                         |X.509 Certificate Issuer|                   |Federation Trust Anchor|
|OpenID Federation|          |ACME Client|                         `------------------------'                   `-----------------------'
| Web Server      |          `-----------'
`-----------------'

6.3.  Entity Configuration Metadata

   This section describes the metadata a Requestor and Issuer MUST
   publish in their respective Entity Configurations.

6.3.1.  Issuer Metadata

   The Issuer MUST publish its Entity Configuration including the
   acme_provider metadata within it.  The body of the acme_provider
   metadata is the ACME Directory, as defined in Section 7.1.1 of
   [RFC8555].

   Requestors MUST use the ACME Directory provided in the Issuer's
   Entity Configuration for client configuration of ACME endpoints.

   The following is a non-normative example of an Entity Configuration
   including the acme_provider metadata:

{
  "iss": "https://issuer.example.com",
  "sub": "https://issuer.example.com",
  "iat": 1516239022,
  "exp": 1516298022,
  "jwks": {
    "keys": [
      {
        "kty": "RSA",
        "alg": "RS256",
        "use": "sig",
        "kid": "NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs",
        "n": "pnXBOusEANuug6ewezb9J_...",
        "e": "AQAB"
      }
    ]
  },
  "metadata": {
    "acme_provider": {
      "newNonce": "https://issuer.example.com/acme/new-nonce",
      "newOrder": "https://issuer.example.com/acme/new-order",
      "revokeCert": "https://issuer.example.com/acme/revoke-cert",
      "meta": {
        "termsOfService": "https://issuer.example.com/acme/terms/2017-5-30",
        "website": "https://www.issuer.example.com/",
        "caaIdentities": ["issuer.example.com"],
        "externalAccountRequired": false
      }
    }
  }
}

6.3.2.  Requestor Metadata

   The Requestor MUST publish in its Entity Configuration an
   acme_requestor metadata containing a JWK set, according to
   Section 5.2.1 of [OPENID-FED].  The keys in the set represent the
   keys that the Requestor MAY request certificates for.

   The following is a non-normative example of an Entity Configuration
   including the acme_requestor metadata and using the jwks metadata
   parameter.

{
  "iss": "https://requestor.example.com",
  "sub": "https://requestor.example.com",
  "iat": 1516239022,
  "exp": 1516298022,
  "jwks": {
    "keys": [
      {
        "kty": "RSA",
        "alg": "RS256",
        "use": "sig",
        "kid": "NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs",
        "n": "pnXBOusEANuug6ewezb9J_...",
        "e": "AQAB"
      }
    ]
  },
  "metadata": {
    "acme_requestor": {
      "jwks": {
        "keys": [
          {
            "kty": "RSA",
            "kid": "SUdtUndEWVY2cUFDeD...",
            "n": "y_Zc8rByfeRIC9fFZrD...",
            "e": "AQAB"
          },
          {
            "kty": "EC",
            "kid": "MFYycG1raTI4SkZvVDBIMF9CNGw3VEZYUmxQLVN2T21nSWlkd3",
            "crv": "P-256",
            "x": "qAOdPQROkHfZY1daGofOmSNQWpYK8c9G2m2Rbkpbd4c",
            "y": "G_7fF-T8n2vONKM15Mzj4KR_shvHBxKGjMosF6FdoPY"
          }
        ],
        "iss": "https://requestor.example.com",
        "sub": "https://requestor.example.com",
        "iat": 1618410883
      }
    }
  }
}

   The Issuer MUST only use the Requestor's acme_requestor to validate
   an ACME challenge.  Therefore, after completing the challenge, the
   Requestor MAY remove the acme_requestor metadata from its Entity
   Configuration.

6.4.  newOrder Request

   The Requestor begins certificate issuance by sending a HTTP POST
   request to the Issuer's newOrder resource, as specified in
   Section 7.4 of [RFC8555].  However, the request payload uses a new
   identifier openid-federation, whose value is the sub parameter of the
   requestor's Entity Configuration, as defined in Section 1.2 of
   [OPENID-FED].

   A non-normative example of an ACME newOrder request:

      POST /acme/new-order HTTP/1.1
      Host: issuer.example.com
      Content-Type: application/jose+json

      {
        "protected": base64url({
          "alg": "ES256",
          "kid": "https://issuer.example.com/acme/acct/evOfKhNU60wg",
          "nonce": "5XJ1L3lEkMG7tR6pA00clA",
          "url": "https://issuer.example.com/acme/new-order"
        }),
        "payload": base64url({
          "identifiers": [
            {
              "type": "openid-federation",
              "value": "https://requestor.example.com"
            }
          ],
          "notBefore": "2016-01-01T00:04:00+04:00",
          "notAfter": "2016-01-08T00:04:00+04:00"
        }),
        "signature": "H6ZXtGjTZyUnPeKn...wEA4TklBdh3e454g"
      }

   The maximum length of the JSON array contained in the identifiers
   parameter MUST be 1, since there cannot be more than a single URI
   corresponding to a Federation Entity.

6.5.  OpenID Federation Challenge Type

   The OpenID Federation challenge type allows a Requestor to prove
   control of a domain and its underlying endpoints using the trust
   evaluation mechanism provided by [OPENID-FED].  The Requestor
   demonstrates control of a cryptographic public key published in its
   OpenID Federation Entity Configuration.

   The openid-federation-01 ACME challenge object has the following
   format:

   type (required, string): The string "openid-federation-01"

   token (required, string): A random value that uniquely identifies the
   challenge.  This value MUST have at least 128 bits of entropy.  It
   MUST NOT contain any characters outside the base64url alphabet as
   described in Section 5 of [RFC4648].  Trailing '=' padding characters
   MUST be stripped.  See [RFC4086] for additional information on
   randomness requirements.

      {
        "type": "openid-federation-01",
        "url": "https://issuer.example.com/acme/chall/prV_B7yEyA4",
        "status": "pending",
        "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
      }

   The Requestor responds with an object with the following format:

   sig (required, string): a base64url encoding of a JWT, signing the
   token encoded in UTF-8 with one of the keys published in the
   Requestor's acme_requestor metadata in its Entity Configuration, as
   specified in Section 6.3.2.  It is REQUIRED that this JWT include a
   kid claim corresponding to a valid key.

   trust_chain (optional, array of string): an array of base64url-
   encoded bytes containing a signed JWT and representing the Trust
   Chain of the Requestor, See Section 4.3 of [OPENID-FED].  The
   Requestor SHOULD use a Trust Anchor it has in common with the ACME
   server.  It is RECOMMENDED that the Requestor includes this field;
   otherwise, the ACME server MUST start Federation Entity Discovery to
   obtain the Trust Chain related to the Requestor.

   A non-normative example for an authorization with trust_chain
   specified:

      POST /acme/chall/prV_B7yEyA4
      Host: issuer.example.com
      Content-Type: application/jose+json

      {
        "protected": base64url({
          "alg": "ES256",
          "kid": "https://issuer.example.com/acme/acct/evOfKhNU60wg",
          "nonce": "UQI1PoRi5OuXzxuX7V7wL0",
          "url": "https://issuer.example.com/acme/chall/prV_B7yEyA4"
        }),
        "payload": base64url({
         "sig": "wQAvHlPV1tVxRW0vZUa4BQ...",
         "trust_chain": ["eyJhbGciOiJFU...", "eyJhbGci..."]
        }),
        "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
      }

   On receiving a response, the Certificate Issuer retrieves the public
   keys associated with the given entity (possibly performing Federation
   Entity Discovery to do so), then:

   *  Verifies that the requested openid-federation value matches the
      sub parameter of the Requestor's Entity Configuration.  Since the
      Entity Configuration MUST contain at most one Entity Identifier,
      this effectively means this challenge type works with requests for
      a single Federation Entity only.

   *  Verifies that the sig field of the payload includes a valid JWT
      over the challenge token, signed with one of the keys published in
      the Requestor's acme_requestor metadata in its Entity
      Configuration, as specified in Section 6.3.2.  The Issuer MUST
      only consider the key whose kid matches the kid claim in the
      Requestor's challenge response.  The Issuer also MUST only
      consider keys published in the Requestor's acme_requestor
      metadata.

   If all of the above verifications succeed, then the validation is
   successful.  Otherwise, it has failed.  In either case, the
   Certificate Issuer responds according to Section 7.5.1 of [RFC8555].
   In the event that the verification succeeds, the eventual CSR MUST
   include the public key, attested within the Trust Chain, used by the
   Requestor to satisfy the Certificate Issuer's challenge.

   A non-normative example for the challenge object post-validation:

      {
        "type": "openid-federation-01",
        "url": "https://issuer.example.com/acme/chall/prV_B7yEyA4",
        "status": "valid",
        "validated": "2024-10-01T12:05:13.72Z",
        "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
      }

6.5.1.  CSR and Certificate Requirements

   When using this challenge type, both the certificate signing request
   (CSR) and the X.509 Certificate:

   *  MUST include a public key corresponding to the key used to satisfy
      the challenge.

   *  MUST include no Common Name, and must include a single Subject
      Alternative Name value corresponding to an otherName with a type-
      id of id-on-OpenIdFederationEntityId, containing an Octet String
      value corresponding to a UTF-8 encoding of the Requestor's Entity
      ID, that is, the value of the sub claim of the Requestor's Entity
      Configuration.

      id-on-OpenIdFederationEntityId OBJECT IDENTIFIER ::= { id-on XXX }

      OpenIdFederationEntityId ::= OctetString

7.  Publication of the Certificates within the Federation

   *TBD*, when the Certificate Issuer is the Trust Anchor or
   Intermediate, the X.509 Certificate linked to JWK in the Subordinate
   Statement related to the Requestor, SHOULD be extended with the claim
   x5c, containing the issued X.509 Certificate.

8.  Certificate Lifecycle and Revocation

   The issued X.509 Certificate is associated with a cryptographic
   public key attested within a Trust Chain.  It is up to the
   Certificate Issuer to decide the expiration time of the X.509
   Certificate.  In some cases, and when required, it MAY be set to
   match the expiration of the Trust Chain.

   When a cryptographic public key is removed from the Requestor Entity
   Configuration the X.509 Certificate related to it SHOULD be revoked
   by its Credential Issuer, if not expired.

   A Requestor SHOULD request the revocation of its X.509 Certificate
   when the related cryptographic material is revoked.  The Requestor
   SHOULD publish the revoked or expired cryptographic keys in the
   Federation Historical Key Registry.

   The X.509 Certificate revocation request is defined in Section 7.6 of
   [RFC8555].

9.  Security Considerations

   TBD.

10.  IANA Considerations

   IANA is kindly asked to update two registry tables and make one
   assignment:

10.1.  Update ACME Identifier Types

   IANA is asked to add to the "ACME Identifier Types" registry, defined
   in Section 9.7.7 of [RFC8555] a label "openid-federation" and
   reference this document.

   IANA is also asked to to the "ACME Validation Methods" registry,
   defined in Section 9.7.8 of [RFC8555] add a label "openid-federation-
   01" and reference this document.

10.2.  Assign X.509 PKIX Other Name

   IANA is asked to add a "OpenIdFederationEntityId" otherName in the
   "PKIX Other Name Forms" registry (1.3.6.1.5.5.7.8
   (https://www.iana.org/assignments/smi-numbers/smi-numbers.xhtml#smi-
   numbers-1.3.6.1.5.5.7.8)) and reference this document.

11.  Normative References

   [OPENID-FED]
              Hedberg, R., Jones, M. B., Solberg, A. Å., Bradley, J., De
              Marco, G., and V. Dzhuvinov, "OpenID Federation 1.0 -
              draft 41", 4 December 2024,
              <https://openid.net/specs/openid-federation-1_0-41.html>.

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <https://www.rfc-editor.org/rfc/rfc1035>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818,
              DOI 10.17487/RFC2818, May 2000,
              <https://www.rfc-editor.org/rfc/rfc2818>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/rfc/rfc2986>.

   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,
              "Randomness Requirements for Security", BCP 106, RFC 4086,
              DOI 10.17487/RFC4086, June 2005,
              <https://www.rfc-editor.org/rfc/rfc4086>.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <https://www.rfc-editor.org/rfc/rfc4648>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/rfc/rfc5280>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8555]  Barnes, R., Hoffman-Andrews, J., McCarney, D., and J.
              Kasten, "Automatic Certificate Management Environment
              (ACME)", RFC 8555, DOI 10.17487/RFC8555, March 2019,
              <https://www.rfc-editor.org/rfc/rfc8555>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Giuseppe De Marco
   independent
   Email: demarcog83@gmail.com


   Ameer Ghani
   ISRG
   Email: inahga@divviup.org


   Brandon Pitman
   ISRG
   Email: bran@bran.land
